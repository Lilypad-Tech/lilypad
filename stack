#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
OS_ARCH=$(uname -m | awk '{if ($0 ~ /arm64|aarch64/) print "arm64"; else if ($0 ~ /x86_64|amd64/) print "amd64"; else print "unsupported_arch"}')

############################################################################
# docker compose 
############################################################################
function compose-env() {
  export ADMIN_ADDRESS=${@:-"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"}
  export DOPPLER_TOKEN_SOLVER="$(doppler configs tokens create -p solver -c dev docker --max-age 10m --plain)"
  export DOPPLER_TOKEN_JOB_CREATOR="$(doppler configs tokens create -p job-creator -c dev docker --max-age 10m --plain)" 
}

function compose-init() {
  compose-env
  chain-clean
  docker compose -f ./docker/docker-compose.dev.yml up chain -d
  chain-boot
}

function compose-build() {
  compose-env
  docker compose -f ./docker/docker-compose.dev.yml build "$@"
}

function compose-up() {
  compose-env
  doppler run -p resource-provider -c dev -- docker compose -f ./docker/docker-compose.dev.yml up "$@"
}

function compose-down() {
  compose-env
  docker compose -f ./docker/docker-compose.dev.yml down
}


############################################################################
# Load env variables from .env.local
############################################################################
function load-local-env() {
  while IFS= read -r line || [ -n "$line" ]; do
    export $line
  done < .env.local
}

############################################################################
# chain
############################################################################

function chain() {
  ADMIN_ADDRESS=${@:-"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"}

  docker run \
    --rm \
    --name chain \
    -p 0.0.0.0:8547:8547 \
    -p 0.0.0.0:8548:8548 \
    offchainlabs/nitro-node:v3.1.1-beta.2-6073359 \
      --init.dev-init \
      --init.dev-init-address $ADMIN_ADDRESS \
      --node.dangerous.no-l1-listener \
      --node.parent-chain-reader.enable=false \
      --parent-chain.id=1337 \
      --chain.id=412346 \
      --persistent.chain /tmp/dev-test \
      --node.sequencer \
      --execution.sequencer.enable \
      --node.dangerous.no-sequencer-coordinator \
      --node.staker.enable=false \
      --init.empty=false \
      --http.port 8547 \
      --http.addr 0.0.0.0 \
      --ws.port 8548 \
      --ws.addr 0.0.0.0
}


function chain-boot() {
  echo "- Install local dependencies"
  cd hardhat && npm install -y
  echo "- Fund services with ether"
  npx hardhat run scripts/fund-services-ether.ts --network dev
  echo "- Compile contracts"
  npx hardhat compile --network dev
  cd ..
  go-bindings
  echo "- Deploy contracts"
  cd hardhat
  npx hardhat deploy --network dev
  echo "- Fund services with tokens"
  npx hardhat run scripts/fund-services-tokens.ts --network dev
  cd ..
  echo "- Done"
}

function go-bindings() {
  # check if the lilypad-solc image exists
  # and only build it if it doesn't
  if [[ -z $(docker images -q lilypad-solc) ]]; then
    docker build -t lilypad-solc hardhat/solc
  fi
  rm -rf pkg/web3/bindings
  mkdir -p pkg/web3/bindings
  go-binding LilypadToken token
  go-binding LilypadPayments payments
  go-binding LilypadStorage storage
  go-binding LilypadUsers users
  go-binding LilypadMediationRandom mediation
  go-binding LilypadOnChainJobCreator jobcreator
  go-binding LilypadController controller
  go-binding LilypadPow pow

  echo "- Generated all go bindings pkg/contract/bindings/"
}

function go-binding() {
  local name="$1"
  local pkg="$2"

  # compile the sol files into bytecode and ABI
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --user $(id -u):$(id -g) \
    --entrypoint solc \
    lilypad-solc \
       --base-path . \
       --include-path node_modules \
       --overwrite \
      --abi --bin \
      "contracts/$name.sol" \
      -o artifacts

  mkdir -p hardhat/artifacts/bindings/$pkg

  # generate the go bindings
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --user $(id -u):$(id -g) \
    --entrypoint abigen \
    lilypad-solc \
      "--bin=artifacts/$name.bin" \
      "--abi=artifacts/$name.abi" \
      "--pkg=$pkg" "--out=artifacts/bindings/$pkg/$pkg.go"

  cp -r hardhat/artifacts/bindings/$pkg pkg/web3/bindings/$pkg

  echo "- Generated go binding hardhat/artifacts/bindings/$pkg/$pkg.go"
}

function chain-clean(){
  rm -Rf $(pwd)/data/chain
  rm -rf $(pwd)/hardhat/artifacts
  rm -rf $(pwd)/hardhat/cache
  rm -rf $(pwd)/hardhat/deployments/geth
  rm -rf $(pwd)/hardhat/deployments/dev
  rm -rf $(pwd)/hardhat/.openzeppelin
}

############################################################################
# helpers
############################################################################

function hardhat-script() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat run "$@"
  )
}

function print-env() {
  hardhat-script scripts/print-env.ts | grep export
}

function print-contract-env() {
  hardhat-script scripts/print-contract-env.ts | grep export
}

function print-local-dev-env() {
  print-contract-env
}

function run-cowsay-onchain() {
  load-local-env
  cd hardhat
  npx hardhat run scripts/run-cowsay-onchain.ts
}

############################################################################
# solver
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development.  You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function solver() {
  export WEB3_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
  load-local-env
  go run . solver --network dev
}

function solver-docker-build() {
  docker build \
    -t solver \
    -f ./docker/solver/Dockerfile \
    --build-arg arch=${OS_ARCH} \
    --build-arg network=dev \
    .
}

function solver-docker-run() {
  docker run \
    --rm \
    --name solver \
    --add-host localhost:host-gateway \
    -p 8080:8080 \
    -e DOPPLER_TOKEN="$(doppler configs tokens create -p solver -c dev docker --max-age 1m --plain)" \
    solver
}

############################################################################
# job creator
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development.  You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function job-creator() {
  export WEB3_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
  load-local-env
  go run . jobcreator --network dev
}

function job-creator-docker-build() {
  docker build \
    -t job-creator \
    -f ./docker/job-creator/Dockerfile \
    --build-arg network=dev \
    .
}

function job-creator-docker-run() {
  docker run \
    --rm \
    --name job-creator \
    --add-host localhost:host-gateway \
    -e DOPPLER_TOKEN="$(doppler configs tokens create -p job-creator -c dev docker --max-age 1m --plain)" \
    job-creator
}

############################################################################
# resource provider
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development.  You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function resource-provider() {
  export WEB3_PRIVATE_KEY=0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a
  load-local-env
  go run . resource-provider "$@" --network dev --disable-pow true
}

function resource-provider-docker-build() {
  docker build \
    -t resource-provider \
    -f ./docker/resource-provider/Dockerfile \
    --build-arg NETWORK=dev \
    --build-arg DISABLE_POW=true \
    .
}

function resource-provider-docker-run() {
  docker run \
    --rm \
    --name resource-provider \
    --add-host localhost:host-gateway \
    --env-file <(doppler -p resource-provider -c dev secrets download --no-file --format docker) \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e OFFER_GPU=0 \
    -e BACALHAU_API_HOST="DO_NOT_SET" \
    resource-provider
}

############################################################################
# bacalhau node
############################################################################

function bacalhau-node(){
  export BACALHAU_SERVE_IPFS_PATH=/tmp/lilypad/data/ipfs
  export LOG_LEVEL=debug
  bacalhau serve --node-type compute,requester --peer none --private-internal-ipfs=false --job-selection-accept-networked
}

function bacalhau-docker-build() {
  docker build \
    -t bacalhau \
    -f ./docker/bacalhau/Dockerfile \
    .
}

function bacalhau-docker-run() {
  docker run \
    --privileged \
    --rm \
    --name bacalhau \
    --add-host localhost:host-gateway \
    -v /tmp/lilypad/data:/tmp/lilypad/data \
    -p 1234:1234 \
    bacalhau
}

############################################################################
# mediator
############################################################################

function mediator() {
  go run . mediator "$@"
}

############################################################################
# tests
############################################################################

function unit-tests() {
  cd hardhat
  npx hardhat test --network hardhat
}

# this assumes stack is running
# see LOCAL_DEVELOPMENT.md
function integration-tests() {
  load-local-env
  cd test
  go test -v -count 1 .
}

############################################################################
# run
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development.  You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################
function run() {
  export WEB3_PRIVATE_KEY=b3994e7660abe5f65f729bb64163c6cd6b7d0b1a8c67881a7346e3e8c7f026f5
  load-local-env
  go run . run --network dev "$@"
}

eval "$@"
