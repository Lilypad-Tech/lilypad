#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export DEFAULT_DATA_DIR="/data/geth"
export DATA_DIRECTORY=${DATA_DIRECTORY:="$DEFAULT_DATA_DIR"}
export NETWORK=${NETWORK:="geth"}

# if "$DIR/.env" exists then source it
if [[ -f "$DIR/.env" ]]; then
  source "$DIR/.env"
fi
#experimental
function dockerize(){
   docker network ls | grep lilypad || docker network create lilypad
  
  # If a container named "postgres" exists, remove it
  if [ "$(docker ps -aq -f name=postgres)" ]; then
    docker rm -f postgres
  fi
  if [ "$(docker ps -aq -f name=solver)" ]; then
    docker rm -f solver
  fi
  if [ "$(docker ps -aq -f name=metrics)" ]; then
    docker rm -f metrics
  fi

  docker run --restart always \
    --name postgres \
    --network lilypad \
    -p 5432:5432 \
    -v $DIR/migrations:$DIR/migrations \
    -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_DB=public -d postgres
  docker build -t lilypad:latest -f "./docker/dockerfile" . 
 
   docker run --restart always \
    --name metrics \
    --network lilypad \
    -d lilypad:latest
  docker exec metrics ./stack doppler docker
  docker exec metrics ./stack metrics &
  
  docker run --restart always \
    --name solver \
    --network lilypad \
    -d lilypad:latest
  docker exec solver ./stack doppler docker  
  docker exec solver ./stack docker_solver
  #compile-contracts
  #deploy-contracts
}
function docker_solver() {
  source .env
  # eval $(./stack print-local-dev-env)
  export WEB3_PRIVATE_KEY=$SOLVER_PRIVATE_KEY
  export JOB_CREATOR_ADDRESS=$JOB_CREATOR_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  export SERVER_PORT=8080
  export SERVER_URL=http://localhost:8080
  export WEB3_RPC_URL=ws://geth2:8546
  cd hardhat
  npx hardhat compile --network local_docker_network
  npx hardhat deploy --network local_docker_network
  # todo: metrics event
  cd ..
  # eval $(./stack print-local-dev-env)
  # eval $(hardhat-script scripts/print-env-docker.ts | grep export)
  cd hardhat
  npx hardhat run scripts/print-env-docker.ts >../.env
  npx hardhat run scripts/print-env-docker.ts >../share/.env
  eval $( npx hardhat run scripts/print-env-docker.ts)
  cd ..
  eval $(./stack print-local-dev-env)
  export WEB3_PRIVATE_KEY=$SOLVER_PRIVATE_KEY
  export JOB_CREATOR_ADDRESS=$JOB_CREATOR_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  export SERVER_PORT=8080
  export SERVER_URL=http://localhost:8080
  export WEB3_RPC_URL=ws://geth2:8546
  export METRICS_HOST=metrics
  ./stack doppler docker
  # fund-admin
  fund-services-ether
  cd hardhat
  npx hardhat compile --network local_docker_network
  npx hardhat deploy --network local_docker_network
  npx hardhat run scripts/print-env-docker.ts >../.env
  npx hardhat run scripts/print-env-docker.ts >../share/.env
  npx hardhat run scripts/print-contract-env.ts >../share/contract.env
  # todo: metrics event
  cd ..
  # fund-services-ether
  # deploy
  go run . solver "$@"
}
function docker_mediator() {
  cp ./share/.env .env
  source .env
  # eval $(./stack print-local-dev-env)
  # export WEB3_RPC_URL=ws://localhost:8546
  export WEB3_RPC_URL=$WEB3_RPC_URL
  # cd hardhat
  # npx hardhat compile --network local_docker_network
  # npx hardhat deploy --network local_docker_network
  # # todo: metrics event
  # cd ..

  # # cd hardhat
  # npx hardhat run scripts/print-env-docker.ts >../.env
  # eval $( npx hardhat run scripts/print-env-docker.ts)
  # cd ..
  
  export WEB3_PRIVATE_KEY=$MEDIATOR_PRIVATE_KEY
  export WEB3_DIRECTORY_ADDRESS=$DIRECTORY_ADDRESS
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  
  export WEB3_CONTROLLER_ADDRESS=0x74ef2B06A1D2035C33244A4a263FF00B84504865
  export WEB3_TOKEN_ADDRESS=0xeC1BB74f5799811c0c1Bff94Ef76Fb40abccbE4a
  export WEB3_MEDIATION_ADDRESS=0x75b0B516B47A27b1819D21B26203Abf314d42CCE
  export WEB3_JOBCREATOR_ADDRESS=0xD94A92749C0bb33c4e4bA7980c6dAD0e3eFfb720
  export WEB3_PAYMENTS_ADDRESS=0xF6a8aD553b265405526030c2102fda2bDcdDC177
  export WEB3_STORAGE_ADDRESS=0x6732128F9cc0c4344b2d4DC6285BCd516b7E59E6
  export WEB3_USERS_ADDRESS=0xAe9Ed85dE2670e3112590a2BB17b7283ddF44d9c
  export SERVER_URL=http://solver:8080
  export SERVER_HOST=solver
  export SERVER_URL=http://solver:8080
  export SERVER_HOST=solver
  # eval $(./stack print-contract-env)
  eval $(cat .env)
  # todo: metrics event
  echo $(env)
  go run . mediator "$@"
}

############################################################################
############################################################################
# postgres
############################################################################
############################################################################

# run a local postgres for logging events
function postgres() {
  docker network ls | grep lilypad || docker network create lilypad

  # If a container named "postgres" exists, remove it
  if [ "$(docker ps -aq -f name=postgres)" ]; then
    docker rm -f postgres
  fi

  docker run --restart always \
    --name postgres \
    --network lilypad \
    -p 5432:5432 \
    -v $DIR/migrations:$DIR/migrations \
    -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_DB=public -d postgres

    # -p 8546:8546 \
    # -v ${DATA_DIRECTORY}:/data/postgres \
    # ethereum/client-go:v1.13.5 \
    #   --datadir /data/geth \
    #   --dev \
    #   --ws \
    #   --ws.api web3,eth,net \
    #   --ws.addr 0.0.0.0 \
    #   --ws.port 8546 \
    #   --ws.origins '*' \
    #   --http \
    #   --http.api web3,eth,net \
    #   --http.addr 0.0.0.0 \
    #   --http.corsdomain '*' \
    #   --http.port 8545 \
    #   --http.vhosts '*'
}
############################################################################
############################################################################
# metrics
############################################################################
############################################################################

# update envs for non dev-local environment
function metrics() {
  go run . metrics "$@"
}

############################################################################
############################################################################
# doppler
############################################################################
############################################################################

# update envs for non dev-local environment
function doppler() {
  go run . config "$@"
}

############################################################################
############################################################################
# geth
############################################################################
############################################################################

# run a local geth node in dev mode mounted against a local data directory
function geth() {
  docker network ls | grep lilypad || docker network create lilypad
  docker run -d --restart always \
    --name geth \
    --network lilypad \
    -p 8545:8545 \
    -p 8546:8546 \
    -v ${DATA_DIRECTORY}:/data/geth \
    ethereum/client-go:v1.13.5 \
      --datadir /data/geth \
      --dev \
      --ws \
      --ws.api web3,eth,net \
      --ws.addr 0.0.0.0 \
      --ws.port 8546 \
      --ws.origins '*' \
      --http \
      --http.api web3,eth,net \
      --http.addr 0.0.0.0 \
      --http.corsdomain '*' \
      --http.port 8545 \
      --http.vhosts '*'
}

function geth-command() {
  docker exec -i geth geth --exec "$@" attach /data/geth/geth.ipc
}

############################################################################
############################################################################
# faucet
############################################################################
############################################################################

# fun the faucet container
function faucet() {
  source .env
  eval $(./stack print-contract-env)
  local privateKey=$(echo -n "$ADMIN_PRIVATE_KEY" | sed 's/^0x//')
  local tokenAddress=$(echo -n "$WEB3_TOKEN_ADDRESS" | sed 's/^0x//')
  docker run -d \
    --name faucet \
    -p 8080:8080 \
    --network lilypad \
    -e WEB3_PROVIDER=http://geth:8545 \
    -e PRIVATE_KEY=$privateKey \
    -e TOKEN_ADDRESS=$WEB3_TOKEN_ADDRESS \
    faucet \
      --faucet.amount=100 \
      --faucet.tokenamount=100 \
      --faucet.minutes=1
}


############################################################################
############################################################################
# bacalhau
############################################################################
############################################################################

function bacalhau-serve() {
  bacalhau serve \
    --node-type compute,requester \
    --peer none \
    --private-internal-ipfs=false \
    --job-selection-accept-networked
}

# move ALL the money apart from 1 eth to the given admin account
# this expects the .env file to already have been created
function fund-admin() {
  if [[ -z "$ADMIN_ADDRESS" ]]; then
    echo >&2 "ADMIN_ADDRESS must be set (source ${DIR}/.env)"
    exit 1
  fi
  geth-command "eth.sendTransaction({from: eth.coinbase, to: \"${ADMIN_ADDRESS}\", value: new web3.BigNumber(eth.getBalance(eth.coinbase)).minus(web3.toWei(1, \"ether\"))  })"
}

function geth-stop() {
  docker rm -f geth 2> /dev/null || true
}

function clean-deploy() {
  rm -rf ${DIR}/hardhat/artifacts
  rm -rf ${DIR}/hardhat/cache
  rm -rf ${DIR}/hardhat/deployments/geth
}

function clean() {
  # docker rm -f $(docker ps -aq) || true
  sudo rm -rf ${DATA_DIRECTORY}
  clean-deploy
}

function boot-message() {
  echo ""
  echo "############################################################################"
  echo "# $@"
  echo "############################################################################"
  echo ""
}

function deploy() {
  clean-deploy
  boot-message "Compiling contracts"
  compile-contracts
  boot-message "Deploying contracts"
  deploy-contracts
  boot-message "Funding services with tokens"
  fund-services-tokens
  boot-message "Printing balances"
  balances
}

function boot() {
  clean
  boot-message "Starting geth"
  geth
  sleep 5
  boot-message "Funding admin account"
  fund-admin
  boot-message "Funding services with ether"
  fund-services-ether
  deploy
}
#experimental
function dockerboot() {
  clean
  boot-message "Starting geth"
  geth
  sleep 5
  boot-message "Funding admin account"
  fund-admin
  boot-message "Funding services with ether"
  fund-services-ether
  deploy
}

############################################################################
############################################################################
# hardhat
############################################################################
############################################################################

function go-binding() {
  local name="$1"
  local pkg="$2"

  # compile the sol files into bytecode and ABI
  docker run --rm \
    -v $DIR/hardhat:/src \
    -w /src \
    --entrypoint solc \
    lilypad-solc \
       --base-path . \
       --include-path node_modules \
       --overwrite \
      --abi --bin \
      "contracts/$name.sol" \
      -o artifacts

  sudo chown -R $USER:$USER hardhat/artifacts
  mkdir -p hardhat/artifacts/bindings/$pkg

  # generate the go bindings
  docker run --rm \
    -v $DIR/hardhat:/src \
    -w /src \
    --entrypoint abigen \
    lilypad-solc \
      "--bin=artifacts/$name.bin" \
      "--abi=artifacts/$name.abi" \
      "--pkg=$pkg" "--out=artifacts/bindings/$pkg/$pkg.go"

  sudo chown -R $USER:$USER hardhat/artifacts/bindings/$pkg
  sudo chmod 0644 hardhat/artifacts/bindings/$pkg/$pkg.go
  cp -r hardhat/artifacts/bindings/$pkg pkg/web3/bindings/$pkg

  echo "Generated go binding hardhat/artifacts/bindings/$pkg/$pkg.go"
}

function go-bindings() {
  # check if the lilypad-solc image exists
  # and only build it if it doesn't
  if [[ -z $(docker images -q lilypad-solc) ]]; then
    docker build -t lilypad-solc hardhat/solc
  fi
  rm -rf pkg/web3/bindings
  mkdir -p pkg/web3/bindings
  go-binding LilypadToken token
  go-binding LilypadPayments payments
  go-binding LilypadStorage storage
  go-binding LilypadUsers users
  go-binding LilypadMediationRandom mediation
  go-binding LilypadOnChainJobCreator jobcreator
  go-binding LilypadController controller
  
  echo "Generated all go bindings pkg/contract/bindings/"
}

function compile-contracts() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat compile
  )
  go-bindings
}

function deploy-contracts() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat deploy --network "$NETWORK"
  )
}

function hardhat-script() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat run "$@"
  )
}

# print the env settings for the various accounts and private keys
function print-env() {
  hardhat-script scripts/print-env.ts | grep export
}

function print-contract-env() {
  hardhat-script scripts/print-contract-env.ts | grep export
}

function print-local-dev-env() {
  print-contract-env
}

function fund-services-ether() {
  hardhat-script scripts/fund-services-ether.ts
}

function fund-services-tokens() {
  hardhat-script scripts/fund-services-tokens.ts
}

function balances() {
  hardhat-script scripts/balances.ts
}

function run-cowsay-onchain() {
  hardhat-script scripts/run-cowsay-onchain.ts
}
function run-sdxl-onchain() {
  hardhat-script scripts/run-sdxl-onchain.ts
}
function run-sdxl-onchain() {
  hardhat-script scripts/run-sdxl-onchain.ts
}
############################################################################
############################################################################
# services
############################################################################
############################################################################

function run() {
  source .env
  eval $(./stack print-local-dev-env)
  export WEB3_PRIVATE_KEY=$JOB_CREATOR_PRIVATE_KEY
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  go run . run "$@"
}

function runsdxl() {
  # Check for the number of arguments provided
  #example:  ./stack runsdxl sdxl:v0.9-lilypad1 PROMPT="moo"
  if [ $# -lt 2 ]; then
    echo "Usage: $0 runsdxl <model> PROMPT=\"<prompt>\""
    exit 1
  fi

  source .env
  eval $(./stack print-local-dev-env)
  export WEB3_PRIVATE_KEY=$JOB_CREATOR_PRIVATE_KEY
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  local model="$1"
  shift  # Remove the first argument, so "$@" contains only the second one
  local prompt="$@"

  go run . run $model -i "PromptEnv=$prompt"
}

function solver() {
  source .env
  eval $(./stack print-local-dev-env)
  export WEB3_PRIVATE_KEY=$SOLVER_PRIVATE_KEY
  export JOB_CREATOR_ADDRESS=$JOB_CREATOR_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  export SERVER_PORT=8081
  export SERVER_URL=http://localhost:8081
  # todo: metrics event
  go run . solver "$@"
}

function metrics() {
  # todo: metrics event
  go run . metrics "$@"
}
# we run the jobcreator as the solver
function jobcreator() {
  source .env
  eval $(./stack print-local-dev-env)
  export WEB3_PRIVATE_KEY=$SOLVER_PRIVATE_KEY
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  # todo: metrics event
  go run . jobcreator "$@"
}

function resource-provider() {
  source .env
  eval $(./stack print-local-dev-env)
  export WEB3_RPC_URL=ws://localhost:8546
  export WEB3_PRIVATE_KEY=$RESOURCE_PROVIDER_PRIVATE_KEY
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  go run . resource-provider "$@"
}

function mediator() {
  source .env
  eval $(./stack print-local-dev-env)
  # export WEB3_RPC_URL=ws://localhost:8546
  export WEB3_RPC_URL=$WEB3_RPC_URL
  export WEB3_PRIVATE_KEY=$MEDIATOR_PRIVATE_KEY
  export WEB3_DIRECTORY_ADDRESS=$DIRECTORY_ADDRESS
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  # todo: metrics event
  go run . mediator "$@"
}

############################################################################
############################################################################
# tests
############################################################################
############################################################################

function unit-tests() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat test --network hardhat
  )
}

# this assumes boot having been run already
function integration-tests() {
  source .env
  eval $(./stack print-local-dev-env)
  export WEB3_SOLVER_ADDRESS=$SOLVER_ADDRESS
  export SERVICE_SOLVER=$SOLVER_ADDRESS
  export SERVICE_MEDIATORS=$MEDIATOR_ADDRESS
  (
    set -euo pipefail
    cd test
    go test -v -count 1 .
  )
}

eval "$@"
