#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
OS_ARCH=$(uname -m | awk '{if ($0 ~ /arm64|aarch64/) print "arm64"; else if ($0 ~ /x86_64|amd64/) print "amd64"; else print "unsupported_arch"}')

############################################################################
# docker compose
############################################################################
function compose-env() {
  export ADMIN_ADDRESS=${@:-"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"}
  export STORE_TYPE=database
  export STORE_CONN_STR=postgres://postgres:postgres@localhost:5432/solver-db?sslmode=disable
  export STORE_GORM_LOG_LEVEL=silent
}

function compose-init() {
  compose-env
  chain-clean
  if docker volume ls -q | grep -q "^lilypad_chain-data$"; then
    docker volume rm lilypad_chain-data
  fi
  docker compose -f ./docker/docker-compose.base.yml up chain -d
  chain-boot
}

# Use this for local development - will boot up non-lilypad serives
function compose-services() {
  compose-env
  docker compose -f ./docker/docker-compose.base.yml up "$@"
}

function compose-build-services() {
  load-local-env
  compose-env
  docker compose -f ./docker/docker-compose.base.yml build "$@"
}

function compose-build() {
  load-local-env
  compose-env
  get-build-version
  docker compose -f ./docker/docker-compose.dev.yml build "$@"
}

function compose-up() {
  load-local-env
  compose-env
  docker compose -f ./docker/docker-compose.dev.yml up "$@"
}

function compose-down() {
  compose-env
  docker compose -f ./docker/docker-compose.dev.yml down
}


############################################################################
# Load env variables from .local.dev
############################################################################
function load-local-env() {
  while IFS= read -r line || [ -n "$line" ]; do
    # Skip lines that are empty, start with a #, or are just whitespace
    if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
      export $line
    fi
  done < .local.dev
}

############################################################################
# Get build version info
############################################################################
function get-build-version() {
  export VERSION=$(git rev-parse --abbrev-ref HEAD)
  export COMMIT_SHA=$(git rev-parse HEAD)
}

############################################################################
# chain
############################################################################

function chain-boot() {
  echo "- Install local dependencies"
  cd hardhat && npm install -y
  echo "- Fund services with ether"
  npx hardhat run scripts/fund-services-ether.ts --network dev
  echo "- Compile contracts"
  npx hardhat compile --network dev
  cd ..
  go-bindings
  echo "- Deploy contracts"
  cd hardhat
  npx hardhat deploy --network dev
  echo "- Fund services with tokens"
  npx hardhat run scripts/fund-services-tokens.ts --network dev
  cd ..
  echo "- Done"
}

function go-bindings() {
  # check if the lilypad-solc image exists
  # and only build it if it doesn't
  if [[ -z $(docker images -q lilypad-solc) ]]; then
    docker build -t lilypad-solc hardhat/solc
  fi
  rm -rf pkg/web3/bindings
  mkdir -p pkg/web3/bindings
  go-binding LilypadToken token
  go-binding LilypadPayments payments
  go-binding LilypadStorage storage
  go-binding LilypadUsers users
  go-binding LilypadMediationRandom mediation
  go-binding LilypadOnChainJobCreator jobcreator
  go-binding LilypadController controller
  go-binding LilypadPow pow

  echo "- Generated all go bindings pkg/contract/bindings/"
}

function go-binding() {
  local name="$1"
  local pkg="$2"

  # compile the sol files into bytecode and ABI
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --user $(id -u):$(id -g) \
    --entrypoint solc \
    lilypad-solc \
       --base-path . \
       --include-path node_modules \
       --overwrite \
      --abi --bin \
      "contracts/$name.sol" \
      -o artifacts

  mkdir -p hardhat/artifacts/bindings/$pkg

  # generate the go bindings
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --user $(id -u):$(id -g) \
    --entrypoint abigen \
    lilypad-solc \
      "--bin=artifacts/$name.bin" \
      "--abi=artifacts/$name.abi" \
      "--pkg=$pkg" "--out=artifacts/bindings/$pkg/$pkg.go"

  cp -r hardhat/artifacts/bindings/$pkg pkg/web3/bindings/$pkg

  echo "- Generated go binding hardhat/artifacts/bindings/$pkg/$pkg.go"
}

function chain-clean(){
  rm -Rf $(pwd)/data/chain
  rm -rf $(pwd)/hardhat/artifacts
  rm -rf $(pwd)/hardhat/cache
  rm -rf $(pwd)/hardhat/deployments/geth
  rm -rf $(pwd)/hardhat/deployments/dev
  rm -rf $(pwd)/hardhat/.openzeppelin
}

############################################################################
# helpers
############################################################################

function hardhat-script() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat run "$@"
  )
}

function print-env() {
  hardhat-script scripts/print-env.ts | grep export
}

function print-contract-env() {
  hardhat-script scripts/print-contract-env.ts | grep export
}

function print-local-dev-env() {
  print-contract-env
}

function run-cowsay-onchain() {
  load-local-env
  cd hardhat
  npx hardhat run scripts/run-cowsay-onchain.ts
}

############################################################################
# solver
#
# Note: The presence of the WEB3_PRIVATE_KEY and SERVER_VALIDATION_TOKEN_SECRET are only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function solver() {
  load-local-env
  export WEB3_PRIVATE_KEY=${SOLVER_PRIVATE_KEY}
  export LOG_LEVEL=debug
  export STORE_TYPE=database
  export STORE_CONN_STR=postgres://postgres:postgres@localhost:5432/solver-db?sslmode=disable
  export STORE_GORM_LOG_LEVEL=silent
  export SERVER_VALIDATION_TOKEN_SECRET=912dd001a6613632c066ca10a19254430db2986a84612882a18f838a6360880e
  go run . solver --network dev "$@"
}

############################################################################
# job creator
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function job-creator() {
  load-local-env
  export WEB3_PRIVATE_KEY=${JOB_CREATOR_PRIVATE_KEY}
  export LOG_LEVEL=debug
  go run . jobcreator --network dev
}

############################################################################
# resource provider
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function resource-provider() {
  load-local-env
  export WEB3_PRIVATE_KEY=${RESOURCE_PROVIDER_PRIVATE_KEY}
  export LOG_LEVEL=debug
  go run . resource-provider "$@" --network dev --disable-pow true
}

############################################################################
# mediator
############################################################################

function mediator() {
  go run . mediator "$@"
}

############################################################################
# tests
############################################################################

function unit-tests() {
  go test -v -tags="unit" -count 1 ./...
}

function unit-tests-hardhat() {
  cd hardhat
  npx hardhat test --network hardhat
}

# Base services, solver, and resource provider must be running
# see LOCAL_DEVELOPMENT.md
function integration-tests() {
  load-local-env
  go test -v -tags="integration,main" -count 1 ./...
}

# Base services and the solver must be running
function integration-tests-solver() {
  load-local-env
  go test -v -tags="integration,solver" -count 1 ./...
}
############################################################################
# run
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################
function run() {
  load-local-env
  export WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY}
  export LOG_LEVEL=info
  go run . run --network dev "$@"
}

eval "$@"
