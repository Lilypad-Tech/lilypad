#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
OS_ARCH=$(uname -m | awk '{if ($0 ~ /arm64|aarch64/) print "arm64"; else if ($0 ~ /x86_64|amd64/) print "amd64"; else print "unsupported_arch"}')

############################################################################
# docker compose
############################################################################
function compose-env() {
  export ADMIN_ADDRESS=${@:-"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"}
  export DISABLE_TELEMETRY=false
}

function compose-init() {
  compose-env
  chain-clean
  if docker volume ls -q | grep -q "^lilypad_chain-data$"; then
    docker volume rm lilypad_chain-data
  fi
  docker compose -f ./docker/docker-compose.dev.yml up chain -d
  chain-boot
}

function compose-build() {
  load-local-env
  compose-env
  get-build-version
  docker compose -f ./docker/docker-compose.dev.yml build "$@"
}

function compose-up() {
  load-local-env
  compose-env
  docker compose -f ./docker/docker-compose.dev.yml up "$@"
}

function compose-down() {
  compose-env
  docker compose -f ./docker/docker-compose.dev.yml down
}


############################################################################
# Load env variables from .local.dev
############################################################################
function load-local-env() {
  while IFS= read -r line || [ -n "$line" ]; do
    # Skip lines that are empty, start with a #, or are just whitespace
    if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
      export $line
    fi
  done < .local.orbit
}

############################################################################
# Get build version info
############################################################################
function get-build-version() {
  export VERSION=$(git rev-parse --abbrev-ref HEAD)
  export COMMIT_SHA=$(git rev-parse HEAD)
}

############################################################################
# chain
############################################################################

function chain() {
  ADMIN_ADDRESS=${@:-"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"}

  docker run \
    --rm \
    --name chain \
    -p 0.0.0.0:8547:8547 \
    -p 0.0.0.0:8548:8548 \
    offchainlabs/nitro-node:v3.1.1-beta.2-6073359 \
      --init.dev-init \
      --init.dev-init-address $ADMIN_ADDRESS \
      --node.dangerous.no-l1-listener \
      --node.parent-chain-reader.enable=false \
      --parent-chain.id=1337 \
      --chain.id=412346 \
      --persistent.chain /tmp/dev-test \
      --node.sequencer \
      --execution.sequencer.enable \
      --node.dangerous.no-sequencer-coordinator \
      --node.staker.enable=false \
      --init.empty=false \
      --http.port 8547 \
      --http.addr 0.0.0.0 \
      --ws.port 8548 \
      --ws.addr 0.0.0.0
}


function chain-boot() {
  echo "- Install local dependencies"
  cd hardhat && npm install -y
  echo "- Fund services with ether"
  npx hardhat run scripts/fund-services-ether.ts --network orbit
  echo "- Compile contracts"
  npx hardhat compile --network orbit
  cd ..
  go-bindings
  echo "- Deploy contracts"
  cd hardhat
  npx hardhat deploy --network orbit
  echo "- Fund services with tokens"
  npx hardhat run scripts/fund-services-tokens.ts --network orbit
  cd ..
  echo "- Done"
}

function go-bindings() {
  # check if the lilypad-solc image exists
  # and only build it if it doesn't
  if [[ -z $(docker images -q lilypad-solc) ]]; then
    docker build -t lilypad-solc hardhat/solc
  fi
  rm -rf pkg/web3/bindings
  mkdir -p pkg/web3/bindings
  go-binding LilypadToken token
  go-binding LilypadPayments payments
  go-binding LilypadStorage storage
  go-binding LilypadUsers users
  go-binding LilypadMediationRandom mediation
  go-binding LilypadOnChainJobCreator jobcreator
  go-binding LilypadController controller
  go-binding LilypadPow pow

  echo "- Generated all go bindings pkg/contract/bindings/"
}

function go-binding() {
  local name="$1"
  local pkg="$2"

  # compile the sol files into bytecode and ABI
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --user $(id -u):$(id -g) \
    --entrypoint solc \
    lilypad-solc \
       --base-path . \
       --include-path node_modules \
       --overwrite \
      --abi --bin \
      "contracts/$name.sol" \
      -o artifacts

  mkdir -p hardhat/artifacts/bindings/$pkg

  # generate the go bindings
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --user $(id -u):$(id -g) \
    --entrypoint abigen \
    lilypad-solc \
      "--bin=artifacts/$name.bin" \
      "--abi=artifacts/$name.abi" \
      "--pkg=$pkg" "--out=artifacts/bindings/$pkg/$pkg.go"

  cp -r hardhat/artifacts/bindings/$pkg pkg/web3/bindings/$pkg

  echo "- Generated go binding hardhat/artifacts/bindings/$pkg/$pkg.go"
}

function chain-clean(){
  rm -Rf $(pwd)/data/chain
  rm -rf $(pwd)/hardhat/artifacts
  rm -rf $(pwd)/hardhat/cache
  rm -rf $(pwd)/hardhat/deployments/geth
  rm -rf $(pwd)/hardhat/deployments/dev
  rm -rf $(pwd)/hardhat/.openzeppelin
}

############################################################################
# helpers
############################################################################

function hardhat-script() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat run "$@"
  )
}

function print-env() {
  hardhat-script scripts/print-env.ts | grep export
}

function print-contract-env() {
  hardhat-script scripts/print-contract-env.ts | grep export
}

function print-local-dev-env() {
  print-contract-env
}

function run-cowsay-onchain() {
  load-local-env
  cd hardhat
  # WEB3_HTTP_URL=https://rpc.orbit.arsenum.com \
  # CHAIN_ID=68283778764 \
  NETWORK=orbit \
  API_HOST=\
  npx hardhat run scripts/run-cowsay-onchain.ts
}

############################################################################
# solver
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function solver() {
  load-local-env
  export WEB3_PRIVATE_KEY=${SOLVER_PRIVATE_KEY}
  export LOG_LEVEL=debug
  go run . solver --network dev "$@"
}

function solver-docker-build() {
  docker build \
    -t solver \
    -f ./docker/solver/Dockerfile \
    --build-arg arch=${OS_ARCH} \
    --build-arg network=dev \
    .
}

function solver-docker-run() {
  docker run \
    --rm \
    --name solver \
    --add-host localhost:host-gateway \
    -p 8080:8080 \
    -e DOPPLER_TOKEN="$(doppler configs tokens create -p solver -c dev docker --max-age 1m --plain)" \
    solver
}

############################################################################
# job creator
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function job-creator() {
  load-local-env
  export WEB3_PRIVATE_KEY=${JOB_CREATOR_PRIVATE_KEY}
  export LOG_LEVEL=debug
  go run . jobcreator --network dev
}

function job-creator-docker-build() {
  docker build \
    -t job-creator \
    -f ./docker/job-creator/Dockerfile \
    --build-arg network=dev \
    .
}

function job-creator-docker-run() {
  docker run \
    --rm \
    --name job-creator \
    --add-host localhost:host-gateway \
    -e DOPPLER_TOKEN="$(doppler configs tokens create -p job-creator -c dev docker --max-age 1m --plain)" \
    job-creator
}

############################################################################
# resource provider
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################

function resource-provider() {
  load-local-env
  export WEB3_PRIVATE_KEY=${RESOURCE_PROVIDER_PRIVATE_KEY}
  export LOG_LEVEL=debug
  go run . resource-provider "$@" --network dev --disable-pow true
}

function resource-provider-docker-build() {
  get-build-version
  docker build \
    -t resource-provider \
    -f ./docker/resource-provider/Dockerfile \
    --build-arg NETWORK=dev \
    --build-arg DISABLE_POW=true \
    --build-arg VERSION=${VERSION} \
    --build-arg COMMIT_SHA=${COMMIT_SHA} \
    .
}

function resource-provider-docker-run() {
  docker run \
    --rm \
    --name resource-provider \
    --add-host localhost:host-gateway \
    --env-file <(doppler -p resource-provider -c dev secrets download --no-file --format docker) \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e OFFER_GPU=0 \
    -e BACALHAU_API_HOST="DO_NOT_SET" \
    resource-provider
}

############################################################################
# bacalhau node
############################################################################

function bacalhau-node(){
  export BACALHAU_SERVE_IPFS_PATH=/tmp/lilypad/data/ipfs
  export LOG_LEVEL=debug
  bacalhau serve --node-type compute,requester --peer none --private-internal-ipfs=false --job-selection-accept-networked --ipfs-connect "/ip4/127.0.0.1/tcp/5001"
}

function bacalhau-docker-build() {
  docker build \
    -t bacalhau \
    -f ./docker/bacalhau/Dockerfile \
    .
}

function bacalhau-docker-run() {
  docker run \
    --privileged \
    --rm \
    --name bacalhau \
    --add-host localhost:host-gateway \
    -v /tmp/lilypad/data:/tmp/lilypad/data \
    -p 1234:1234 \
    bacalhau
}

############################################################################
# mediator
############################################################################

function mediator() {
  go run . mediator "$@"
}

############################################################################
# tests
############################################################################

function unit-tests() {
  cd hardhat
  npx hardhat test --network hardhat
}

# this assumes stack is running
# see LOCAL_DEVELOPMENT.md
function integration-tests() {
  load-local-env
  cd test
  go test -v -count 1 .
}

############################################################################
# run
#
# Note: The presence of the WEB3_PRIVATE_KEY here is only necessary for local development. You are advised not to import this key into a wallet nor use it for anything other for testing Lilypad locally
############################################################################
function run() {
  load-local-env
  export WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY}
  export LOG_LEVEL=info
  go run . run --network dev "$@"
}
function cow() {
  # load-local-env
  # export WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY}
  # export LOG_LEVEL=info
  #  MODULE_PATH="github.com/Lilypad-Tech/lilypad-module-cowsay:v0.0.4" \
  # WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY} \
   DISABLE_TELEMETRY=true \
   WEB3_PRIVATE_KEY=b3994e7660abe5f65f729bb64163c6cd6b7d0b1a8c67881a7346e3e8c7f026f5 \
  WEB3_CHAIN_ID=68283778764 \
  WEB3_CONTROLLER_ADDRESS=0xa85233C63b9Ee964Add6F2cffe00Fd84eb32338f \
  WEB3_PAYMENTS_ADDRESS=0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6 \
  WEB3_STORAGE_ADDRESS=0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e \
  WEB3_USERS_ADDRESS=0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82 \
  WEB3_TOKEN_ADDRESS=0xa513E6E4b8f2a923D98304ec87F64353C4D5C853 \
  WEB3_MEDIATION_ADDRESS=0x0B306BF915C4d645ff596e518fAf3F9669b97016 \
  WEB3_JOBCREATOR_ADDRESS=0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE \
  POW_ADDRESS=0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1 \
  WEB3_RPC_URL=wss://wss.orbit.arsenum.com \
  SERVICE_SOLVER=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC \
  API_HOST=\
  go run . run  cowsay:v0.0.4 "$@"
  # go run . run  github.com/Lilypad-Tech/lilypad-module-cowsay:main "$@"
}
function rp() {
  # load-local-env
  # export WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY}
  # export LOG_LEVEL=info
  #  MODULE_PATH="github.com/Lilypad-Tech/lilypad-module-cowsay:v0.0.4" \
  # WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY} \
   DISABLE_TELEMETRY=true \
   WEB3_PRIVATE_KEY=0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a \
  WEB3_CHAIN_ID=68283778764 \
  WEB3_CONTROLLER_ADDRESS=0xa85233C63b9Ee964Add6F2cffe00Fd84eb32338f \
  WEB3_PAYMENTS_ADDRESS=0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6 \
  WEB3_STORAGE_ADDRESS=0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e \
  WEB3_USERS_ADDRESS=0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82 \
  WEB3_TOKEN_ADDRESS=0xa513E6E4b8f2a923D98304ec87F64353C4D5C853 \
  WEB3_MEDIATION_ADDRESS=0x0B306BF915C4d645ff596e518fAf3F9669b97016 \
  WEB3_JOBCREATOR_ADDRESS=0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE \
  POW_ADDRESS=0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1 \
  WEB3_RPC_URL=wss://wss.orbit.arsenum.com \
  SERVICE_SOLVER=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC \
  API_HOST=\
  OFFER_GPU=1 \
  go run . resource-provider "$@"
  # go run . run  github.com/Lilypad-Tech/lilypad-module-cowsay:main "$@"
}
function jc_orbit() {
  # load-local-env
  # export WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY}
  # export LOG_LEVEL=info
  #  MODULE_PATH="github.com/Lilypad-Tech/lilypad-module-cowsay:v0.0.4" \
  # WEB3_PRIVATE_KEY=${RUN_PRIVATE_KEY} \
   DISABLE_TELEMETRY=true \
   WEB3_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a \
  WEB3_CHAIN_ID=68283778764 \
  WEB3_CONTROLLER_ADDRESS=0xa85233C63b9Ee964Add6F2cffe00Fd84eb32338f \
  WEB3_PAYMENTS_ADDRESS=0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6 \
  WEB3_STORAGE_ADDRESS=0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e \
  WEB3_USERS_ADDRESS=0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82 \
  WEB3_TOKEN_ADDRESS=0xa513E6E4b8f2a923D98304ec87F64353C4D5C853 \
  WEB3_MEDIATION_ADDRESS=0x0B306BF915C4d645ff596e518fAf3F9669b97016 \
  WEB3_JOBCREATOR_ADDRESS=0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE \
  POW_ADDRESS=0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1 \
  WEB3_RPC_URL=wss://wss.orbit.arsenum.com \
  SERVICE_SOLVER=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC \
  API_HOST=\
  go run . jobcreator "$@"
  # go run . run  github.com/Lilypad-Tech/lilypad-module-cowsay:main "$@"
}
eval "$@"
  #  WEB3_CHAIN_ID=95873066572\
  #  WEB3_CONTROLLER_ADDRESS=0xdF2bc8d64A869eF4605BA821cE7183A702D5Bf72\
  #  WEB3_PAYMENTS_ADDRESS=0xE7FdFfD56797a6E6024a09bd168effCa6C5208cE\
  #  WEB3_POW_ADDRESS=0x7cFA21dB253afBcD9AaCf2dE58FC3C0e9D1a9149\
  #  WEB3_STORAGE_ADDRESS=0xDf9EAf5f1020d75c502DC66FFCC43a634E10017b\
  #  WEB3_TOKEN_ADDRESS=0x2B0722b2C623b19aDA2ec56D50487203a7475C38\
  #  WEB3_USERS_ADDRESS=0x3f4048eBDB5C853EDBe30843f8e8e6CC9aFfAbFe\
  #  SERVICE_SOLVER=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\