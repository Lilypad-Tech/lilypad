#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
OS_ARCH=$(uname -m | awk '{if ($0 ~ /arm64|aarch64/) print "arm64"; else if ($0 ~ /x86_64|amd64/) print "amd64"; else print "unsupported_arch"}')

############################################################################
# chain
############################################################################

function chain-docker-build() {
  docker build \
    -t chain \
    -f ./docker/chain/Dockerfile \
    --build-arg arch=${OS_ARCH} \
    --build-arg admin_address=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 \
    .
}

function chain-docker-run() {
  DATA_DIR=${@:-/data/chain}

  docker run \
    --rm \
    --name chain \
    --network lilypad \
    --add-host localhost:host-gateway \
    -p 8545:8545 \
    -p 8546:8546 \
    -v ${DATA_DIR}:/data/chain \
    chain
}

function chain-boot() {
  echo "- Install local dependencies"
  cd hardhat && yarn install && cd ..
  echo "- Funding services with ether"
  fund-services-ether
  echo "- Funding services with ether"
  deploy
}

function deploy() {
  clean-deploy
  echo "- Compiling contracts"
  compile-contracts
  echo "- Deploying contracts"
  deploy-contracts
  echo "- Funding services with tokens"
  fund-services-tokens
  echo "- Printing balances"
  balances
}


function chain-fund-admin() {
  docker exec -i chain geth --exec "eth.sendTransaction({from: eth.coinbase, to: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\", value: new web3.BigNumber(eth.getBalance(eth.coinbase)).minus(web3.toWei(1, \"ether\"))  })" attach /data/chain/geth.ipc
}

function clean() {
  DATA_DIR=${@:-/data/chain}

  docker rm -f $(docker ps -aq) || true
  rm -rf ${DATA_DIR}/*
  clean-deploy
}

function clean-deploy() {
  rm -rf $(pwd)/hardhat/artifacts
  rm -rf $(pwd)/hardhat/cache
  rm -rf $(pwd)/hardhat/deployments/geth
}

############################################################################
# faucet
############################################################################

# TODO
function faucet() {
  source .env
  eval $(./stack print-contract-env)
  local privateKey=$(echo -n "$ADMIN_PRIVATE_KEY" | sed 's/^0x//')
  local tokenAddress=$(echo -n "$WEB3_TOKEN_ADDRESS" | sed 's/^0x//')
  docker run -d \
    --name faucet \
    -p 8080:8080 \
    --network lilypad \
    -e WEB3_PROVIDER=http://geth:8545 \
    -e PRIVATE_KEY=$privateKey \
    -e TOKEN_ADDRESS=$WEB3_TOKEN_ADDRESS \
    faucet \
      --faucet.amount=100 \
      --faucet.tokenamount=100 \
      --faucet.minutes=1
}


############################################################################
# hardhat
############################################################################

function compile-contracts() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat compile
  )
  go-bindings
}

function go-bindings() {
  # check if the lilypad-solc image exists
  # and only build it if it doesn't
  if [[ -z $(docker images -q lilypad-solc) ]]; then
    docker build -t lilypad-solc hardhat/solc
  fi
  rm -rf pkg/web3/bindings
  mkdir -p pkg/web3/bindings
  go-binding LilypadToken token
  go-binding LilypadPayments payments
  go-binding LilypadStorage storage
  go-binding LilypadUsers users
  go-binding LilypadMediationRandom mediation
  go-binding LilypadOnChainJobCreator jobcreator
  go-binding LilypadController controller

  echo "- Generated all go bindings pkg/contract/bindings/"
}

function go-binding() {
  local name="$1"
  local pkg="$2"

  # compile the sol files into bytecode and ABI
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --entrypoint solc \
    lilypad-solc \
       --base-path . \
       --include-path node_modules \
       --overwrite \
      --abi --bin \
      "contracts/$name.sol" \
      -o artifacts

  chown -R $USER hardhat/artifacts
  mkdir -p hardhat/artifacts/bindings/$pkg

  # generate the go bindings
  docker run --rm \
    -v $(pwd)/hardhat:/src \
    -w /src \
    --entrypoint abigen \
    lilypad-solc \
      "--bin=artifacts/$name.bin" \
      "--abi=artifacts/$name.abi" \
      "--pkg=$pkg" "--out=artifacts/bindings/$pkg/$pkg.go"

  chown -R $USER hardhat/artifacts/bindings/$pkg
  chmod 0644 hardhat/artifacts/bindings/$pkg/$pkg.go
  cp -r hardhat/artifacts/bindings/$pkg pkg/web3/bindings/$pkg

  echo "- Generated go binding hardhat/artifacts/bindings/$pkg/$pkg.go"
}

function deploy-contracts() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat deploy --network geth
  )
}

############################################################################
# helpers
############################################################################

function hardhat-script() {
  (
    set -euo pipefail
    cd hardhat
    npx hardhat run "$@"
  )
}

function print-env() {
  hardhat-script scripts/print-env.ts | grep export
}

function print-contract-env() {
  hardhat-script scripts/print-contract-env.ts | grep export
}

function print-local-dev-env() {
  print-contract-env
}

function fund-services-ether() {
  hardhat-script scripts/fund-services-ether.ts
}

function fund-services-tokens() {
  hardhat-script scripts/fund-services-tokens.ts
}

function balances() {
  hardhat-script scripts/balances.ts
}

function run-cowsay-onchain() {
  cd hardhat
  doppler run -p run-cowsay-onchain -c dev -- npx hardhat run scripts/run-cowsay-onchain.ts
}

############################################################################
# solver
############################################################################

function solver() {
  echo "- Reminder to do doppler setup to project->solver and config->dev"
  doppler run -p solver -c dev -- go run . solver
}

function solver-docker-build() {
  docker build \
    -t solver \
    -f ./docker/solver/Dockerfile \
    --build-arg arch=${OS_ARCH} \
    .
}

function solver-docker-run() {
  docker run \
    --rm \
    --name solver \
    --network lilypad \
    --add-host localhost:host-gateway \
    -p 8080:8080 \
    -e DOPPLER_TOKEN="$(doppler configs tokens create -p solver -c dev docker --max-age 1m --plain)" \
    solver
}

############################################################################
# job creator
############################################################################

function job-creator() {
  echo "- Reminder to do doppler setup to project->job-creator and config->dev"
  doppler run -p job-creator -c dev -- go run . jobcreator
}

function job-creator-docker-build() {
  docker build \
    -t job-creator \
    -f ./docker/job-creator/Dockerfile \
    .
}

function job-creator-docker-run() {
  docker run \
    --rm \
    --name job-creator \
    --network lilypad \
    --add-host localhost:host-gateway \
    -e DOPPLER_TOKEN="$(doppler configs tokens create -p job-creator -c dev docker --max-age 1m --plain)" \
    job-creator
}

############################################################################
# resource provider
############################################################################

function resource-provider() {
  echo "- Reminder to do doppler setup to project->resource-provider and config->dev"
  doppler run -p resource-provider -c dev -- go run . resource-provider "$@"
}

function resource-provider-docker-build() {
  docker build \
    -t resource-provider \
    -f ./docker/resource-provider/Dockerfile \
    --build-arg doppler_config=dev \
    --build-arg DOPPLER_TOKEN_RESOURCE_PROVIDER="$(doppler configs tokens create -p resource-provider -c dev resource_provider_docker --plain)" \
    .
}

function resource-provider-docker-run() {
  docker run \
    --rm \
    --name resource-provider \
    --network lilypad \
    --add-host localhost:host-gateway \
    -e DOPPLER_TOKEN_RESOURCE_PROVIDER="$(doppler configs tokens create -p resource-provider -c dev resource_provider_docker --max-age 1m --plain)" \
    resource-provider
}

############################################################################
# bacalhau node
############################################################################

function bacalhau-node(){
  export BACALHAU_SERVE_IPFS_PATH=/tmp/lilypad/data/ipfs
  export LOG_LEVEL=debug
  bacalhau serve --node-type compute,requester --peer none --private-internal-ipfs=false --job-selection-accept-networked
}

function bacalhau-docker-build() {
  docker build \
    -t bacalhau \
    -f ./docker/bacalhau/Dockerfile \
    .
}

function bacalhau-docker-run() {
  docker run \
    --privileged \
    --rm \
    --name bacalhau \
    --network lilypad \
    --add-host localhost:host-gateway \
    -v /tmp/lilypad/data:/tmp/lilypad/data \
    -p 1234:1234 \
    bacalhau
}

############################################################################
# mediator
############################################################################

function mediator() {
  go run . mediator "$@"
}

############################################################################
# tests
############################################################################

function unit-tests() {
  cd hardhat
  npx hardhat test --network hardhat
}

# this assumes chain is running
# and chain-fund-admin
# and chain-boot
function integration-tests() {
  cd test
  doppler run -p integration-tests -c dev -- go test -v -count 1 .
}

eval "$@"
