// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: gpu_tools.proto

package gpu_tools_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GpuTools_Init_FullMethodName           = "/gpu_tools.GpuTools/Init"
	GpuTools_UpdateJwtToken_FullMethodName = "/gpu_tools.GpuTools/UpdateJwtToken"
	GpuTools_StartProfiling_FullMethodName = "/gpu_tools.GpuTools/StartProfiling"
	GpuTools_StopProfiling_FullMethodName  = "/gpu_tools.GpuTools/StopProfiling"
)

// GpuToolsClient is the client API for GpuTools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GpuToolsClient interface {
	// Initialize the service
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	// Update JWT token used for authentication
	UpdateJwtToken(ctx context.Context, in *UpdateJwtTokenRequest, opts ...grpc.CallOption) (*UpdateJwtTokenResponse, error)
	// Start GPU profiling for a specific deal
	StartProfiling(ctx context.Context, in *StartProfilingRequest, opts ...grpc.CallOption) (*StartProfilingResponse, error)
	// Stop GPU profiling for a specific deal
	StopProfiling(ctx context.Context, in *StopProfilingRequest, opts ...grpc.CallOption) (*StopProfilingResponse, error)
}

type gpuToolsClient struct {
	cc grpc.ClientConnInterface
}

func NewGpuToolsClient(cc grpc.ClientConnInterface) GpuToolsClient {
	return &gpuToolsClient{cc}
}

func (c *gpuToolsClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, GpuTools_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuToolsClient) UpdateJwtToken(ctx context.Context, in *UpdateJwtTokenRequest, opts ...grpc.CallOption) (*UpdateJwtTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJwtTokenResponse)
	err := c.cc.Invoke(ctx, GpuTools_UpdateJwtToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuToolsClient) StartProfiling(ctx context.Context, in *StartProfilingRequest, opts ...grpc.CallOption) (*StartProfilingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartProfilingResponse)
	err := c.cc.Invoke(ctx, GpuTools_StartProfiling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuToolsClient) StopProfiling(ctx context.Context, in *StopProfilingRequest, opts ...grpc.CallOption) (*StopProfilingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopProfilingResponse)
	err := c.cc.Invoke(ctx, GpuTools_StopProfiling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpuToolsServer is the server API for GpuTools service.
// All implementations must embed UnimplementedGpuToolsServer
// for forward compatibility.
type GpuToolsServer interface {
	// Initialize the service
	Init(context.Context, *InitRequest) (*InitResponse, error)
	// Update JWT token used for authentication
	UpdateJwtToken(context.Context, *UpdateJwtTokenRequest) (*UpdateJwtTokenResponse, error)
	// Start GPU profiling for a specific deal
	StartProfiling(context.Context, *StartProfilingRequest) (*StartProfilingResponse, error)
	// Stop GPU profiling for a specific deal
	StopProfiling(context.Context, *StopProfilingRequest) (*StopProfilingResponse, error)
	mustEmbedUnimplementedGpuToolsServer()
}

// UnimplementedGpuToolsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGpuToolsServer struct{}

func (UnimplementedGpuToolsServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedGpuToolsServer) UpdateJwtToken(context.Context, *UpdateJwtTokenRequest) (*UpdateJwtTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJwtToken not implemented")
}
func (UnimplementedGpuToolsServer) StartProfiling(context.Context, *StartProfilingRequest) (*StartProfilingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProfiling not implemented")
}
func (UnimplementedGpuToolsServer) StopProfiling(context.Context, *StopProfilingRequest) (*StopProfilingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProfiling not implemented")
}
func (UnimplementedGpuToolsServer) mustEmbedUnimplementedGpuToolsServer() {}
func (UnimplementedGpuToolsServer) testEmbeddedByValue()                  {}

// UnsafeGpuToolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GpuToolsServer will
// result in compilation errors.
type UnsafeGpuToolsServer interface {
	mustEmbedUnimplementedGpuToolsServer()
}

func RegisterGpuToolsServer(s grpc.ServiceRegistrar, srv GpuToolsServer) {
	// If the following call pancis, it indicates UnimplementedGpuToolsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GpuTools_ServiceDesc, srv)
}

func _GpuTools_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuToolsServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuTools_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuToolsServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTools_UpdateJwtToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJwtTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuToolsServer).UpdateJwtToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuTools_UpdateJwtToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuToolsServer).UpdateJwtToken(ctx, req.(*UpdateJwtTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTools_StartProfiling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuToolsServer).StartProfiling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuTools_StartProfiling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuToolsServer).StartProfiling(ctx, req.(*StartProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTools_StopProfiling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuToolsServer).StopProfiling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuTools_StopProfiling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuToolsServer).StopProfiling(ctx, req.(*StopProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GpuTools_ServiceDesc is the grpc.ServiceDesc for GpuTools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GpuTools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gpu_tools.GpuTools",
	HandlerType: (*GpuToolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _GpuTools_Init_Handler,
		},
		{
			MethodName: "UpdateJwtToken",
			Handler:    _GpuTools_UpdateJwtToken_Handler,
		},
		{
			MethodName: "StartProfiling",
			Handler:    _GpuTools_StartProfiling_Handler,
		},
		{
			MethodName: "StopProfiling",
			Handler:    _GpuTools_StopProfiling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpu_tools.proto",
}
