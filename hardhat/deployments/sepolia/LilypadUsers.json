{
  "address": "0x70eC3b0aFA059174dD54d7702624f1Dd402b706b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum SharedStructs.ServiceType",
          "name": "serviceType",
          "type": "uint8"
        }
      ],
      "name": "addUserToList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadataCID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum SharedStructs.ServiceType[]",
              "name": "roles",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct SharedStructs.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SharedStructs.ServiceType",
          "name": "serviceType",
          "type": "uint8"
        }
      ],
      "name": "removeUserFromList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SharedStructs.ServiceType",
          "name": "serviceType",
          "type": "uint8"
        }
      ],
      "name": "showUsersInList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "enum SharedStructs.ServiceType[]",
          "name": "roles",
          "type": "uint8[]"
        }
      ],
      "name": "updateUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadataCID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum SharedStructs.ServiceType[]",
              "name": "roles",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct SharedStructs.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf689a1f057d7edb2d7894ad7f379022cbd77ddd5e9aee9bf1214daecc90e76b9",
  "receipt": {
    "to": null,
    "from": "0x23f318fAe637F7F7081D71d2ECD62cb62D27ac4f",
    "contractAddress": "0x70eC3b0aFA059174dD54d7702624f1Dd402b706b",
    "transactionIndex": 39,
    "gasUsed": "1846678",
    "logsBloom": "0x
    "blockHash": "0x620aa4c9b103060185a1de4b05c10f2446228898b0d3046b7aeac28edfce7654",
    "transactionHash": "0xf689a1f057d7edb2d7894ad7f379022cbd77ddd5e9aee9bf1214daecc90e76b9",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 4609897,
        "transactionHash": "0xf689a1f057d7edb2d7894ad7f379022cbd77ddd5e9aee9bf1214daecc90e76b9",
        "address": "0x70eC3b0aFA059174dD54d7702624f1Dd402b706b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023f318fae637f7f7081d71d2ecd62cb62d27ac4f"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x620aa4c9b103060185a1de4b05c10f2446228898b0d3046b7aeac28edfce7654"
      }
    ],
    "blockNumber": 4609897,
    "cumulativeGasUsed": "5919761",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "26a3d6e19028b7f1dccb6c7997bc34c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum SharedStructs.ServiceType\",\"name\":\"serviceType\",\"type\":\"uint8\"}],\"name\":\"addUserToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.ServiceType[]\",\"name\":\"roles\",\"type\":\"uint8[]\"}],\"internalType\":\"struct SharedStructs.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SharedStructs.ServiceType\",\"name\":\"serviceType\",\"type\":\"uint8\"}],\"name\":\"removeUserFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SharedStructs.ServiceType\",\"name\":\"serviceType\",\"type\":\"uint8\"}],\"name\":\"showUsersInList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.ServiceType[]\",\"name\":\"roles\",\"type\":\"uint8[]\"}],\"name\":\"updateUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.ServiceType[]\",\"name\":\"roles\",\"type\":\"uint8[]\"}],\"internalType\":\"struct SharedStructs.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUser(address)\":{\"notice\":\"Users\"},\"initialize()\":{\"notice\":\"Init\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LilypadUsers.sol\":\"LilypadUsers\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ControllerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// as well as being ownable (i.e. our admin wallet)\\n// this contract has a modifier called onlyController\\n// it works the same way as Ownable but only the Owner\\n// can change the controller address so it gives us a way of\\n// re-pointing contracts if needed\\ncontract ControllerOwnable is Ownable {\\n\\n  // the address of the controller that is allowed to call functions\\n  address private controllerAddress;\\n\\n  // used to \\\"freeze\\\" the controller address - even the admin cannot\\n  // change it from this point onwards\\n  bool private canChangeControllerAddress = true;\\n\\n  modifier onlyController() {\\n    _checkControllerAccess();\\n    _;\\n  }\\n\\n  function _checkControllerAccess() internal view virtual returns (bool) {\\n    require(controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(_msgSender() == controllerAddress, \\\"ControllerOwnable: Only the controller can call this method\\\");\\n    return true;\\n  }\\n\\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\\n    require(_controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(canChangeControllerAddress, \\\"ControllerOwnable: canChangeControllerAddress is disabled\\\");\\n    controllerAddress = _controllerAddress;\\n  }\\n\\n  function getControllerAddress() public view returns (address) {\\n    return controllerAddress;\\n  }\\n\\n  function disableChangeControllerAddress() public onlyOwner {\\n    canChangeControllerAddress = false;\\n  }\\n}\\n\",\"keccak256\":\"0xecfd8b0beb12340f51cefee5e121932fa7aee0a41fb7d0233966419d153ef429\",\"license\":\"Apache-2.0\"},\"contracts/LilypadUsers.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./ControllerOwnable.sol\\\";\\n\\ncontract LilypadUsers is Ownable, Initializable {\\n\\n  // a map of user address -> user\\n  mapping(address => SharedStructs.User) private users;\\n\\n  // a map of user type => user address[]\\n  mapping(SharedStructs.ServiceType => address[]) private usersByType;\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize() public initializer {\\n    \\n  }\\n\\n  /**\\n   * Users\\n   */\\n\\n  function getUser(\\n    address userAddress\\n  ) public view returns (SharedStructs.User memory) {\\n    return users[userAddress];\\n  }\\n\\n  function updateUser(\\n    string memory metadataCID,\\n    string memory url,\\n    SharedStructs.ServiceType[] memory roles\\n  ) public returns (SharedStructs.User memory) {\\n    SharedStructs.User memory newUser = SharedStructs.User(\\n      tx.origin,\\n      metadataCID,\\n      url,\\n      roles\\n    );\\n    users[tx.origin] = newUser;\\n    return newUser;\\n  }\\n\\n  function addUserToList(\\n    SharedStructs.ServiceType serviceType\\n  ) public {\\n    require(users[tx.origin].userAddress != address(0), \\\"User must exist\\\");\\n    (, bool found) = _getUserListIndex(serviceType, tx.origin);\\n    require(!found, \\\"User is already part of that list\\\");\\n    require(_doesUserHaveRole(serviceType, tx.origin), \\\"User must have that role\\\");\\n    usersByType[serviceType].push(tx.origin);\\n  }\\n\\n  function removeUserFromList(\\n    SharedStructs.ServiceType serviceType\\n  ) public {\\n    require(users[tx.origin].userAddress != address(0), \\\"User must exist\\\");\\n    (uint256 index, bool found) = _getUserListIndex(serviceType, tx.origin);\\n    require(found, \\\"User is not part of that list\\\");\\n    for (uint256 i = index; i < usersByType[serviceType].length - 1; i++) {\\n      usersByType[serviceType][i] = usersByType[serviceType][i + 1];\\n    }\\n    usersByType[serviceType].pop();\\n  }\\n\\n  function showUsersInList(\\n    SharedStructs.ServiceType serviceType\\n  ) public view returns (address[] memory) {\\n    return usersByType[serviceType];\\n  }\\n\\n  // returns the index of the user found in the service list\\n  // it returns 0 and false if the user is not found\\n  function _getUserListIndex(\\n    SharedStructs.ServiceType serviceType,\\n    address userAddress\\n  ) private view returns (uint256, bool) {\\n    uint256 ret = 0;\\n    bool found = false;\\n    for (uint256 i = 0; i < usersByType[serviceType].length; i++) {\\n      if (usersByType[serviceType][i] == userAddress) {\\n        ret = i;\\n        found = true;\\n        break;\\n      }\\n    }\\n    return (ret, found);\\n  }\\n\\n  function _doesUserHaveRole(\\n    SharedStructs.ServiceType serviceType,\\n    address userAddress\\n  ) private view returns (bool) {\\n    bool found = false;\\n    for (uint256 i = 0; i < users[userAddress].roles.length; i++) {\\n      if (users[userAddress].roles[i] == serviceType) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    return found;\\n  }\\n}\\n\",\"keccak256\":\"0x7bca139366d9913f795252bae9583f7d634a599927cace6fc2163c22a6cf16c4\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b5061002c61002161003160201b60201c565b61003860201b60201c565b6100f9565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612002806101065f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063a15dcc8a11610064578063a15dcc8a146100f7578063a7f96f0614610127578063aeb5ec0114610143578063ebbbca271461015f578063f2fde38b1461018f57610091565b80636f77926b14610095578063715018a6146100c55780638129fc1c146100cf5780638da5cb5b146100d9575b5f80fd5b6100af60048036038101906100aa91906111cf565b6101ab565b6040516100bc919061141c565b60405180910390f35b6100cd6103ff565b005b6100d7610412565b005b6100e1610547565b6040516100ee919061144b565b60405180910390f35b610111600480360381019061010c9190611487565b61056e565b60405161011e919061155a565b60405180910390f35b610141600480360381019061013c9190611487565b61062e565b005b61015d60048036038101906101589190611487565b610932565b005b6101796004803603810190610174919061176a565b610b2d565b604051610186919061141c565b60405180910390f35b6101a960048036038101906101a491906111cf565b610c48565b005b6101b361105b565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461025f9061183b565b80601f016020809104026020016040519081016040528092919081815260200182805461028b9061183b565b80156102d65780601f106102ad576101008083540402835291602001916102d6565b820191905f5260205f20905b8154815290600101906020018083116102b957829003601f168201915b505050505081526020016002820180546102ef9061183b565b80601f016020809104026020016040519081016040528092919081815260200182805461031b9061183b565b80156103665780601f1061033d57610100808354040283529160200191610366565b820191905f5260205f20905b81548152906001019060200180831161034957829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156103ef57602002820191905f5260205f20905f905b82829054906101000a900460ff1660038111156103ca576103c96112bc565b5b815260200190600101906020825f010492830192600103820291508084116103aa5790505b5050505050815250509050919050565b610407610cca565b6104105f610d48565b565b5f8060159054906101000a900460ff16159050808015610443575060015f60149054906101000a900460ff1660ff16105b80610471575061045230610e09565b158015610470575060015f60149054906101000a900460ff1660ff16145b5b6104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a7906118eb565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff16021790555080156104ec5760015f60156101000a81548160ff0219169083151502179055505b8015610544575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161053b9190611957565b60405180910390a15b50565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060025f836003811115610586576105856112bc565b5b6003811115610598576105976112bc565b5b81526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561062257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105d9575b50505050509050919050565b5f73ffffffffffffffffffffffffffffffffffffffff1660015f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f1906119ba565b60405180910390fd5b5f806107068332610e2b565b915091508061074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190611a22565b60405180910390fd5b5f8290505b600160025f866003811115610767576107666112bc565b5b6003811115610779576107786112bc565b5b81526020019081526020015f20805490506107949190611a76565b8110156108b55760025f8560038111156107b1576107b06112bc565b5b60038111156107c3576107c26112bc565b5b81526020019081526020015f206001826107dd9190611aa9565b815481106107ee576107ed611adc565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f86600381111561082c5761082b6112bc565b5b600381111561083e5761083d6112bc565b5b81526020019081526020015f20828154811061085d5761085c611adc565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806108ad90611b09565b91505061074f565b5060025f8460038111156108cc576108cb6112bc565b5b60038111156108de576108dd6112bc565b5b81526020019081526020015f208054806108fb576108fa611b50565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660015f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f5906119ba565b60405180910390fd5b5f610a098232610e2b565b9150508015610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4490611bed565b60405180910390fd5b610a578232610f41565b610a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d90611c55565b60405180910390fd5b60025f836003811115610aac57610aab6112bc565b5b6003811115610abe57610abd6112bc565b5b81526020019081526020015f2032908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610b3561105b565b5f60405180608001604052803273ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481525090508060015f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610c069190611e07565b506040820151816002019081610c1c9190611e07565b506060820151816003019080519060200190610c39929190611098565b50905050809150509392505050565b610c50610cca565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb590611f46565b60405180910390fd5b610cc781610d48565b50565b610cd2611054565b73ffffffffffffffffffffffffffffffffffffffff16610cf0610547565b73ffffffffffffffffffffffffffffffffffffffff1614610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90611fae565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f805f805f5b60025f886003811115610e4757610e466112bc565b5b6003811115610e5957610e586112bc565b5b81526020019081526020015f2080549050811015610f31578573ffffffffffffffffffffffffffffffffffffffff1660025f896003811115610e9e57610e9d6112bc565b5b6003811115610eb057610eaf6112bc565b5b81526020019081526020015f208281548110610ecf57610ece611adc565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f1e5780925060019150610f31565b8080610f2990611b09565b915050610e31565b5081819350935050509250929050565b5f805f90505f5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003018054905081101561104957846003811115610fa657610fa56112bc565b5b60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003018281548110610ff857610ff7611adc565b5b905f5260205f2090602091828204019190069054906101000a900460ff166003811115611028576110276112bc565b5b036110365760019150611049565b808061104190611b09565b915050610f48565b508091505092915050565b5f33905090565b60405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b828054828255905f5260205f2090601f01602090048101928215611138579160200282015f5b8382111561110a57835183826101000a81548160ff021916908360038111156110ea576110e96112bc565b5b021790555092602001926001016020815f010492830192600103026110be565b80156111365782816101000a81549060ff02191690556001016020815f0104928301926001030261110a565b505b5090506111459190611149565b5090565b5b80821115611160575f815f90555060010161114a565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61119e82611175565b9050919050565b6111ae81611194565b81146111b8575f80fd5b50565b5f813590506111c9816111a5565b92915050565b5f602082840312156111e4576111e361116d565b5b5f6111f1848285016111bb565b91505092915050565b61120381611194565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611240578082015181840152602081019050611225565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61126582611209565b61126f8185611213565b935061127f818560208601611223565b6112888161124b565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600481106112fa576112f96112bc565b5b50565b5f81905061130a826112e9565b919050565b5f611319826112fd565b9050919050565b6113298161130f565b82525050565b5f61133a8383611320565b60208301905092915050565b5f602082019050919050565b5f61135c82611293565b611366818561129d565b9350611371836112ad565b805f5b838110156113a1578151611388888261132f565b975061139383611346565b925050600181019050611374565b5085935050505092915050565b5f608083015f8301516113c35f8601826111fa565b50602083015184820360208601526113db828261125b565b915050604083015184820360408601526113f5828261125b565b9150506060830151848203606086015261140f8282611352565b9150508091505092915050565b5f6020820190508181035f83015261143481846113ae565b905092915050565b61144581611194565b82525050565b5f60208201905061145e5f83018461143c565b92915050565b60048110611470575f80fd5b50565b5f8135905061148181611464565b92915050565b5f6020828403121561149c5761149b61116d565b5b5f6114a984828501611473565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6114e683836111fa565b60208301905092915050565b5f602082019050919050565b5f611508826114b2565b61151281856114bc565b935061151d836114cc565b805f5b8381101561154d57815161153488826114db565b975061153f836114f2565b925050600181019050611520565b5085935050505092915050565b5f6020820190508181035f83015261157281846114fe565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6115b88261124b565b810181811067ffffffffffffffff821117156115d7576115d6611582565b5b80604052505050565b5f6115e9611164565b90506115f582826115af565b919050565b5f67ffffffffffffffff82111561161457611613611582565b5b61161d8261124b565b9050602081019050919050565b828183375f83830152505050565b5f61164a611645846115fa565b6115e0565b9050828152602081018484840111156116665761166561157e565b5b61167184828561162a565b509392505050565b5f82601f83011261168d5761168c61157a565b5b813561169d848260208601611638565b91505092915050565b5f67ffffffffffffffff8211156116c0576116bf611582565b5b602082029050602081019050919050565b5f80fd5b5f6116e76116e2846116a6565b6115e0565b9050808382526020820190506020840283018581111561170a576117096116d1565b5b835b81811015611733578061171f8882611473565b84526020840193505060208101905061170c565b5050509392505050565b5f82601f8301126117515761175061157a565b5b81356117618482602086016116d5565b91505092915050565b5f805f606084860312156117815761178061116d565b5b5f84013567ffffffffffffffff81111561179e5761179d611171565b5b6117aa86828701611679565b935050602084013567ffffffffffffffff8111156117cb576117ca611171565b5b6117d786828701611679565b925050604084013567ffffffffffffffff8111156117f8576117f7611171565b5b6118048682870161173d565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061185257607f821691505b6020821081036118655761186461180e565b5b50919050565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f6118d5602e8361186b565b91506118e08261187b565b604082019050919050565b5f6020820190508181035f830152611902816118c9565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61194161193c61193784611909565b61191e565b611912565b9050919050565b61195181611927565b82525050565b5f60208201905061196a5f830184611948565b92915050565b7f55736572206d75737420657869737400000000000000000000000000000000005f82015250565b5f6119a4600f8361186b565b91506119af82611970565b602082019050919050565b5f6020820190508181035f8301526119d181611998565b9050919050565b7f55736572206973206e6f742070617274206f662074686174206c6973740000005f82015250565b5f611a0c601d8361186b565b9150611a17826119d8565b602082019050919050565b5f6020820190508181035f830152611a3981611a00565b9050919050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611a8082611a40565b9150611a8b83611a40565b9250828203905081811115611aa357611aa2611a49565b5b92915050565b5f611ab382611a40565b9150611abe83611a40565b9250828201905080821115611ad657611ad5611a49565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f611b1382611a40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4557611b44611a49565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f5573657220697320616c72656164792070617274206f662074686174206c69735f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f611bd760218361186b565b9150611be282611b7d565b604082019050919050565b5f6020820190508181035f830152611c0481611bcb565b9050919050565b7f55736572206d7573742068617665207468617420726f6c6500000000000000005f82015250565b5f611c3f60188361186b565b9150611c4a82611c0b565b602082019050919050565b5f6020820190508181035f830152611c6c81611c33565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611ccf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611c94565b611cd98683611c94565b95508019841693508086168417925050509392505050565b5f611d0b611d06611d0184611a40565b61191e565b611a40565b9050919050565b5f819050919050565b611d2483611cf1565b611d38611d3082611d12565b848454611ca0565b825550505050565b5f90565b611d4c611d40565b611d57818484611d1b565b505050565b5b81811015611d7a57611d6f5f82611d44565b600181019050611d5d565b5050565b601f821115611dbf57611d9081611c73565b611d9984611c85565b81016020851015611da8578190505b611dbc611db485611c85565b830182611d5c565b50505b505050565b5f82821c905092915050565b5f611ddf5f1984600802611dc4565b1980831691505092915050565b5f611df78383611dd0565b9150826002028217905092915050565b611e1082611209565b67ffffffffffffffff811115611e2957611e28611582565b5b611e33825461183b565b611e3e828285611d7e565b5f60209050601f831160018114611e6f575f8415611e5d578287015190505b611e678582611dec565b865550611ece565b601f198416611e7d86611c73565b5f5b82811015611ea457848901518255600182019150602085019450602081019050611e7f565b86831015611ec15784890151611ebd601f891682611dd0565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611f3060268361186b565b9150611f3b82611ed6565b604082019050919050565b5f6020820190508181035f830152611f5d81611f24565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611f9860208361186b565b9150611fa382611f64565b602082019050919050565b5f6020820190508181035f830152611fc581611f8c565b905091905056fea26469706673582212202ad3a9ed2b779db7b64f8c5c2748e8654fcdc1b2d92243d639bc20f410abdfdf64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063a15dcc8a11610064578063a15dcc8a146100f7578063a7f96f0614610127578063aeb5ec0114610143578063ebbbca271461015f578063f2fde38b1461018f57610091565b80636f77926b14610095578063715018a6146100c55780638129fc1c146100cf5780638da5cb5b146100d9575b5f80fd5b6100af60048036038101906100aa91906111cf565b6101ab565b6040516100bc919061141c565b60405180910390f35b6100cd6103ff565b005b6100d7610412565b005b6100e1610547565b6040516100ee919061144b565b60405180910390f35b610111600480360381019061010c9190611487565b61056e565b60405161011e919061155a565b60405180910390f35b610141600480360381019061013c9190611487565b61062e565b005b61015d60048036038101906101589190611487565b610932565b005b6101796004803603810190610174919061176a565b610b2d565b604051610186919061141c565b60405180910390f35b6101a960048036038101906101a491906111cf565b610c48565b005b6101b361105b565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461025f9061183b565b80601f016020809104026020016040519081016040528092919081815260200182805461028b9061183b565b80156102d65780601f106102ad576101008083540402835291602001916102d6565b820191905f5260205f20905b8154815290600101906020018083116102b957829003601f168201915b505050505081526020016002820180546102ef9061183b565b80601f016020809104026020016040519081016040528092919081815260200182805461031b9061183b565b80156103665780601f1061033d57610100808354040283529160200191610366565b820191905f5260205f20905b81548152906001019060200180831161034957829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156103ef57602002820191905f5260205f20905f905b82829054906101000a900460ff1660038111156103ca576103c96112bc565b5b815260200190600101906020825f010492830192600103820291508084116103aa5790505b5050505050815250509050919050565b610407610cca565b6104105f610d48565b565b5f8060159054906101000a900460ff16159050808015610443575060015f60149054906101000a900460ff1660ff16105b80610471575061045230610e09565b158015610470575060015f60149054906101000a900460ff1660ff16145b5b6104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a7906118eb565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff16021790555080156104ec5760015f60156101000a81548160ff0219169083151502179055505b8015610544575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161053b9190611957565b60405180910390a15b50565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060025f836003811115610586576105856112bc565b5b6003811115610598576105976112bc565b5b81526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561062257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105d9575b50505050509050919050565b5f73ffffffffffffffffffffffffffffffffffffffff1660015f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f1906119ba565b60405180910390fd5b5f806107068332610e2b565b915091508061074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190611a22565b60405180910390fd5b5f8290505b600160025f866003811115610767576107666112bc565b5b6003811115610779576107786112bc565b5b81526020019081526020015f20805490506107949190611a76565b8110156108b55760025f8560038111156107b1576107b06112bc565b5b60038111156107c3576107c26112bc565b5b81526020019081526020015f206001826107dd9190611aa9565b815481106107ee576107ed611adc565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f86600381111561082c5761082b6112bc565b5b600381111561083e5761083d6112bc565b5b81526020019081526020015f20828154811061085d5761085c611adc565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806108ad90611b09565b91505061074f565b5060025f8460038111156108cc576108cb6112bc565b5b60038111156108de576108dd6112bc565b5b81526020019081526020015f208054806108fb576108fa611b50565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660015f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f5906119ba565b60405180910390fd5b5f610a098232610e2b565b9150508015610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4490611bed565b60405180910390fd5b610a578232610f41565b610a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d90611c55565b60405180910390fd5b60025f836003811115610aac57610aab6112bc565b5b6003811115610abe57610abd6112bc565b5b81526020019081526020015f2032908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610b3561105b565b5f60405180608001604052803273ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481525090508060015f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610c069190611e07565b506040820151816002019081610c1c9190611e07565b506060820151816003019080519060200190610c39929190611098565b50905050809150509392505050565b610c50610cca565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb590611f46565b60405180910390fd5b610cc781610d48565b50565b610cd2611054565b73ffffffffffffffffffffffffffffffffffffffff16610cf0610547565b73ffffffffffffffffffffffffffffffffffffffff1614610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90611fae565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f805f805f5b60025f886003811115610e4757610e466112bc565b5b6003811115610e5957610e586112bc565b5b81526020019081526020015f2080549050811015610f31578573ffffffffffffffffffffffffffffffffffffffff1660025f896003811115610e9e57610e9d6112bc565b5b6003811115610eb057610eaf6112bc565b5b81526020019081526020015f208281548110610ecf57610ece611adc565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f1e5780925060019150610f31565b8080610f2990611b09565b915050610e31565b5081819350935050509250929050565b5f805f90505f5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003018054905081101561104957846003811115610fa657610fa56112bc565b5b60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003018281548110610ff857610ff7611adc565b5b905f5260205f2090602091828204019190069054906101000a900460ff166003811115611028576110276112bc565b5b036110365760019150611049565b808061104190611b09565b915050610f48565b508091505092915050565b5f33905090565b60405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b828054828255905f5260205f2090601f01602090048101928215611138579160200282015f5b8382111561110a57835183826101000a81548160ff021916908360038111156110ea576110e96112bc565b5b021790555092602001926001016020815f010492830192600103026110be565b80156111365782816101000a81549060ff02191690556001016020815f0104928301926001030261110a565b505b5090506111459190611149565b5090565b5b80821115611160575f815f90555060010161114a565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61119e82611175565b9050919050565b6111ae81611194565b81146111b8575f80fd5b50565b5f813590506111c9816111a5565b92915050565b5f602082840312156111e4576111e361116d565b5b5f6111f1848285016111bb565b91505092915050565b61120381611194565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611240578082015181840152602081019050611225565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61126582611209565b61126f8185611213565b935061127f818560208601611223565b6112888161124b565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600481106112fa576112f96112bc565b5b50565b5f81905061130a826112e9565b919050565b5f611319826112fd565b9050919050565b6113298161130f565b82525050565b5f61133a8383611320565b60208301905092915050565b5f602082019050919050565b5f61135c82611293565b611366818561129d565b9350611371836112ad565b805f5b838110156113a1578151611388888261132f565b975061139383611346565b925050600181019050611374565b5085935050505092915050565b5f608083015f8301516113c35f8601826111fa565b50602083015184820360208601526113db828261125b565b915050604083015184820360408601526113f5828261125b565b9150506060830151848203606086015261140f8282611352565b9150508091505092915050565b5f6020820190508181035f83015261143481846113ae565b905092915050565b61144581611194565b82525050565b5f60208201905061145e5f83018461143c565b92915050565b60048110611470575f80fd5b50565b5f8135905061148181611464565b92915050565b5f6020828403121561149c5761149b61116d565b5b5f6114a984828501611473565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6114e683836111fa565b60208301905092915050565b5f602082019050919050565b5f611508826114b2565b61151281856114bc565b935061151d836114cc565b805f5b8381101561154d57815161153488826114db565b975061153f836114f2565b925050600181019050611520565b5085935050505092915050565b5f6020820190508181035f83015261157281846114fe565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6115b88261124b565b810181811067ffffffffffffffff821117156115d7576115d6611582565b5b80604052505050565b5f6115e9611164565b90506115f582826115af565b919050565b5f67ffffffffffffffff82111561161457611613611582565b5b61161d8261124b565b9050602081019050919050565b828183375f83830152505050565b5f61164a611645846115fa565b6115e0565b9050828152602081018484840111156116665761166561157e565b5b61167184828561162a565b509392505050565b5f82601f83011261168d5761168c61157a565b5b813561169d848260208601611638565b91505092915050565b5f67ffffffffffffffff8211156116c0576116bf611582565b5b602082029050602081019050919050565b5f80fd5b5f6116e76116e2846116a6565b6115e0565b9050808382526020820190506020840283018581111561170a576117096116d1565b5b835b81811015611733578061171f8882611473565b84526020840193505060208101905061170c565b5050509392505050565b5f82601f8301126117515761175061157a565b5b81356117618482602086016116d5565b91505092915050565b5f805f606084860312156117815761178061116d565b5b5f84013567ffffffffffffffff81111561179e5761179d611171565b5b6117aa86828701611679565b935050602084013567ffffffffffffffff8111156117cb576117ca611171565b5b6117d786828701611679565b925050604084013567ffffffffffffffff8111156117f8576117f7611171565b5b6118048682870161173d565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061185257607f821691505b6020821081036118655761186461180e565b5b50919050565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f6118d5602e8361186b565b91506118e08261187b565b604082019050919050565b5f6020820190508181035f830152611902816118c9565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61194161193c61193784611909565b61191e565b611912565b9050919050565b61195181611927565b82525050565b5f60208201905061196a5f830184611948565b92915050565b7f55736572206d75737420657869737400000000000000000000000000000000005f82015250565b5f6119a4600f8361186b565b91506119af82611970565b602082019050919050565b5f6020820190508181035f8301526119d181611998565b9050919050565b7f55736572206973206e6f742070617274206f662074686174206c6973740000005f82015250565b5f611a0c601d8361186b565b9150611a17826119d8565b602082019050919050565b5f6020820190508181035f830152611a3981611a00565b9050919050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611a8082611a40565b9150611a8b83611a40565b9250828203905081811115611aa357611aa2611a49565b5b92915050565b5f611ab382611a40565b9150611abe83611a40565b9250828201905080821115611ad657611ad5611a49565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f611b1382611a40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4557611b44611a49565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f5573657220697320616c72656164792070617274206f662074686174206c69735f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f611bd760218361186b565b9150611be282611b7d565b604082019050919050565b5f6020820190508181035f830152611c0481611bcb565b9050919050565b7f55736572206d7573742068617665207468617420726f6c6500000000000000005f82015250565b5f611c3f60188361186b565b9150611c4a82611c0b565b602082019050919050565b5f6020820190508181035f830152611c6c81611c33565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611ccf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611c94565b611cd98683611c94565b95508019841693508086168417925050509392505050565b5f611d0b611d06611d0184611a40565b61191e565b611a40565b9050919050565b5f819050919050565b611d2483611cf1565b611d38611d3082611d12565b848454611ca0565b825550505050565b5f90565b611d4c611d40565b611d57818484611d1b565b505050565b5b81811015611d7a57611d6f5f82611d44565b600181019050611d5d565b5050565b601f821115611dbf57611d9081611c73565b611d9984611c85565b81016020851015611da8578190505b611dbc611db485611c85565b830182611d5c565b50505b505050565b5f82821c905092915050565b5f611ddf5f1984600802611dc4565b1980831691505092915050565b5f611df78383611dd0565b9150826002028217905092915050565b611e1082611209565b67ffffffffffffffff811115611e2957611e28611582565b5b611e33825461183b565b611e3e828285611d7e565b5f60209050601f831160018114611e6f575f8415611e5d578287015190505b611e678582611dec565b865550611ece565b601f198416611e7d86611c73565b5f5b82811015611ea457848901518255600182019150602085019450602081019050611e7f565b86831015611ec15784890151611ebd601f891682611dd0565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611f3060268361186b565b9150611f3b82611ed6565b604082019050919050565b5f6020820190508181035f830152611f5d81611f24565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611f9860208361186b565b9150611fa382611f64565b602082019050919050565b5f6020820190508181035f830152611fc581611f8c565b905091905056fea26469706673582212202ad3a9ed2b779db7b64f8c5c2748e8654fcdc1b2d92243d639bc20f410abdfdf64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUser(address)": {
        "notice": "Users"
      },
      "initialize()": {
        "notice": "Init"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/LilypadUsers.sol:LilypadUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/LilypadUsers.sol:LilypadUsers",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/LilypadUsers.sol:LilypadUsers",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5977,
        "contract": "contracts/LilypadUsers.sol:LilypadUsers",
        "label": "users",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(User)6318_storage)"
      },
      {
        "astId": 5983,
        "contract": "contracts/LilypadUsers.sol:LilypadUsers",
        "label": "usersByType",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(ServiceType)6295,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(ServiceType)6295)dyn_storage": {
        "base": "t_enum(ServiceType)6295",
        "encoding": "dynamic_array",
        "label": "enum SharedStructs.ServiceType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ServiceType)6295": {
        "encoding": "inplace",
        "label": "enum SharedStructs.ServiceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(User)6318_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SharedStructs.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6318_storage"
      },
      "t_mapping(t_enum(ServiceType)6295,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ServiceType)6295",
        "label": "mapping(enum SharedStructs.ServiceType => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)6318_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.User",
        "members": [
          {
            "astId": 6309,
            "contract": "contracts/LilypadUsers.sol:LilypadUsers",
            "label": "userAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6311,
            "contract": "contracts/LilypadUsers.sol:LilypadUsers",
            "label": "metadataCID",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6313,
            "contract": "contracts/LilypadUsers.sol:LilypadUsers",
            "label": "url",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6317,
            "contract": "contracts/LilypadUsers.sol:LilypadUsers",
            "label": "roles",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_enum(ServiceType)6295)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}