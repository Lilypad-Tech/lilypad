{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ILilypadController.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"./SharedStructs.sol\";\n\ninterface ILilypadController {\n\n  function agree(\n    string memory dealId,\n    SharedStructs.DealMembers memory members,\n    SharedStructs.DealTimeouts memory timeouts,\n    SharedStructs.DealPricing memory pricing\n  ) external returns (SharedStructs.Agreement memory);\n\n  function addResult(\n    string memory dealId,\n    string memory resultsId,\n    string memory dataId,\n    uint256 instructionCount\n  ) external;\n\n  function acceptResult(\n    string memory dealId\n  ) external;\n  \n  function checkResult(\n    string memory dealId\n  ) external;\n\n  function mediationAcceptResult(\n    string memory dealId\n  ) external;\n\n  function mediationRejectResult(\n    string memory dealId\n  ) external;\n\n  function timeoutAgree(\n    string memory dealId\n  ) external;\n\n  function timeoutSubmitResult(\n    string memory dealId\n  ) external;\n\n  function timeoutJudgeResult(\n    string memory dealId\n  ) external;\n  \n  function timeoutMediateResult(\n    string memory dealId\n  ) external;\n}\n"
    },
    "contracts/ILilypadMediation.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"./SharedStructs.sol\";\n\n// this is our controller contract\n// it will be called by the mediation handler once a decision has been reached\ninterface ILilypadMediationRequester {\n  function mediationAcceptResult(\n    string memory dealId\n  ) external;\n\n  function mediationRejectResult(\n    string memory dealId\n  ) external;\n}\n\n// this is the contract that will handle mediating a deal\ninterface ILilypadMediationHandler {\n  function mediationRequest(\n    SharedStructs.Deal memory deal \n  ) external; \n}\n"
    },
    "contracts/ILilypadPayments.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\ninterface ILilypadPayments {\n\n  /**\n   * Init\n   */\n\n  function setTokenAddress(\n    address _tokenAddress\n  ) external;\n\n  /**\n   * Agreements\n   */\n  function agreeResourceProvider(\n    string memory dealId,\n    address resourceProvider,\n    uint256 timeoutCollateral\n  ) external;\n\n  function agreeJobCreator(\n    string memory dealId,\n    address jobCreator,\n    uint256 paymentCollateral,\n    uint256 timeoutCollateral\n  ) external;\n\n  /**\n   * Results\n   */\n\n  function addResult(\n    string memory dealId,\n    address resourceProvider,\n    uint256 resultsCollateral,\n    uint256 timeoutCollateral\n  ) external;\n\n  function acceptResult(\n    string memory dealId,\n    address resourceProvider,\n    address jobCreator,\n    uint256 jobCost,\n    uint256 paymentCollateral,\n    uint256 resultsCollateral,\n    uint256 timeoutCollateral\n  ) external;\n\n  function checkResult(\n    string memory dealId,\n    address jobCreator,\n    uint256 timeoutCollateral,\n    uint256 mediationFee\n  ) external;\n\n  /**\n   * Mediation\n   */\n\n  function mediationAcceptResult(\n    string memory dealId,\n    address resourceProvider,\n    address jobCreator,\n    uint256 jobCost,\n    uint256 paymentCollateral,\n    uint256 resultsCollateral,\n    uint256 mediationFee\n  ) external;\n\n  function mediationRejectResult(\n    string memory dealId,\n    address resourceProvider,\n    address jobCreator,\n    uint256 paymentCollateral,\n    uint256 resultsCollateral,\n    uint256 mediationFee\n  ) external;\n\n  /**\n   * Timeouts\n   */\n\n  function timeoutAgreeRefundResourceProvider(\n    string memory dealId,\n    address resourceProvider,\n    uint256 timeoutCollateral\n  ) external;\n\n  function timeoutAgreeRefundJobCreator(\n    string memory dealId,\n    address jobCreator,\n    uint256 paymentCollateral,\n    uint256 timeoutCollateral\n  ) external;\n\n  function timeoutSubmitResult(\n    string memory dealId,\n    address resourceProvider,\n    address jobCreator,\n    uint256 paymentCollateral,\n    uint256 timeoutCollateral\n  ) external;\n\n  function timeoutJudgeResult(\n    string memory dealId,\n    address resourceProvider,\n    address jobCreator,\n    uint256 resultsCollateral,\n    uint256 timeoutCollateral\n  ) external;\n\n  function timeoutMediateResult(\n    string memory dealId,\n    address resourceProvider,\n    address jobCreator,\n    uint256 paymentCollateral,\n    uint256 resultsCollateral,\n    uint256 mediationFee\n  ) external;\n  \n}\n"
    },
    "contracts/ILilypadStorage.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"./SharedStructs.sol\";\n\ninterface ILilypadStorage {\n  \n  /**\n   * Deals\n   */\n\n  function getDeal(\n    string memory dealId\n  ) external returns (SharedStructs.Deal memory);\n\n  function getDealsForParty(\n    address party\n  ) external returns (uint256[] memory);\n\n  function ensureDeal(\n    string memory dealId,\n    SharedStructs.DealMembers memory members,\n    SharedStructs.DealTimeouts memory timeouts,\n    SharedStructs.DealPricing memory pricing\n  ) external returns (SharedStructs.Deal memory);\n\n  /**\n   * Agreements\n   */\n\n  function getAgreement(\n    string memory dealId\n  ) external returns (SharedStructs.Agreement memory);\n  \n  function agreeResourceProvider(\n    string memory dealId\n  ) external returns (SharedStructs.Agreement memory);\n\n  function agreeJobCreator(\n    string memory dealId\n  ) external returns (SharedStructs.Agreement memory);\n  \n  /**\n   * Post Results\n   */\n\n  function getResult(\n    string memory dealId\n  ) external returns (SharedStructs.Result memory);\n\n  function addResult(\n    string memory dealId,\n    string memory resultsId,\n    string memory dataId,\n    uint256 instructionCount\n  ) external returns (SharedStructs.Result memory);\n\n  /**\n   * Judge Results\n   */\n\n  function acceptResult(\n    string memory dealId\n  ) external;\n\n  function checkResult(\n    string memory dealId\n  ) external;\n\n  /**\n   * Mediation\n   */\n  \n  function mediationAcceptResult(\n    string memory dealId\n  ) external;\n\n  function mediationRejectResult(\n    string memory dealId\n  ) external;\n\n  /**\n   * Timeouts\n   */\n  function timeoutAgree(\n    string memory dealId\n  ) external;\n\n  function timeoutSubmitResult(\n    string memory dealId\n  ) external;\n\n  function timeoutJudgeResult(\n    string memory dealId\n  ) external;\n\n  function timeoutMediateResult(\n    string memory dealId\n  ) external;\n\n  /**\n   * Costings\n   */\n\n  function getJobCost(\n    string memory dealId\n  ) external returns (uint256);\n\n  function getResultsCollateral(\n    string memory dealId\n  ) external returns (uint256);\n  \n  /**\n   * Checkers\n   */\n\n  function hasDeal(\n    string memory dealId\n  ) external returns (bool);\n\n  function isState(\n    string memory dealId,\n    SharedStructs.AgreementState state\n  ) external returns (bool);\n  \n}\n"
    },
    "contracts/LilypadController.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./SharedStructs.sol\";\nimport \"./ILilypadController.sol\";\nimport \"./ILilypadStorage.sol\";\nimport \"./ILilypadPayments.sol\";\nimport \"./ILilypadMediation.sol\";\n\ncontract LilypadController is ILilypadController, Ownable, Initializable {\n\n  /**\n   * Types\n   */\n  \n  address private storageAddress;\n  address private userAddress;\n  address private paymentsAddress;\n  address private mediationAddress;\n  address private jobCreatorAddress;\n  address private powAddress;\n\n  ILilypadStorage private storageContract;\n  ILilypadPayments private paymentsContract;\n  ILilypadMediationHandler private mediationContract;\n\n  /**\n   * Init\n   */\n\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\n  function initialize(\n    address _storageAddress,\n    address _usersAddress,\n    address _paymentsAddress,\n    address _mediationAddress,\n    address _jobCreatorAddress,\n    address _powAddress\n  ) public initializer {\n    setStorageAddress(_storageAddress);\n    setUsersAddress(_usersAddress);\n    setPaymentsAddress(_paymentsAddress);\n    setMediationAddress(_mediationAddress);\n    setJobCreatorAddress(_jobCreatorAddress);\n    setPowAddress(_powAddress);\n  }\n\n  function setStorageAddress(address _storageAddress) public onlyOwner {\n    require(_storageAddress != address(0), \"Storage address\");\n    storageAddress = _storageAddress;\n    storageContract = ILilypadStorage(storageAddress);\n  }\n\n  function getStorageAddress() public view returns(address) {\n    return storageAddress;\n  }\n\n  function setUsersAddress(address _usersAddress) public onlyOwner {\n    require(_usersAddress != address(0), \"Users address\");\n    userAddress = _usersAddress;\n  }\n\n  function getUsersAddress() public view returns(address) {\n    return userAddress;\n  }\n\n  function setPaymentsAddress(address _paymentsAddress) public onlyOwner {\n    require(_paymentsAddress != address(0), \"Payments address\");\n    paymentsAddress = _paymentsAddress;\n    paymentsContract = ILilypadPayments(_paymentsAddress);\n  }\n\n  function getPaymentsAddress() public view returns(address) {\n    return paymentsAddress;\n  }\n\n  function setMediationAddress(address _mediationAddress) public onlyOwner {\n    require(_mediationAddress != address(0), \"Mediation address\");\n    mediationAddress = _mediationAddress;\n    mediationContract = ILilypadMediationHandler(_mediationAddress);\n  }\n\n  function getMediationAddress() public view returns(address) {\n    return mediationAddress;\n  }\n\n  function setJobCreatorAddress(address _jobCreatorAddress) public onlyOwner {\n    require(_jobCreatorAddress != address(0), \"JobCreator address\");\n    jobCreatorAddress = _jobCreatorAddress;\n  }\n\n  function getJobCreatorAddress() public view returns(address) {\n    return jobCreatorAddress;\n  }\n\n  function setPowAddress(address _powAddress) public onlyOwner {\n    require(_powAddress != address(0), \"Users address\");\n    powAddress = _powAddress;\n  }\n\n  function getPowAddress() public view returns(address) {\n    return powAddress;\n  }\n\n\n  /**\n   * Agreements\n   */\n\n  // * create the deal if not exists\n  // * otherwise compare the values to ensure 2 sided agreement\n  // * check the RP or JC is calling this\n  // * if RP:\n  //    * mark the deal as RP agreed\n  //    * pay in the timeout collateral\n  // * if JC:\n  //    * mark the deal as JC agreed\n  //    * pay in the payment collateral and timeout collateral\n  // * if both sides have agreed then mark the deal as agreed\n  // * emit the event\n  function agree(\n    string memory dealId,\n    SharedStructs.DealMembers memory members,\n    SharedStructs.DealTimeouts memory timeouts,\n    SharedStructs.DealPricing memory pricing\n  ) public override returns (SharedStructs.Agreement memory) {\n    SharedStructs.Deal memory deal = storageContract.ensureDeal(\n      dealId,\n      members,\n      timeouts,\n      pricing\n    );\n    bool isResourceProvider = tx.origin == deal.members.resourceProvider;\n    bool isJobCreator = tx.origin == deal.members.jobCreator;\n    require(isResourceProvider || isJobCreator, \"Only RP / JC\");\n\n    if(isResourceProvider) {\n      storageContract.agreeResourceProvider(dealId);\n      paymentsContract.agreeResourceProvider(\n        dealId,\n        deal.members.resourceProvider,\n        deal.timeouts.submitResults.collateral\n      );\n    }\n    else if(isJobCreator) {\n      storageContract.agreeJobCreator(dealId);\n      paymentsContract.agreeJobCreator(\n        dealId,\n        deal.members.jobCreator,\n        deal.pricing.paymentCollateral,\n        // the JC paus the judge results collateral\n        deal.timeouts.judgeResults.collateral\n      );\n    }\n    return storageContract.getAgreement(dealId);\n  }\n\n  /**\n   * Results\n   */\n\n  // * check the RP is calling this\n  // * mark the deal as results submitted\n  // * calculate the cost of the job\n  // * calculate the job collateral based on the multiple\n  // * work out the difference between the timeout and results collateral\n  // * pay the difference into / out of the contract to the RP\n  // * emit the event\n  function addResult(\n    string memory dealId,\n    string memory resultsId,\n    // this is the CID of the actual data\n    // otherwise onchain clients cannot know the actual data they want to fetch\n    string memory dataId,\n    uint256 instructionCount\n  ) public override {\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.DealAgreed), \"DealAgreed\");\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    require(deal.members.resourceProvider == tx.origin, \"Only RP\");\n\n    storageContract.addResult(\n      dealId,\n      resultsId,\n      dataId,\n      instructionCount\n    );\n\n    // how many multiple of the job cost must the RP put up as collateral\n    // we need to do this after having added the result otherwise\n    // we don't know the instruction count\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\n\n    paymentsContract.addResult(\n      dealId,\n      deal.members.resourceProvider,\n      resultsCollateral,\n      // this is the RP adding a results so they get their submit results timeout collateral back\n      deal.timeouts.submitResults.collateral\n    );\n  }\n\n  // * check the JC is calling this\n  // * check we are in Submitted state\n  // * mark the deal as results accepted\n  // * calculate the cost of the job\n  // * deduct the cost of the job from the JC payment collateral\n  // * pay the RP the cost of the job\n  // * refund the RP the results collateral\n  // * refund the JC the job collateral minus the cost\n  // * refund the JC the timeout collateral\n  function acceptResult(\n    string memory dealId\n  ) public override {\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    require(deal.members.jobCreator == tx.origin, \"Only JC\");\n    \n    uint256 jobCost = storageContract.getJobCost(dealId);\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\n\n    storageContract.acceptResult(dealId);\n    paymentsContract.acceptResult(\n      dealId,\n      deal.members.resourceProvider,\n      deal.members.jobCreator,\n      jobCost,\n      deal.pricing.paymentCollateral,\n      resultsCollateral,\n      // this is the JC judging their result so they get their timeout collateral back\n      deal.timeouts.judgeResults.collateral\n    );\n  }\n\n  // * check the JC is calling this\n  // * check we are in Submitted state\n  // * check the mediator is in the list of RP trusted mediators\n  // * mark the deal as results checked\n  // * charge the JC the mediation fee\n  // * refund the JC the timeout collateral\n  // * emit the Mediation event so the mediator kicks in\n  function checkResult(\n    string memory dealId\n  ) public override {\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    require(deal.members.jobCreator == tx.origin, \"Only JC\");\n\n    // this function will require that the mediator is in the RP's list of trusted mediators\n    storageContract.checkResult(dealId);\n    paymentsContract.checkResult(\n      dealId,\n      deal.members.jobCreator,\n      // this is the JC judging their result so they get their timeout collateral back\n      deal.timeouts.judgeResults.collateral,\n      deal.pricing.mediationFee\n    );\n\n    // trigger the mediation process by calling the contract\n    mediationContract.mediationRequest(deal);\n  }\n\n  /**\n   * Mediation\n   */\n\n  // the mediator calls this to say that the resource provider did the correct job\n  // * check the state is ResultsChecked\n  // * check the mediator is calling this\n  // * mark the deal as mediation accepted\n  // * refund the JC what is left from the payment collateral (if any)\n  // * pay the RP the cost of the job\n  // * refund the RP the results collateral\n  // * pay the mediator for mediating\n  function mediationAcceptResult(\n    string memory dealId\n  ) public override {\n    require(mediationAddress == _msgSender(), \"Only mediation\");\n    require(_canMediateResult(dealId), \"Cannot mediate\");\n    \n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    uint256 jobCost = storageContract.getJobCost(dealId);\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\n\n    storageContract.mediationAcceptResult(dealId);\n    paymentsContract.mediationAcceptResult(\n      dealId,\n      deal.members.resourceProvider,\n      deal.members.jobCreator,\n      jobCost,\n      deal.pricing.paymentCollateral,\n      resultsCollateral,\n      deal.pricing.mediationFee\n    );\n  }\n\n  // the mediator calls this to say that the resource provider did the bad job\n  // * check the state is ResultsChecked\n  // * check the mediator is calling this\n  // * mark the deal as mediation rejected\n  // * refund the JC their payment collateral\n  // * slash the RP's results collateral\n  // * pay the mediator for mediating\n  function mediationRejectResult(\n    string memory dealId\n  ) public override {\n    // only the current mediation contract can call this\n    require(mediationAddress == _msgSender(), \"Only mediation\");\n    require(_canMediateResult(dealId), \"Cannot mediate\");\n\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\n\n    storageContract.mediationRejectResult(dealId);\n    paymentsContract.mediationRejectResult(\n      dealId,\n      deal.members.resourceProvider,\n      deal.members.jobCreator,\n      deal.pricing.paymentCollateral,\n      resultsCollateral,\n      deal.pricing.mediationFee\n    );\n  }\n\n  function _canMediateResult(\n    string memory dealId \n  ) private returns (bool) {\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\n    return true;\n  }\n\n  /**\n   * Timeouts\n   */\n\n  function timeoutAgree(\n    string memory dealId\n  ) public override {\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\n    require(deal.members.jobCreator == tx.origin || deal.members.resourceProvider == tx.origin, \"Only JC or RP\");\n    require(agreement.state == SharedStructs.AgreementState.DealNegotiating, \"Not correct state\");\n    require(block.timestamp > agreement.dealCreatedAt + deal.timeouts.agree.timeout, \"Not timed out\");\n    storageContract.timeoutAgree(dealId);\n    if (agreement.resourceProviderAgreedAt > 0) {\n      // this is an RP refund\n      paymentsContract.timeoutAgreeRefundResourceProvider(\n        dealId,\n        deal.members.resourceProvider,\n        deal.timeouts.submitResults.collateral\n      );\n    } else if (agreement.jobCreatorAgreedAt > 0) {\n      // this is an JC refund\n      paymentsContract.timeoutAgreeRefundJobCreator(\n        dealId,\n        deal.members.jobCreator,\n        deal.pricing.paymentCollateral,\n        deal.timeouts.submitResults.collateral\n      );\n    }\n  }\n\n  // the job creator calls this after the timeout has passed and there are no results submitted\n  // * check the JC is calling this\n  // * mark the deal as timedout\n  // * pay back the JC's job collateral\n  // * slash the RP's results collateral\n  // * emit the event\n  function timeoutSubmitResult(\n    string memory dealId\n  ) public override {\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\n    require(deal.members.jobCreator == tx.origin, \"Only JC\");\n    require(agreement.state == SharedStructs.AgreementState.DealAgreed, \"Not correct state\");\n    require(block.timestamp > agreement.dealAgreedAt + deal.timeouts.submitResults.timeout, \"Not timed out\");\n    storageContract.timeoutSubmitResult(dealId);\n    paymentsContract.timeoutSubmitResult(\n      dealId,\n      deal.members.resourceProvider,\n      deal.members.jobCreator,\n      deal.pricing.paymentCollateral,\n      deal.timeouts.submitResults.collateral\n    );\n  }\n\n  // the resource provider calls this after the timeout has passed after submitting results\n  // and the job creator has not yet submitted their judgement on those results\n  // * check the RP is calling this\n  // * mark the deal as timedout\n  // * pay back the RP's results collateral\n  // * pay the RP the cost of the job\n  // * slash the JC's timeout collateral\n  // * slash the JC's job collateral\n  // * emit the event\n  function timeoutJudgeResult(\n    string memory dealId\n  ) public override {\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\n    require(deal.members.resourceProvider == tx.origin, \"Only RP\");\n    require(agreement.state == SharedStructs.AgreementState.ResultsSubmitted, \"Not correct state\");\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \"Not timed out\");\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\n    storageContract.timeoutJudgeResult(dealId);    \n    paymentsContract.timeoutJudgeResult(\n      dealId,\n      deal.members.resourceProvider,\n      deal.members.jobCreator,\n      resultsCollateral,\n      deal.timeouts.judgeResults.collateral\n    );\n  }\n\n  // either the JC or RP call this after the timeout has passed after results being checked\n  // this refunds both the payment and results collateral to both the JC and RP\n  // * check the RP or JC is calling this\n  // * mark the deal as timedout\n  // * pay back the RP's results collateral\n  // * pay back the JC's paymnet collateral\n  // * emit the event\n  function timeoutMediateResult(\n    string memory dealId\n  ) public override {\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\n    require(deal.members.resourceProvider == tx.origin || deal.members.jobCreator == tx.origin, \"Only RP or JC\");\n    require(agreement.state == SharedStructs.AgreementState.ResultsChecked, \"Not correct state\");\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \"Not timed out\");\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\n    storageContract.timeoutMediateResult(dealId);\n    paymentsContract.timeoutMediateResult(\n      dealId,\n      deal.members.resourceProvider,\n      deal.members.jobCreator,\n      deal.pricing.paymentCollateral,\n      resultsCollateral,\n      deal.pricing.mediationFee\n    );\n  }\n}\n"
    },
    "contracts/LilypadPow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract LilypadPow is Ownable, Initializable {\n    struct POWSubmission {\n        address walletAddress;\n        string nodeId;\n        uint256 nonce;\n        uint256 start_timestap;\n        uint256 complete_timestap; //used to estimate hashrate of this submission\n        bytes32 challenge; //record this to provent user never change challenge\n        uint256 difficulty;\n    }\n\n    struct Challenge {\n        bytes32 challenge;\n        uint256 difficulty;\n        string nodeId;\n        uint256 timestamp;\n    }\n\n    // todo  difficulty may need to adjust in test\n    // this difficulty was calculate with this tool https://github.com/hunjixin/pow-tool/tree/main/difficulty\n    // Theoretically  A machine with a hash rate of 2M has a probability of no more than 0.01% of not finding a nonce that meets the difficulty within 20 blocks.\n    // However, this issue has not been well validated in practice. it can solve nonce within one minute most of the time.\n    uint256 public immutable TARGET_DIFFICULTY =\n        2221842798488549893930113429797694032668256326301844165995655665287168;\n    mapping(address => POWSubmission[]) public powSubmissions;\n    mapping(address => uint256) public minerSubmissionCount; //used for loop powsubmission\n    address[] public miners;\n\n    mapping(address => Challenge) public lastChallenges;\n    uint256 public validProofs;\n    uint256 public startTime;\n\n    uint256 public window_start;\n    uint256 public window_end;\n    /**\n     * Init\n     */\n\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\n    function initialize() public initializer {}\n\n    function getMiners() external view returns (address[] memory) {\n        return miners;\n    }\n\n    // generateChallenge gen a byte32 value as challenge value, Sc store this one for verify\n    function generateChallenge(string calldata nodeId) external {\n        checkTimeWindow();\n\n        bytes32 challenge = keccak256(\n            abi.encodePacked(block.timestamp, window_start, msg.sender, nodeId)\n        );\n\n        uint256 difficulty = calculate_difficulty();\n        lastChallenges[msg.sender] = Challenge(\n            challenge,\n            difficulty,\n            nodeId,\n            block.timestamp\n        );\n        emit GenerateChallenge(challenge, difficulty);\n    }\n\n    function calculate_difficulty() public view returns (uint256) {\n        uint256 percentChange = 90 + (block.prevrandao % 21);\n        return (TARGET_DIFFICULTY * percentChange) / 100;\n    }\n\n    // submitWork miner submint a nonce value, sc check the difficulty and emit a valid pow event when success\n    function submitWork(uint256 nonce, string calldata nodeId) external {\n        checkTimeWindow();\n\n        Challenge memory lastChallenge = lastChallenges[msg.sender];\n        bytes32 challenge = keccak256(\n            abi.encodePacked(\n                lastChallenge.timestamp,\n                window_start,\n                msg.sender,\n                nodeId\n            )\n        );\n\n        require(\n            lastChallenge.challenge == challenge,\n            \"Work submit not compatable with challenge\"\n        );\n\n        bytes32 hash = keccak256(abi.encodePacked(challenge, nonce));\n        require(\n            uint256(hash) < lastChallenge.difficulty,\n            \"Work does not meet difficulty target\"\n        );\n\n        validProofs++;\n\n        if (minerSubmissionCount[msg.sender] == 0) {\n            //first submit, append to miners\n            miners.push(msg.sender);\n        }\n\n        minerSubmissionCount[msg.sender]++; //increase miner's valid proofs\n        POWSubmission[] storage posSubmissions = powSubmissions[msg.sender];\n        posSubmissions.push(\n            POWSubmission(\n                msg.sender,\n                nodeId,\n                nonce,\n                lastChallenge.timestamp,\n                block.timestamp,\n                lastChallenge.challenge,\n                lastChallenge.difficulty\n            )\n        );\n\n        //clean last challenge to submit the same proof\n        lastChallenges[msg.sender] = Challenge(0, 0, \"\", 0);\n        emit ValidPOWSubmitted(\n            msg.sender,\n            nodeId,\n            nonce,\n            block.timestamp,\n            lastChallenge.challenge,\n            lastChallenge.difficulty\n        );\n    }\n\n    function triggerNewPowRound() external onlyOwner {\n        window_start = block.number;\n        window_end = block.number + 30; //todo arbitary value , need to discuss\n        emit NewPowRound();\n    }\n\n    function checkTimeWindow() public view {\n        require(block.number < window_end, \"proof windows has closed\");\n    }\n\n    event ValidPOWSubmitted(\n        address indexed walletAddress,\n        string nodeId,\n        uint256 nonce,\n        uint256 timestamp,\n        bytes32 challenge,\n        uint256 difficulty\n    );\n    event GenerateChallenge(bytes32 challenge, uint256 difficulty);\n    event NewPowRound();\n}\n"
    },
    "contracts/SharedStructs.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nlibrary SharedStructs {\n\n  enum ServiceType {\n    Solver,\n    Mediator,\n    ResourceProvider,\n    JobCreator\n  }\n\n  enum AgreementState {\n\n    // the two parties have not yet both agreed to the deal\n    DealNegotiating,\n\n    // both parties have agreed\n    DealAgreed,\n\n    // results have been submitted by the RP\n    ResultsSubmitted,\n\n    // the JC has accepted the results\n    ResultsAccepted,\n\n    // the JC has checked the results\n    ResultsChecked,\n\n    // a mediator has accepted the results\n    MediationAccepted,\n\n    // a mediator has rejected the results\n    MediationRejected,\n\n    // this means the counter-party did not agree to the deal in time\n    TimeoutAgree,\n\n    // this means the RP did not submit results in time\n    TimeoutSubmitResults,\n\n    // this means the JC did not accept or reject results in time\n    TimeoutJudgeResults,\n\n    // this means the mediator did not accept or submit judgement in time\n    TimeoutMediateResults\n\n  }\n\n  // we map addresses onto infomation about the user\n  struct User {\n    address userAddress;\n    // the CID of information for this user\n    string metadataCID;\n    string url;\n    ServiceType[] roles;\n  }\n\n  // the various addresses involved in runnig a deal\n  struct DealMembers {\n    // the address of the solver service that the RP and JC have agreed to use\n    address solver;\n    // the addresses of the RP and JC that have agreed to this deal\n    address jobCreator;\n    address resourceProvider;\n    // the list of mediators that the RP and JC have agreed to use\n    address[] mediators;\n  }\n\n  // a timeout represents the agreed amount of time and the penalty\n  // that is applied if the timeout is exceeded  \n  struct DealTimeout {\n    uint256 timeout;\n    uint256 collateral;\n  }\n  \n  // the various forms of timeout a deal can have\n  struct DealTimeouts { \n    DealTimeout agree;\n    DealTimeout submitResults;\n    DealTimeout judgeResults;\n    DealTimeout mediateResults;\n  }\n\n  // configure the cost of a deal\n  struct DealPricing {\n  // agreed price per instruction\n    uint256 instructionPrice;\n\n    // the collateral that the JC has put up to pay for the job\n    // the final cost of the job will be deducted from this\n    uint256 paymentCollateral;\n\n    // how much collateral the RP will post to attest it's results are correct\n    // this is a multiple of the cost of the job which is known at results\n    // submission time\n    uint256 resultsCollateralMultiple;\n\n    // how much is the JC willing to pay the mediator to resolve disputes\n    uint256 mediationFee;\n  }\n\n  // a Deal forms the information that is agreed between both parties\n  // both parties must have called \"agree_deal\" with the exact\n  // same parameters before the deal is considered valid\n  // a Deal is immutable - nothing about it can be updated\n  struct Deal {\n    // the CID of the Deal document on IPFS (and directory service)\n    // this contains the job spec, the job offer and the resource offer\n    string dealId;\n\n    // who is participating in this deal\n    DealMembers members;\n    \n    // the timeout settings for a deal\n    DealTimeouts timeouts;\n\n    // the pricing settings for a deal\n    DealPricing pricing;    \n  }\n\n  // what the RP submits back once having run the job\n  // this is also immutable\n  struct Result {\n    // the id of the deal that this result is for\n    string dealId;\n\n    // the CID of the results on IPFS (and directory service)\n    // NOTE - this is not the CID of actual results data rather\n    // of the JSON object reporting that data\n    string resultsId;\n\n    // this is the actual lower level data CID\n    string dataId;\n\n    // how many instructions were executed by the RP\n    uint256 instructionCount;\n  }\n\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\n  struct Agreement {\n    // the current state of the agreement\n    AgreementState state;\n\n    uint256 resourceProviderAgreedAt;\n    uint256 jobCreatorAgreedAt;\n    uint256 dealCreatedAt;\n    uint256 dealAgreedAt;\n\n    uint256 resultsSubmittedAt;\n    uint256 resultsAcceptedAt;\n    uint256 resultsCheckedAt;\n\n    uint256 mediationAcceptedAt;\n    uint256 mediationRejectedAt;\n\n    uint256 timeoutAgreeAt;\n    uint256 timeoutSubmitResultsAt;\n    uint256 timeoutJudgeResultsAt;\n    uint256 timeoutMediateResultsAt;\n  }\n\n  struct JobOffer {\n    uint256 id;\n    \n    // this is the contract that will be triggered\n    // once there are some results\n    address calling_contract;\n\n    // this is the address that is paying for the job\n    // they must have called approve on the token contract\n    // and granted the solver address the number of tokens\n    // required\n    address payee;\n\n    // the job spec\n    string module;\n    string[] inputs;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}