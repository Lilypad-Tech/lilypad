{
  "address": "0xacDf1005fAb67C13603C19aC5471F0c7dDBc90b2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "GenerateChallenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NewPowRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "ValidPOWSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TARGET_DIFFICULTY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculate_difficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkTimeWindow",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        }
      ],
      "name": "generateChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMiners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastChallenges",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minerSubmissionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "powSubmissions",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start_timestap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "complete_timestap",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        }
      ],
      "name": "submitWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerNewPowRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "window_end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "window_start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xddf8ea9ac73581bd520fa4cde42cf13c8c05969c15dfd259d28f49ec03049978",
  "receipt": {
    "to": null,
    "from": "0xd10D15cc705f7D2558352B1212A9b3685155d93D",
    "contractAddress": "0xacDf1005fAb67C13603C19aC5471F0c7dDBc90b2",
    "transactionIndex": 1,
    "gasUsed": "1847202",
    "logsBloom": "0x
    "blockHash": "0x26e799c233c4a03e10a9b8789a519ea67a9222e092c5cf55124ac8811648b123",
    "transactionHash": "0xddf8ea9ac73581bd520fa4cde42cf13c8c05969c15dfd259d28f49ec03049978",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 54704001,
        "transactionHash": "0xddf8ea9ac73581bd520fa4cde42cf13c8c05969c15dfd259d28f49ec03049978",
        "address": "0xacDf1005fAb67C13603C19aC5471F0c7dDBc90b2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d10d15cc705f7d2558352b1212a9b3685155d93d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x26e799c233c4a03e10a9b8789a519ea67a9222e092c5cf55124ac8811648b123"
      }
    ],
    "blockNumber": 54704001,
    "cumulativeGasUsed": "1847202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4da1c3755a4d6211296e1fdf692059eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"GenerateChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewPowRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"ValidPOWSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TARGET_DIFFICULTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculate_difficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTimeWindow\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"}],\"name\":\"generateChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastChallenges\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minerSubmissionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powSubmissions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_timestap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complete_timestap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"}],\"name\":\"submitWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerNewPowRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize()\":{\"notice\":\"Init\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LilypadPow.sol\":\"LilypadPow\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LilypadPow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract LilypadPow is Ownable, Initializable {\\n    struct POWSubmission {\\n        address walletAddress;\\n        string nodeId;\\n        uint256 nonce;\\n        uint256 start_timestap;\\n        uint256 complete_timestap; //used to estimate hashrate of this submission\\n        bytes32 challenge; //record this to provent user never change challenge\\n        uint256 difficulty;\\n    }\\n\\n    struct Challenge {\\n        bytes32 challenge;\\n        uint256 difficulty;\\n        string nodeId;\\n        uint256 timestamp;\\n    }\\n\\n    // todo  difficulty may need to adjust in test\\n    // this difficulty was calculate with this tool https://github.com/hunjixin/pow-tool/tree/main/difficulty\\n    // Theoretically  A machine with a hash rate of 2M has a probability of no more than 0.01% of not finding a nonce that meets the difficulty within 20 blocks.\\n    // However, this issue has not been well validated in practice. it can solve nonce within one minute most of the time.\\n    uint256 public immutable TARGET_DIFFICULTY =\\n        2221842798488549893930113429797694032668256326301844165995655665287168;\\n    mapping(address => POWSubmission[]) public powSubmissions;\\n    mapping(address => uint256) public minerSubmissionCount; //used for loop powsubmission\\n    address[] public miners;\\n\\n    mapping(address => Challenge) public lastChallenges;\\n    uint256 public validProofs;\\n    uint256 public startTime;\\n\\n    uint256 public window_start;\\n    uint256 public window_end;\\n    /**\\n     * Init\\n     */\\n\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n    function initialize() public initializer {}\\n\\n    function getMiners() external view returns (address[] memory) {\\n        return miners;\\n    }\\n\\n    // generateChallenge gen a byte32 value as challenge value, Sc store this one for verify\\n    function generateChallenge(string calldata nodeId) external {\\n        checkTimeWindow();\\n\\n        bytes32 challenge = keccak256(\\n            abi.encodePacked(block.timestamp, window_start, msg.sender, nodeId)\\n        );\\n\\n        uint256 difficulty = calculate_difficulty();\\n        lastChallenges[msg.sender] = Challenge(\\n            challenge,\\n            difficulty,\\n            nodeId,\\n            block.timestamp\\n        );\\n        emit GenerateChallenge(challenge, difficulty);\\n    }\\n\\n    function calculate_difficulty() public view returns (uint256) {\\n        uint256 percentChange = 90 + (block.prevrandao % 21);\\n        return (TARGET_DIFFICULTY * percentChange) / 100;\\n    }\\n\\n    // submitWork miner submint a nonce value, sc check the difficulty and emit a valid pow event when success\\n    function submitWork(uint256 nonce, string calldata nodeId) external {\\n        checkTimeWindow();\\n\\n        Challenge memory lastChallenge = lastChallenges[msg.sender];\\n        bytes32 challenge = keccak256(\\n            abi.encodePacked(\\n                lastChallenge.timestamp,\\n                window_start,\\n                msg.sender,\\n                nodeId\\n            )\\n        );\\n\\n        require(\\n            lastChallenge.challenge == challenge,\\n            \\\"Work submit not compatable with challenge\\\"\\n        );\\n\\n        bytes32 hash = keccak256(abi.encodePacked(challenge, nonce));\\n        require(\\n            uint256(hash) < lastChallenge.difficulty,\\n            \\\"Work does not meet difficulty target\\\"\\n        );\\n\\n        validProofs++;\\n\\n        if (minerSubmissionCount[msg.sender] == 0) {\\n            //first submit, append to miners\\n            miners.push(msg.sender);\\n        }\\n\\n        minerSubmissionCount[msg.sender]++; //increase miner's valid proofs\\n        POWSubmission[] storage posSubmissions = powSubmissions[msg.sender];\\n        posSubmissions.push(\\n            POWSubmission(\\n                msg.sender,\\n                nodeId,\\n                nonce,\\n                lastChallenge.timestamp,\\n                block.timestamp,\\n                lastChallenge.challenge,\\n                lastChallenge.difficulty\\n            )\\n        );\\n\\n        //clean last challenge to submit the same proof\\n        lastChallenges[msg.sender] = Challenge(0, 0, \\\"\\\", 0);\\n        emit ValidPOWSubmitted(\\n            msg.sender,\\n            nodeId,\\n            nonce,\\n            block.timestamp,\\n            lastChallenge.challenge,\\n            lastChallenge.difficulty\\n        );\\n    }\\n\\n    function triggerNewPowRound() external onlyOwner {\\n        window_start = block.number;\\n        window_end = block.number + 30; //todo arbitary value , need to discuss\\n        emit NewPowRound();\\n    }\\n\\n    function checkTimeWindow() public view {\\n        require(block.number < window_end, \\\"proof windows has closed\\\");\\n    }\\n\\n    event ValidPOWSubmitted(\\n        address indexed walletAddress,\\n        string nodeId,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes32 challenge,\\n        uint256 difficulty\\n    );\\n    event GenerateChallenge(bytes32 challenge, uint256 difficulty);\\n    event NewPowRound();\\n}\\n\",\"keccak256\":\"0x470c2dd1ed3cfbb7efa0a4dee328e097190a76d70247b5674cf330d23f98fcd0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040527c5269a8a800000000000000000000000000000000000000000000000000608090815250348015610033575f80fd5b5061005061004561005560201b60201c565b61005c60201b60201c565b61011d565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b608051611ffe61013c5f395f818161041a0152610fd00152611ffe5ff3fe608060405234801561000f575f80fd5b506004361061011f575f3560e01c80638da5cb5b116100ab578063bfb660de1161006f578063bfb660de146102c8578063da8accf9146102d2578063e0d152af146102ee578063f2fde38b1461031e578063f6f851681461033a5761011f565b80638da5cb5b14610248578063a738bf8f14610266578063ab09894514610284578063b28d87ea146102a0578063b681f2fd146102be5761011f565b80634bbe05e4116100f25780634bbe05e4146101ad5780636189f3ac146101e3578063715018a61461021657806378e97925146102205780638129fc1c1461023e5761011f565b8063148c684a146101235780631633da6e146101535780632d68c39714610171578063331bade11461018f575b5f80fd5b61013d600480360381019061013891906111bc565b610358565b60405161014a91906111ff565b60405180910390f35b61015b61036d565b60405161016891906112cf565b60405180910390f35b6101796103f8565b60405161018691906111ff565b60405180910390f35b610197610453565b6040516101a491906111ff565b60405180910390f35b6101c760048036038101906101c29190611319565b610459565b6040516101da9796959493929190611408565b60405180910390f35b6101fd60048036038101906101f891906111bc565b610556565b60405161020d949392919061147c565b60405180910390f35b61021e610608565b005b61022861061b565b60405161023591906111ff565b60405180910390f35b610246610621565b005b610250610756565b60405161025d91906114c6565b60405180910390f35b61026e61077d565b60405161027b91906111ff565b60405180910390f35b61029e60048036038101906102999190611540565b610783565b005b6102a86108df565b6040516102b591906111ff565b60405180910390f35b6102c66108e5565b005b6102d0610935565b005b6102ec60048036038101906102e7919061158b565b61097b565b005b610308600480360381019061030391906115e8565b610f11565b60405161031591906114c6565b60405180910390f35b610338600480360381019061033391906111bc565b610f4c565b005b610342610fce565b60405161034f91906111ff565b60405180910390f35b6002602052805f5260405f205f915090505481565b606060038054806020026020016040519081016040528092919081815260200182805480156103ee57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103a5575b5050505050905090565b5f806015446104079190611640565b605a610413919061169d565b90506064817f000000000000000000000000000000000000000000000000000000000000000061044391906116d0565b61044d9190611711565b91505090565b60075481565b6001602052815f5260405f208181548110610472575f80fd5b905f5260205f2090600702015f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546104b79061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e39061176e565b801561052e5780601f106105055761010080835404028352916020019161052e565b820191905f5260205f20905b81548152906001019060200180831161051157829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154905087565b6004602052805f5260405f205f91509050805f0154908060010154908060020180546105819061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad9061176e565b80156105f85780601f106105cf576101008083540402835291602001916105f8565b820191905f5260205f20905b8154815290600101906020018083116105db57829003601f168201915b5050505050908060030154905084565b610610610ff2565b6106195f611070565b565b60065481565b5f8060159054906101000a900460ff16159050808015610652575060015f60149054906101000a900460ff1660ff16105b80610680575061066130611131565b15801561067f575060015f60149054906101000a900460ff1660ff16145b5b6106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b69061180e565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff16021790555080156106fb5760015f60156101000a81548160ff0219169083151502179055505b8015610753575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161074a919061187a565b60405180910390a15b50565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60085481565b61078b610935565b5f426007543385856040516020016107a7959493929190611934565b6040516020818303038152906040528051906020012090505f6107c86103f8565b9050604051806080016040528083815260200182815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020014281525060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015560408201518160020190816108929190611b40565b50606082015181600301559050507f496186a9d930bac0744acdcd1d0c054b18283eecbe99d30bda98102d3d06b8ef82826040516108d1929190611c0f565b60405180910390a150505050565b60055481565b6108ed610ff2565b43600781905550601e43610901919061169d565b6008819055507f10cc99616aca050d810fd487c95f968e516d0fa25318530ed50753153d060a1e60405160405180910390a1565b6008544310610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097090611c80565b60405180910390fd5b565b610983610935565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820180546109ef9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1b9061176e565b8015610a665780601f10610a3d57610100808354040283529160200191610a66565b820191905f5260205f20905b815481529060010190602001808311610a4957829003601f168201915b5050505050815260200160038201548152505090505f8160600151600754338686604051602001610a9b959493929190611934565b60405160208183030381529060405280519060200120905080825f015114610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90611d0e565b60405180910390fd5b5f8186604051602001610b0c929190611d4c565b6040516020818303038152906040528051906020012090508260200151815f1c10610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390611de7565b60405180910390fd5b60055f815480929190610b7e90611e05565b91905055505f60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205403610c2857600333908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190610c7590611e05565b91905055505f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050806040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200189815260200186606001518152602001428152602001865f015181526020018660200151815250908060018154018082558091505060019003905f5260205f2090600702015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610dd19190611b40565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505060405180608001604052805f801b81526020015f815260200160405180602001604052805f81525081526020015f81525060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0155602082015181600101556040820151816002019081610e9b9190611b40565b50606082015181600301559050503373ffffffffffffffffffffffffffffffffffffffff167f5ea61d67e3236a79ab8c3c29f810e2c408b0a6b1e19f4e0da2fcd6362129c86087878a42895f01518a60200151604051610f0096959493929190611e78565b60405180910390a250505050505050565b60038181548110610f20575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f54610ff2565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb990611f42565b60405180910390fd5b610fcb81611070565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ffa611153565b73ffffffffffffffffffffffffffffffffffffffff16611018610756565b73ffffffffffffffffffffffffffffffffffffffff161461106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590611faa565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f33905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61118b82611162565b9050919050565b61119b81611181565b81146111a5575f80fd5b50565b5f813590506111b681611192565b92915050565b5f602082840312156111d1576111d061115a565b5b5f6111de848285016111a8565b91505092915050565b5f819050919050565b6111f9816111e7565b82525050565b5f6020820190506112125f8301846111f0565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61124a81611181565b82525050565b5f61125b8383611241565b60208301905092915050565b5f602082019050919050565b5f61127d82611218565b6112878185611222565b935061129283611232565b805f5b838110156112c25781516112a98882611250565b97506112b483611267565b925050600181019050611295565b5085935050505092915050565b5f6020820190508181035f8301526112e78184611273565b905092915050565b6112f8816111e7565b8114611302575f80fd5b50565b5f81359050611313816112ef565b92915050565b5f806040838503121561132f5761132e61115a565b5b5f61133c858286016111a8565b925050602061134d85828601611305565b9150509250929050565b61136081611181565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561139d578082015181840152602081019050611382565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6113c282611366565b6113cc8185611370565b93506113dc818560208601611380565b6113e5816113a8565b840191505092915050565b5f819050919050565b611402816113f0565b82525050565b5f60e08201905061141b5f83018a611357565b818103602083015261142d81896113b8565b905061143c60408301886111f0565b61144960608301876111f0565b61145660808301866111f0565b61146360a08301856113f9565b61147060c08301846111f0565b98975050505050505050565b5f60808201905061148f5f8301876113f9565b61149c60208301866111f0565b81810360408301526114ae81856113b8565b90506114bd60608301846111f0565b95945050505050565b5f6020820190506114d95f830184611357565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112611500576114ff6114df565b5b8235905067ffffffffffffffff81111561151d5761151c6114e3565b5b602083019150836001820283011115611539576115386114e7565b5b9250929050565b5f80602083850312156115565761155561115a565b5b5f83013567ffffffffffffffff8111156115735761157261115e565b5b61157f858286016114eb565b92509250509250929050565b5f805f604084860312156115a2576115a161115a565b5b5f6115af86828701611305565b935050602084013567ffffffffffffffff8111156115d0576115cf61115e565b5b6115dc868287016114eb565b92509250509250925092565b5f602082840312156115fd576115fc61115a565b5b5f61160a84828501611305565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61164a826111e7565b9150611655836111e7565b92508261166557611664611613565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6116a7826111e7565b91506116b2836111e7565b92508282019050808211156116ca576116c9611670565b5b92915050565b5f6116da826111e7565b91506116e5836111e7565b92508282026116f3816111e7565b9150828204841483151761170a57611709611670565b5b5092915050565b5f61171b826111e7565b9150611726836111e7565b92508261173657611735611613565b5b828204905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061178557607f821691505b60208210810361179857611797611741565b5b50919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f6117f8602e83611370565b91506118038261179e565b604082019050919050565b5f6020820190508181035f830152611825816117ec565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61186461185f61185a8461182c565b611841565b611835565b9050919050565b6118748161184a565b82525050565b5f60208201905061188d5f83018461186b565b92915050565b5f819050919050565b6118ad6118a8826111e7565b611893565b82525050565b5f8160601b9050919050565b5f6118c9826118b3565b9050919050565b5f6118da826118bf565b9050919050565b6118f26118ed82611181565b6118d0565b82525050565b5f81905092915050565b828183375f83830152505050565b5f61191b83856118f8565b9350611928838584611902565b82840190509392505050565b5f61193f828861189c565b60208201915061194f828761189c565b60208201915061195f82866118e1565b601482019150611970828486611910565b91508190509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611a087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826119cd565b611a1286836119cd565b95508019841693508086168417925050509392505050565b5f611a44611a3f611a3a846111e7565b611841565b6111e7565b9050919050565b5f819050919050565b611a5d83611a2a565b611a71611a6982611a4b565b8484546119d9565b825550505050565b5f90565b611a85611a79565b611a90818484611a54565b505050565b5b81811015611ab357611aa85f82611a7d565b600181019050611a96565b5050565b601f821115611af857611ac9816119ac565b611ad2846119be565b81016020851015611ae1578190505b611af5611aed856119be565b830182611a95565b50505b505050565b5f82821c905092915050565b5f611b185f1984600802611afd565b1980831691505092915050565b5f611b308383611b09565b9150826002028217905092915050565b611b4982611366565b67ffffffffffffffff811115611b6257611b6161197f565b5b611b6c825461176e565b611b77828285611ab7565b5f60209050601f831160018114611ba8575f8415611b96578287015190505b611ba08582611b25565b865550611c07565b601f198416611bb6866119ac565b5f5b82811015611bdd57848901518255600182019150602085019450602081019050611bb8565b86831015611bfa5784890151611bf6601f891682611b09565b8355505b6001600288020188555050505b505050505050565b5f604082019050611c225f8301856113f9565b611c2f60208301846111f0565b9392505050565b7f70726f6f662077696e646f77732068617320636c6f73656400000000000000005f82015250565b5f611c6a601883611370565b9150611c7582611c36565b602082019050919050565b5f6020820190508181035f830152611c9781611c5e565b9050919050565b7f576f726b207375626d6974206e6f7420636f6d70617461626c652077697468205f8201527f6368616c6c656e67650000000000000000000000000000000000000000000000602082015250565b5f611cf8602983611370565b9150611d0382611c9e565b604082019050919050565b5f6020820190508181035f830152611d2581611cec565b9050919050565b5f819050919050565b611d46611d41826113f0565b611d2c565b82525050565b5f611d578285611d35565b602082019150611d67828461189c565b6020820191508190509392505050565b7f576f726b20646f6573206e6f74206d65657420646966666963756c74792074615f8201527f7267657400000000000000000000000000000000000000000000000000000000602082015250565b5f611dd1602483611370565b9150611ddc82611d77565b604082019050919050565b5f6020820190508181035f830152611dfe81611dc5565b9050919050565b5f611e0f826111e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e4157611e40611670565b5b600182019050919050565b5f611e578385611370565b9350611e64838584611902565b611e6d836113a8565b840190509392505050565b5f60a0820190508181035f830152611e9181888a611e4c565b9050611ea060208301876111f0565b611ead60408301866111f0565b611eba60608301856113f9565b611ec760808301846111f0565b979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611f2c602683611370565b9150611f3782611ed2565b604082019050919050565b5f6020820190508181035f830152611f5981611f20565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611f94602083611370565b9150611f9f82611f60565b602082019050919050565b5f6020820190508181035f830152611fc181611f88565b905091905056fea2646970667358221220b0a886a3265fe148a9945d6270d570dfd4899802f4294abf696d759d94ee7c0064736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b506004361061011f575f3560e01c80638da5cb5b116100ab578063bfb660de1161006f578063bfb660de146102c8578063da8accf9146102d2578063e0d152af146102ee578063f2fde38b1461031e578063f6f851681461033a5761011f565b80638da5cb5b14610248578063a738bf8f14610266578063ab09894514610284578063b28d87ea146102a0578063b681f2fd146102be5761011f565b80634bbe05e4116100f25780634bbe05e4146101ad5780636189f3ac146101e3578063715018a61461021657806378e97925146102205780638129fc1c1461023e5761011f565b8063148c684a146101235780631633da6e146101535780632d68c39714610171578063331bade11461018f575b5f80fd5b61013d600480360381019061013891906111bc565b610358565b60405161014a91906111ff565b60405180910390f35b61015b61036d565b60405161016891906112cf565b60405180910390f35b6101796103f8565b60405161018691906111ff565b60405180910390f35b610197610453565b6040516101a491906111ff565b60405180910390f35b6101c760048036038101906101c29190611319565b610459565b6040516101da9796959493929190611408565b60405180910390f35b6101fd60048036038101906101f891906111bc565b610556565b60405161020d949392919061147c565b60405180910390f35b61021e610608565b005b61022861061b565b60405161023591906111ff565b60405180910390f35b610246610621565b005b610250610756565b60405161025d91906114c6565b60405180910390f35b61026e61077d565b60405161027b91906111ff565b60405180910390f35b61029e60048036038101906102999190611540565b610783565b005b6102a86108df565b6040516102b591906111ff565b60405180910390f35b6102c66108e5565b005b6102d0610935565b005b6102ec60048036038101906102e7919061158b565b61097b565b005b610308600480360381019061030391906115e8565b610f11565b60405161031591906114c6565b60405180910390f35b610338600480360381019061033391906111bc565b610f4c565b005b610342610fce565b60405161034f91906111ff565b60405180910390f35b6002602052805f5260405f205f915090505481565b606060038054806020026020016040519081016040528092919081815260200182805480156103ee57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103a5575b5050505050905090565b5f806015446104079190611640565b605a610413919061169d565b90506064817f000000000000000000000000000000000000000000000000000000000000000061044391906116d0565b61044d9190611711565b91505090565b60075481565b6001602052815f5260405f208181548110610472575f80fd5b905f5260205f2090600702015f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546104b79061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e39061176e565b801561052e5780601f106105055761010080835404028352916020019161052e565b820191905f5260205f20905b81548152906001019060200180831161051157829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154905087565b6004602052805f5260405f205f91509050805f0154908060010154908060020180546105819061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad9061176e565b80156105f85780601f106105cf576101008083540402835291602001916105f8565b820191905f5260205f20905b8154815290600101906020018083116105db57829003601f168201915b5050505050908060030154905084565b610610610ff2565b6106195f611070565b565b60065481565b5f8060159054906101000a900460ff16159050808015610652575060015f60149054906101000a900460ff1660ff16105b80610680575061066130611131565b15801561067f575060015f60149054906101000a900460ff1660ff16145b5b6106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b69061180e565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff16021790555080156106fb5760015f60156101000a81548160ff0219169083151502179055505b8015610753575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161074a919061187a565b60405180910390a15b50565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60085481565b61078b610935565b5f426007543385856040516020016107a7959493929190611934565b6040516020818303038152906040528051906020012090505f6107c86103f8565b9050604051806080016040528083815260200182815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020014281525060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015560408201518160020190816108929190611b40565b50606082015181600301559050507f496186a9d930bac0744acdcd1d0c054b18283eecbe99d30bda98102d3d06b8ef82826040516108d1929190611c0f565b60405180910390a150505050565b60055481565b6108ed610ff2565b43600781905550601e43610901919061169d565b6008819055507f10cc99616aca050d810fd487c95f968e516d0fa25318530ed50753153d060a1e60405160405180910390a1565b6008544310610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097090611c80565b60405180910390fd5b565b610983610935565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820180546109ef9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1b9061176e565b8015610a665780601f10610a3d57610100808354040283529160200191610a66565b820191905f5260205f20905b815481529060010190602001808311610a4957829003601f168201915b5050505050815260200160038201548152505090505f8160600151600754338686604051602001610a9b959493929190611934565b60405160208183030381529060405280519060200120905080825f015114610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90611d0e565b60405180910390fd5b5f8186604051602001610b0c929190611d4c565b6040516020818303038152906040528051906020012090508260200151815f1c10610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390611de7565b60405180910390fd5b60055f815480929190610b7e90611e05565b91905055505f60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205403610c2857600333908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190610c7590611e05565b91905055505f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050806040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200189815260200186606001518152602001428152602001865f015181526020018660200151815250908060018154018082558091505060019003905f5260205f2090600702015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610dd19190611b40565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505060405180608001604052805f801b81526020015f815260200160405180602001604052805f81525081526020015f81525060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0155602082015181600101556040820151816002019081610e9b9190611b40565b50606082015181600301559050503373ffffffffffffffffffffffffffffffffffffffff167f5ea61d67e3236a79ab8c3c29f810e2c408b0a6b1e19f4e0da2fcd6362129c86087878a42895f01518a60200151604051610f0096959493929190611e78565b60405180910390a250505050505050565b60038181548110610f20575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f54610ff2565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb990611f42565b60405180910390fd5b610fcb81611070565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ffa611153565b73ffffffffffffffffffffffffffffffffffffffff16611018610756565b73ffffffffffffffffffffffffffffffffffffffff161461106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590611faa565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f33905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61118b82611162565b9050919050565b61119b81611181565b81146111a5575f80fd5b50565b5f813590506111b681611192565b92915050565b5f602082840312156111d1576111d061115a565b5b5f6111de848285016111a8565b91505092915050565b5f819050919050565b6111f9816111e7565b82525050565b5f6020820190506112125f8301846111f0565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61124a81611181565b82525050565b5f61125b8383611241565b60208301905092915050565b5f602082019050919050565b5f61127d82611218565b6112878185611222565b935061129283611232565b805f5b838110156112c25781516112a98882611250565b97506112b483611267565b925050600181019050611295565b5085935050505092915050565b5f6020820190508181035f8301526112e78184611273565b905092915050565b6112f8816111e7565b8114611302575f80fd5b50565b5f81359050611313816112ef565b92915050565b5f806040838503121561132f5761132e61115a565b5b5f61133c858286016111a8565b925050602061134d85828601611305565b9150509250929050565b61136081611181565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561139d578082015181840152602081019050611382565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6113c282611366565b6113cc8185611370565b93506113dc818560208601611380565b6113e5816113a8565b840191505092915050565b5f819050919050565b611402816113f0565b82525050565b5f60e08201905061141b5f83018a611357565b818103602083015261142d81896113b8565b905061143c60408301886111f0565b61144960608301876111f0565b61145660808301866111f0565b61146360a08301856113f9565b61147060c08301846111f0565b98975050505050505050565b5f60808201905061148f5f8301876113f9565b61149c60208301866111f0565b81810360408301526114ae81856113b8565b90506114bd60608301846111f0565b95945050505050565b5f6020820190506114d95f830184611357565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112611500576114ff6114df565b5b8235905067ffffffffffffffff81111561151d5761151c6114e3565b5b602083019150836001820283011115611539576115386114e7565b5b9250929050565b5f80602083850312156115565761155561115a565b5b5f83013567ffffffffffffffff8111156115735761157261115e565b5b61157f858286016114eb565b92509250509250929050565b5f805f604084860312156115a2576115a161115a565b5b5f6115af86828701611305565b935050602084013567ffffffffffffffff8111156115d0576115cf61115e565b5b6115dc868287016114eb565b92509250509250925092565b5f602082840312156115fd576115fc61115a565b5b5f61160a84828501611305565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61164a826111e7565b9150611655836111e7565b92508261166557611664611613565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6116a7826111e7565b91506116b2836111e7565b92508282019050808211156116ca576116c9611670565b5b92915050565b5f6116da826111e7565b91506116e5836111e7565b92508282026116f3816111e7565b9150828204841483151761170a57611709611670565b5b5092915050565b5f61171b826111e7565b9150611726836111e7565b92508261173657611735611613565b5b828204905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061178557607f821691505b60208210810361179857611797611741565b5b50919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f6117f8602e83611370565b91506118038261179e565b604082019050919050565b5f6020820190508181035f830152611825816117ec565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61186461185f61185a8461182c565b611841565b611835565b9050919050565b6118748161184a565b82525050565b5f60208201905061188d5f83018461186b565b92915050565b5f819050919050565b6118ad6118a8826111e7565b611893565b82525050565b5f8160601b9050919050565b5f6118c9826118b3565b9050919050565b5f6118da826118bf565b9050919050565b6118f26118ed82611181565b6118d0565b82525050565b5f81905092915050565b828183375f83830152505050565b5f61191b83856118f8565b9350611928838584611902565b82840190509392505050565b5f61193f828861189c565b60208201915061194f828761189c565b60208201915061195f82866118e1565b601482019150611970828486611910565b91508190509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611a087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826119cd565b611a1286836119cd565b95508019841693508086168417925050509392505050565b5f611a44611a3f611a3a846111e7565b611841565b6111e7565b9050919050565b5f819050919050565b611a5d83611a2a565b611a71611a6982611a4b565b8484546119d9565b825550505050565b5f90565b611a85611a79565b611a90818484611a54565b505050565b5b81811015611ab357611aa85f82611a7d565b600181019050611a96565b5050565b601f821115611af857611ac9816119ac565b611ad2846119be565b81016020851015611ae1578190505b611af5611aed856119be565b830182611a95565b50505b505050565b5f82821c905092915050565b5f611b185f1984600802611afd565b1980831691505092915050565b5f611b308383611b09565b9150826002028217905092915050565b611b4982611366565b67ffffffffffffffff811115611b6257611b6161197f565b5b611b6c825461176e565b611b77828285611ab7565b5f60209050601f831160018114611ba8575f8415611b96578287015190505b611ba08582611b25565b865550611c07565b601f198416611bb6866119ac565b5f5b82811015611bdd57848901518255600182019150602085019450602081019050611bb8565b86831015611bfa5784890151611bf6601f891682611b09565b8355505b6001600288020188555050505b505050505050565b5f604082019050611c225f8301856113f9565b611c2f60208301846111f0565b9392505050565b7f70726f6f662077696e646f77732068617320636c6f73656400000000000000005f82015250565b5f611c6a601883611370565b9150611c7582611c36565b602082019050919050565b5f6020820190508181035f830152611c9781611c5e565b9050919050565b7f576f726b207375626d6974206e6f7420636f6d70617461626c652077697468205f8201527f6368616c6c656e67650000000000000000000000000000000000000000000000602082015250565b5f611cf8602983611370565b9150611d0382611c9e565b604082019050919050565b5f6020820190508181035f830152611d2581611cec565b9050919050565b5f819050919050565b611d46611d41826113f0565b611d2c565b82525050565b5f611d578285611d35565b602082019150611d67828461189c565b6020820191508190509392505050565b7f576f726b20646f6573206e6f74206d65657420646966666963756c74792074615f8201527f7267657400000000000000000000000000000000000000000000000000000000602082015250565b5f611dd1602483611370565b9150611ddc82611d77565b604082019050919050565b5f6020820190508181035f830152611dfe81611dc5565b9050919050565b5f611e0f826111e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e4157611e40611670565b5b600182019050919050565b5f611e578385611370565b9350611e64838584611902565b611e6d836113a8565b840190509392505050565b5f60a0820190508181035f830152611e9181888a611e4c565b9050611ea060208301876111f0565b611ead60408301866111f0565b611eba60608301856113f9565b611ec760808301846111f0565b979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611f2c602683611370565b9150611f3782611ed2565b604082019050919050565b5f6020820190508181035f830152611f5981611f20565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611f94602083611370565b9150611f9f82611f60565b602082019050919050565b5f6020820190508181035f830152611fc181611f88565b905091905056fea2646970667358221220b0a886a3265fe148a9945d6270d570dfd4899802f4294abf696d759d94ee7c0064736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize()": {
        "notice": "Init"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2254,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "powSubmissions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(POWSubmission)2236_storage)dyn_storage)"
      },
      {
        "astId": 2258,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "minerSubmissionCount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2261,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "miners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2266,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "lastChallenges",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Challenge)2245_storage)"
      },
      {
        "astId": 2268,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "validProofs",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2270,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "startTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2272,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "window_start",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2274,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "window_end",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(POWSubmission)2236_storage)dyn_storage": {
        "base": "t_struct(POWSubmission)2236_storage",
        "encoding": "dynamic_array",
        "label": "struct LilypadPow.POWSubmission[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(POWSubmission)2236_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LilypadPow.POWSubmission[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(POWSubmission)2236_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Challenge)2245_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LilypadPow.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)2245_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Challenge)2245_storage": {
        "encoding": "inplace",
        "label": "struct LilypadPow.Challenge",
        "members": [
          {
            "astId": 2238,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "challenge",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2240,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "difficulty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2242,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "nodeId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2244,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(POWSubmission)2236_storage": {
        "encoding": "inplace",
        "label": "struct LilypadPow.POWSubmission",
        "members": [
          {
            "astId": 2223,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "walletAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2225,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "nodeId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2227,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2229,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "start_timestap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2231,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "complete_timestap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2233,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "challenge",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 2235,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "difficulty",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}