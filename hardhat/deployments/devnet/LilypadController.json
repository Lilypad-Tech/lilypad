{
  "address": "0x821f3361D454cc98b7555221A06Be563a7E2E0A6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "acceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resultsId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "instructionCount",
          "type": "uint256"
        }
      ],
      "name": "addResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "solver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "jobCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "resourceProvider",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mediators",
              "type": "address[]"
            }
          ],
          "internalType": "struct SharedStructs.DealMembers",
          "name": "members",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "agree",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "submitResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "judgeResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "mediateResults",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.DealTimeouts",
          "name": "timeouts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "instructionPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCollateralMultiple",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.DealPricing",
          "name": "pricing",
          "type": "tuple"
        }
      ],
      "name": "agree",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "checkResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJobCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMediationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mediationAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_jobCreatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_powAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationAcceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationRejectResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jobCreatorAddress",
          "type": "address"
        }
      ],
      "name": "setJobCreatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mediationAddress",
          "type": "address"
        }
      ],
      "name": "setMediationAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentsAddress",
          "type": "address"
        }
      ],
      "name": "setPaymentsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_powAddress",
          "type": "address"
        }
      ],
      "name": "setPowAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageAddress",
          "type": "address"
        }
      ],
      "name": "setStorageAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersAddress",
          "type": "address"
        }
      ],
      "name": "setUsersAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutAgree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutJudgeResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutMediateResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutSubmitResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1651750b4485ece37c37ff61ff79fb6da2d549b268028d65573e313dce1fafb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x821f3361D454cc98b7555221A06Be563a7E2E0A6",
    "transactionIndex": 1,
    "gasUsed": "64773029",
    "logsBloom": "0x
    "blockHash": "0x43d786e12050c6dad7f2295a56c6c02632d8b991e2f489625058fac997a9e072",
    "transactionHash": "0xb1651750b4485ece37c37ff61ff79fb6da2d549b268028d65573e313dce1fafb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 184,
        "transactionHash": "0xb1651750b4485ece37c37ff61ff79fb6da2d549b268028d65573e313dce1fafb",
        "address": "0x821f3361D454cc98b7555221A06Be563a7E2E0A6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x43d786e12050c6dad7f2295a56c6c02632d8b991e2f489625058fac997a9e072"
      }
    ],
    "blockNumber": 184,
    "cumulativeGasUsed": "64773029",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "06e78eaee1ee101e9b46d15f399432ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"acceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"name\":\"agree\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"checkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJobCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMediationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jobCreatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_powAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationAcceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationRejectResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jobCreatorAddress\",\"type\":\"address\"}],\"name\":\"setJobCreatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mediationAddress\",\"type\":\"address\"}],\"name\":\"setMediationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"}],\"name\":\"setPaymentsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_powAddress\",\"type\":\"address\"}],\"name\":\"setPowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersAddress\",\"type\":\"address\"}],\"name\":\"setUsersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutAgree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutJudgeResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutMediateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutSubmitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addResult(string,string,string,uint256)\":{\"notice\":\"Results\"},\"agree(string,(address,address,address,address[]),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),(uint256,uint256,uint256,uint256))\":{\"notice\":\"Agreements\"},\"initialize(address,address,address,address,address,address)\":{\"notice\":\"Init\"},\"mediationAcceptResult(string)\":{\"notice\":\"Mediation\"},\"timeoutAgree(string)\":{\"notice\":\"Timeouts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LilypadController.sol\":\"LilypadController\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ILilypadController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SharedStructs.sol\\\";\\n\\ninterface ILilypadController {\\n\\n  function agree(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) external returns (SharedStructs.Agreement memory);\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) external;\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) external;\\n  \\n  function checkResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutAgree(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) external;\\n  \\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa5d13d97588cedea4f83fdfb0744136f8b34140ddd5e22744fe260684498ff9c\",\"license\":\"Apache-2.0\"},\"contracts/ILilypadMediation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SharedStructs.sol\\\";\\n\\n// this is our controller contract\\n// it will be called by the mediation handler once a decision has been reached\\ninterface ILilypadMediationRequester {\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) external;\\n}\\n\\n// this is the contract that will handle mediating a deal\\ninterface ILilypadMediationHandler {\\n  function mediationRequest(\\n    SharedStructs.Deal memory deal \\n  ) external; \\n}\\n\",\"keccak256\":\"0x52cb20c086cfecbe997ba4697c31722f6a93991f7f8ab37a7c8ecbc95993bfd6\",\"license\":\"Apache-2.0\"},\"contracts/ILilypadPayments.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\ninterface ILilypadPayments {\\n\\n  /**\\n   * Init\\n   */\\n\\n  function setTokenAddress(\\n    address _tokenAddress\\n  ) external;\\n\\n  /**\\n   * Agreements\\n   */\\n  function agreeResourceProvider(\\n    string memory dealId,\\n    address resourceProvider,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function agreeJobCreator(\\n    string memory dealId,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  /**\\n   * Results\\n   */\\n\\n  function addResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    uint256 resultsCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function acceptResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 jobCost,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function checkResult(\\n    string memory dealId,\\n    address jobCreator,\\n    uint256 timeoutCollateral,\\n    uint256 mediationFee\\n  ) external;\\n\\n  /**\\n   * Mediation\\n   */\\n\\n  function mediationAcceptResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 jobCost,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 mediationFee\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 mediationFee\\n  ) external;\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  function timeoutAgreeRefundResourceProvider(\\n    string memory dealId,\\n    address resourceProvider,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutAgreeRefundJobCreator(\\n    string memory dealId,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutSubmitResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutJudgeResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 resultsCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutMediateResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 mediationFee\\n  ) external;\\n  \\n}\\n\",\"keccak256\":\"0x5b3ea3fa7c4d031fccf44098eafa82cfd79d8358b2feb0c2057fd907b85df7d0\",\"license\":\"Apache-2.0\"},\"contracts/ILilypadStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SharedStructs.sol\\\";\\n\\ninterface ILilypadStorage {\\n  \\n  /**\\n   * Deals\\n   */\\n\\n  function getDeal(\\n    string memory dealId\\n  ) external returns (SharedStructs.Deal memory);\\n\\n  function getDealsForParty(\\n    address party\\n  ) external returns (uint256[] memory);\\n\\n  function ensureDeal(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) external returns (SharedStructs.Deal memory);\\n\\n  /**\\n   * Agreements\\n   */\\n\\n  function getAgreement(\\n    string memory dealId\\n  ) external returns (SharedStructs.Agreement memory);\\n  \\n  function agreeResourceProvider(\\n    string memory dealId\\n  ) external returns (SharedStructs.Agreement memory);\\n\\n  function agreeJobCreator(\\n    string memory dealId\\n  ) external returns (SharedStructs.Agreement memory);\\n  \\n  /**\\n   * Post Results\\n   */\\n\\n  function getResult(\\n    string memory dealId\\n  ) external returns (SharedStructs.Result memory);\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) external returns (SharedStructs.Result memory);\\n\\n  /**\\n   * Judge Results\\n   */\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function checkResult(\\n    string memory dealId\\n  ) external;\\n\\n  /**\\n   * Mediation\\n   */\\n  \\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) external;\\n\\n  /**\\n   * Timeouts\\n   */\\n  function timeoutAgree(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) external;\\n\\n  /**\\n   * Costings\\n   */\\n\\n  function getJobCost(\\n    string memory dealId\\n  ) external returns (uint256);\\n\\n  function getResultsCollateral(\\n    string memory dealId\\n  ) external returns (uint256);\\n  \\n  /**\\n   * Checkers\\n   */\\n\\n  function hasDeal(\\n    string memory dealId\\n  ) external returns (bool);\\n\\n  function isState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) external returns (bool);\\n  \\n}\\n\",\"keccak256\":\"0x3273e3d6ff280111d52ea6a021e224cc9382487c9da0807acc212ccb6d2eb469\",\"license\":\"Apache-2.0\"},\"contracts/LilypadController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./ILilypadController.sol\\\";\\nimport \\\"./ILilypadStorage.sol\\\";\\nimport \\\"./ILilypadPayments.sol\\\";\\nimport \\\"./ILilypadMediation.sol\\\";\\n\\ncontract LilypadController is ILilypadController, Ownable, Initializable {\\n\\n  /**\\n   * Types\\n   */\\n  \\n  address private storageAddress;\\n  address private userAddress;\\n  address private paymentsAddress;\\n  address private mediationAddress;\\n  address private jobCreatorAddress;\\n  address private powAddress;\\n\\n  ILilypadStorage private storageContract;\\n  ILilypadPayments private paymentsContract;\\n  ILilypadMediationHandler private mediationContract;\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize(\\n    address _storageAddress,\\n    address _usersAddress,\\n    address _paymentsAddress,\\n    address _mediationAddress,\\n    address _jobCreatorAddress,\\n    address _powAddress\\n  ) public initializer {\\n    setStorageAddress(_storageAddress);\\n    setUsersAddress(_usersAddress);\\n    setPaymentsAddress(_paymentsAddress);\\n    setMediationAddress(_mediationAddress);\\n    setJobCreatorAddress(_jobCreatorAddress);\\n    setPowAddress(_powAddress);\\n  }\\n\\n  function setStorageAddress(address _storageAddress) public onlyOwner {\\n    require(_storageAddress != address(0), \\\"Storage address\\\");\\n    storageAddress = _storageAddress;\\n    storageContract = ILilypadStorage(storageAddress);\\n  }\\n\\n  function getStorageAddress() public view returns(address) {\\n    return storageAddress;\\n  }\\n\\n  function setUsersAddress(address _usersAddress) public onlyOwner {\\n    require(_usersAddress != address(0), \\\"Users address\\\");\\n    userAddress = _usersAddress;\\n  }\\n\\n  function getUsersAddress() public view returns(address) {\\n    return userAddress;\\n  }\\n\\n  function setPaymentsAddress(address _paymentsAddress) public onlyOwner {\\n    require(_paymentsAddress != address(0), \\\"Payments address\\\");\\n    paymentsAddress = _paymentsAddress;\\n    paymentsContract = ILilypadPayments(_paymentsAddress);\\n  }\\n\\n  function getPaymentsAddress() public view returns(address) {\\n    return paymentsAddress;\\n  }\\n\\n  function setMediationAddress(address _mediationAddress) public onlyOwner {\\n    require(_mediationAddress != address(0), \\\"Mediation address\\\");\\n    mediationAddress = _mediationAddress;\\n    mediationContract = ILilypadMediationHandler(_mediationAddress);\\n  }\\n\\n  function getMediationAddress() public view returns(address) {\\n    return mediationAddress;\\n  }\\n\\n  function setJobCreatorAddress(address _jobCreatorAddress) public onlyOwner {\\n    require(_jobCreatorAddress != address(0), \\\"JobCreator address\\\");\\n    jobCreatorAddress = _jobCreatorAddress;\\n  }\\n\\n  function getJobCreatorAddress() public view returns(address) {\\n    return jobCreatorAddress;\\n  }\\n\\n  function setPowAddress(address _powAddress) public onlyOwner {\\n    require(_powAddress != address(0), \\\"Users address\\\");\\n    powAddress = _powAddress;\\n  }\\n\\n  function getPowAddress() public view returns(address) {\\n    return powAddress;\\n  }\\n\\n\\n  /**\\n   * Agreements\\n   */\\n\\n  // * create the deal if not exists\\n  // * otherwise compare the values to ensure 2 sided agreement\\n  // * check the RP or JC is calling this\\n  // * if RP:\\n  //    * mark the deal as RP agreed\\n  //    * pay in the timeout collateral\\n  // * if JC:\\n  //    * mark the deal as JC agreed\\n  //    * pay in the payment collateral and timeout collateral\\n  // * if both sides have agreed then mark the deal as agreed\\n  // * emit the event\\n  function agree(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) public override returns (SharedStructs.Agreement memory) {\\n    SharedStructs.Deal memory deal = storageContract.ensureDeal(\\n      dealId,\\n      members,\\n      timeouts,\\n      pricing\\n    );\\n    bool isResourceProvider = tx.origin == deal.members.resourceProvider;\\n    bool isJobCreator = tx.origin == deal.members.jobCreator;\\n    require(isResourceProvider || isJobCreator, \\\"Only RP / JC\\\");\\n\\n    if(isResourceProvider) {\\n      storageContract.agreeResourceProvider(dealId);\\n      paymentsContract.agreeResourceProvider(\\n        dealId,\\n        deal.members.resourceProvider,\\n        deal.timeouts.submitResults.collateral\\n      );\\n    }\\n    else if(isJobCreator) {\\n      storageContract.agreeJobCreator(dealId);\\n      paymentsContract.agreeJobCreator(\\n        dealId,\\n        deal.members.jobCreator,\\n        deal.pricing.paymentCollateral,\\n        // the JC paus the judge results collateral\\n        deal.timeouts.judgeResults.collateral\\n      );\\n    }\\n    return storageContract.getAgreement(dealId);\\n  }\\n\\n  /**\\n   * Results\\n   */\\n\\n  // * check the RP is calling this\\n  // * mark the deal as results submitted\\n  // * calculate the cost of the job\\n  // * calculate the job collateral based on the multiple\\n  // * work out the difference between the timeout and results collateral\\n  // * pay the difference into / out of the contract to the RP\\n  // * emit the event\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    // this is the CID of the actual data\\n    // otherwise onchain clients cannot know the actual data they want to fetch\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) public override {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    require(deal.members.resourceProvider == tx.origin, \\\"Only RP\\\");\\n\\n    storageContract.addResult(\\n      dealId,\\n      resultsId,\\n      dataId,\\n      instructionCount\\n    );\\n\\n    // how many multiple of the job cost must the RP put up as collateral\\n    // we need to do this after having added the result otherwise\\n    // we don't know the instruction count\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    paymentsContract.addResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      resultsCollateral,\\n      // this is the RP adding a results so they get their submit results timeout collateral back\\n      deal.timeouts.submitResults.collateral\\n    );\\n  }\\n\\n  // * check the JC is calling this\\n  // * check we are in Submitted state\\n  // * mark the deal as results accepted\\n  // * calculate the cost of the job\\n  // * deduct the cost of the job from the JC payment collateral\\n  // * pay the RP the cost of the job\\n  // * refund the RP the results collateral\\n  // * refund the JC the job collateral minus the cost\\n  // * refund the JC the timeout collateral\\n  function acceptResult(\\n    string memory dealId\\n  ) public override {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    require(deal.members.jobCreator == tx.origin, \\\"Only JC\\\");\\n    \\n    uint256 jobCost = storageContract.getJobCost(dealId);\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    storageContract.acceptResult(dealId);\\n    paymentsContract.acceptResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      jobCost,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      // this is the JC judging their result so they get their timeout collateral back\\n      deal.timeouts.judgeResults.collateral\\n    );\\n  }\\n\\n  // * check the JC is calling this\\n  // * check we are in Submitted state\\n  // * check the mediator is in the list of RP trusted mediators\\n  // * mark the deal as results checked\\n  // * charge the JC the mediation fee\\n  // * refund the JC the timeout collateral\\n  // * emit the Mediation event so the mediator kicks in\\n  function checkResult(\\n    string memory dealId\\n  ) public override {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    require(deal.members.jobCreator == tx.origin, \\\"Only JC\\\");\\n\\n    // this function will require that the mediator is in the RP's list of trusted mediators\\n    storageContract.checkResult(dealId);\\n    paymentsContract.checkResult(\\n      dealId,\\n      deal.members.jobCreator,\\n      // this is the JC judging their result so they get their timeout collateral back\\n      deal.timeouts.judgeResults.collateral,\\n      deal.pricing.mediationFee\\n    );\\n\\n    // trigger the mediation process by calling the contract\\n    mediationContract.mediationRequest(deal);\\n  }\\n\\n  /**\\n   * Mediation\\n   */\\n\\n  // the mediator calls this to say that the resource provider did the correct job\\n  // * check the state is ResultsChecked\\n  // * check the mediator is calling this\\n  // * mark the deal as mediation accepted\\n  // * refund the JC what is left from the payment collateral (if any)\\n  // * pay the RP the cost of the job\\n  // * refund the RP the results collateral\\n  // * pay the mediator for mediating\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) public override {\\n    require(mediationAddress == _msgSender(), \\\"Only mediation\\\");\\n    require(_canMediateResult(dealId), \\\"Cannot mediate\\\");\\n    \\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    uint256 jobCost = storageContract.getJobCost(dealId);\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    storageContract.mediationAcceptResult(dealId);\\n    paymentsContract.mediationAcceptResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      jobCost,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      deal.pricing.mediationFee\\n    );\\n  }\\n\\n  // the mediator calls this to say that the resource provider did the bad job\\n  // * check the state is ResultsChecked\\n  // * check the mediator is calling this\\n  // * mark the deal as mediation rejected\\n  // * refund the JC their payment collateral\\n  // * slash the RP's results collateral\\n  // * pay the mediator for mediating\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) public override {\\n    // only the current mediation contract can call this\\n    require(mediationAddress == _msgSender(), \\\"Only mediation\\\");\\n    require(_canMediateResult(dealId), \\\"Cannot mediate\\\");\\n\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    storageContract.mediationRejectResult(dealId);\\n    paymentsContract.mediationRejectResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      deal.pricing.mediationFee\\n    );\\n  }\\n\\n  function _canMediateResult(\\n    string memory dealId \\n  ) private returns (bool) {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    return true;\\n  }\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  function timeoutAgree(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.jobCreator == tx.origin || deal.members.resourceProvider == tx.origin, \\\"Only JC or RP\\\");\\n    require(agreement.state == SharedStructs.AgreementState.DealNegotiating, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.dealCreatedAt + deal.timeouts.agree.timeout, \\\"Not timed out\\\");\\n    storageContract.timeoutAgree(dealId);\\n    if (agreement.resourceProviderAgreedAt > 0) {\\n      // this is an RP refund\\n      paymentsContract.timeoutAgreeRefundResourceProvider(\\n        dealId,\\n        deal.members.resourceProvider,\\n        deal.timeouts.submitResults.collateral\\n      );\\n    } else if (agreement.jobCreatorAgreedAt > 0) {\\n      // this is an JC refund\\n      paymentsContract.timeoutAgreeRefundJobCreator(\\n        dealId,\\n        deal.members.jobCreator,\\n        deal.pricing.paymentCollateral,\\n        deal.timeouts.submitResults.collateral\\n      );\\n    }\\n  }\\n\\n  // the job creator calls this after the timeout has passed and there are no results submitted\\n  // * check the JC is calling this\\n  // * mark the deal as timedout\\n  // * pay back the JC's job collateral\\n  // * slash the RP's results collateral\\n  // * emit the event\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.jobCreator == tx.origin, \\\"Only JC\\\");\\n    require(agreement.state == SharedStructs.AgreementState.DealAgreed, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.dealAgreedAt + deal.timeouts.submitResults.timeout, \\\"Not timed out\\\");\\n    storageContract.timeoutSubmitResult(dealId);\\n    paymentsContract.timeoutSubmitResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      deal.pricing.paymentCollateral,\\n      deal.timeouts.submitResults.collateral\\n    );\\n  }\\n\\n  // the resource provider calls this after the timeout has passed after submitting results\\n  // and the job creator has not yet submitted their judgement on those results\\n  // * check the RP is calling this\\n  // * mark the deal as timedout\\n  // * pay back the RP's results collateral\\n  // * pay the RP the cost of the job\\n  // * slash the JC's timeout collateral\\n  // * slash the JC's job collateral\\n  // * emit the event\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.resourceProvider == tx.origin, \\\"Only RP\\\");\\n    require(agreement.state == SharedStructs.AgreementState.ResultsSubmitted, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \\\"Not timed out\\\");\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n    storageContract.timeoutJudgeResult(dealId);    \\n    paymentsContract.timeoutJudgeResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      resultsCollateral,\\n      deal.timeouts.judgeResults.collateral\\n    );\\n  }\\n\\n  // either the JC or RP call this after the timeout has passed after results being checked\\n  // this refunds both the payment and results collateral to both the JC and RP\\n  // * check the RP or JC is calling this\\n  // * mark the deal as timedout\\n  // * pay back the RP's results collateral\\n  // * pay back the JC's paymnet collateral\\n  // * emit the event\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.resourceProvider == tx.origin || deal.members.jobCreator == tx.origin, \\\"Only RP or JC\\\");\\n    require(agreement.state == SharedStructs.AgreementState.ResultsChecked, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \\\"Not timed out\\\");\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n    storageContract.timeoutMediateResult(dealId);\\n    paymentsContract.timeoutMediateResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      deal.pricing.mediationFee\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x1ed323cfd54d65000c966dd9551fbec2bf0830013eb44a17bd9c854cbc3b0d0c\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801562000010575f80fd5b5062000031620000256200003760201b60201c565b6200003e60201b60201c565b620000ff565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6158f5806200010d5f395ff3fe608060405234801561000f575f80fd5b506004361061018c575f3560e01c806380ffdfe0116100dc578063cc2a9a5b11610095578063e7b957d11161006f578063e7b957d1146103f4578063e850be3714610410578063f2fde38b1461042c578063f583b125146104485761018c565b8063cc2a9a5b1461039c578063d48b1084146103b8578063d882a252146103d65761018c565b806380ffdfe0146102f0578063824518aa1461030c5780638da5cb5b1461032857806393dbed3e14610346578063b4031e5414610364578063bbfff47d146103805761018c565b806346834d1e1161014957806359b910d61161012357806359b910d614610292578063640e570f146102ae578063715018a6146102ca578063795f9abf146102d45761018c565b806346834d1e1461023e5780634ef168a61461025a578063511a9f68146102765761018c565b80630aca35ce14610190578063155329ea146101ae578063297f9e55146101cc578063393a4d34146101e85780633955548e1461020657806343391cca14610222575b5f80fd5b610198610478565b6040516101a591906138fe565b60405180910390f35b6101b66104a0565b6040516101c391906138fe565b60405180910390f35b6101e660048036038101906101e19190613a64565b6104c8565b005b6101f0610938565b6040516101fd91906138fe565b60405180910390f35b610220600480360381019061021b9190613ade565b610960565b005b61023c60048036038101906102379190613bc0565b610d3c565b005b61025860048036038101906102539190613a64565b610e35565b005b610274600480360381019061026f9190613bc0565b6111e2565b005b610290600480360381019061028b9190613a64565b61129b565b005b6102ac60048036038101906102a79190613bc0565b611654565b005b6102c860048036038101906102c39190613bc0565b61176e565b005b6102d2611867565b005b6102ee60048036038101906102e99190613a64565b61187a565b005b61030a60048036038101906103059190613a64565b611d23565b005b61032660048036038101906103219190613a64565b61207b565b005b610330612473565b60405161033d91906138fe565b60405180910390f35b61034e61249a565b60405161035b91906138fe565b60405180910390f35b61037e60048036038101906103799190613bc0565b6124c2565b005b61039a60048036038101906103959190613bc0565b61257b565b005b6103b660048036038101906103b19190613beb565b612634565b005b6103c06127a5565b6040516103cd91906138fe565b60405180910390f35b6103de6127cd565b6040516103eb91906138fe565b60405180910390f35b61040e60048036038101906104099190613a64565b6127f5565b005b61042a60048036038101906104259190613a64565b612c88565b005b61044660048036038101906104419190613bc0565b6130d7565b005b610462600480360381019061045d9190613f09565b613159565b60405161046f9190614147565b60405180910390f35b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8260026040518363ffffffff1660e01b81526004016105259291906141ea565b6020604051808303815f875af1158015610541573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610565919061424d565b6105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b906142c2565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016105ff91906142e0565b5f604051808303815f875af115801561061a573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061064291906146a3565b90503273ffffffffffffffffffffffffffffffffffffffff1681602001516020015173ffffffffffffffffffffffffffffffffffffffff16146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190614734565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373db5c6a846040518263ffffffff1660e01b815260040161071591906142e0565b6020604051808303815f875af1158015610731573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107559190614752565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b81526004016107b291906142e0565b6020604051808303815f875af11580156107ce573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f29190614752565b905060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663297f9e55856040518263ffffffff1660e01b815260040161084e91906142e0565b5f604051808303815f87803b158015610865575f80fd5b505af1158015610877573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b13567148585602001516040015186602001516020015186886060015160200151878a6040015160400151602001516040518863ffffffff1660e01b8152600401610905979695949392919061478c565b5f604051808303815f87803b15801561091c575f80fd5b505af115801561092e573d5f803e3d5ffd5b5050505050505050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8560016040518363ffffffff1660e01b81526004016109bd9291906141ea565b6020604051808303815f875af11580156109d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fd919061424d565b610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a339061484a565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180866040518263ffffffff1660e01b8152600401610a9791906142e0565b5f604051808303815f875af1158015610ab2573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610ada91906146a3565b90503273ffffffffffffffffffffffffffffffffffffffff1681602001516040015173ffffffffffffffffffffffffffffffffffffffff1614610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b49906148b2565b60405180910390fd5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633955548e868686866040518563ffffffff1660e01b8152600401610bb294939291906148d0565b5f604051808303815f875af1158015610bcd573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610bf591906149f1565b505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f876040518263ffffffff1660e01b8152600401610c5191906142e0565b6020604051808303815f875af1158015610c6d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c919190614752565b905060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309cab5108784602001516040015184866040015160200151602001516040518563ffffffff1660e01b8152600401610d079493929190614a38565b5f604051808303815f87803b158015610d1e575f80fd5b505af1158015610d30573d5f803e3d5ffd5b50505050505050505050565b610d446135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da990614acc565b60405180910390fd5b8060045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060095f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8260026040518363ffffffff1660e01b8152600401610e929291906141ea565b6020604051808303815f875af1158015610eae573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ed2919061424d565b610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f08906142c2565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b8152600401610f6c91906142e0565b5f604051808303815f875af1158015610f87573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610faf91906146a3565b90503273ffffffffffffffffffffffffffffffffffffffff1681602001516020015173ffffffffffffffffffffffffffffffffffffffff1614611027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101e90614734565b60405180910390fd5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346834d1e836040518263ffffffff1660e01b815260040161108191906142e0565b5f604051808303815f87803b158015611098575f80fd5b505af11580156110aa573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aea3825183836020015160200151846040015160400151602001518560600151606001516040518563ffffffff1660e01b815260040161112a9493929190614a38565b5f604051808303815f87803b158015611141575f80fd5b505af1158015611153573d5f803e3d5ffd5b5050505060095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370bea207826040518263ffffffff1660e01b81526004016111b19190614d86565b5f604051808303815f87803b1580156111c8575f80fd5b505af11580156111da573d5f803e3d5ffd5b505050505050565b6111ea6135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f90614df0565b60405180910390fd5b8060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016112f691906142e0565b5f604051808303815f875af1158015611311573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061133991906146a3565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b815260040161139691906142e0565b6101c0604051808303815f875af11580156113b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113d79190614f7c565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516020015173ffffffffffffffffffffffffffffffffffffffff161461144f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144690614734565b60405180910390fd5b6001600a81111561146357611462613fa7565b5b815f0151600a81111561147957611478613fa7565b5b146114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b090614ff2565b60405180910390fd5b8160400151602001515f015181608001516114d4919061503d565b4211611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c906150ba565b60405180910390fd5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663511a9f68846040518263ffffffff1660e01b815260040161156f91906142e0565b5f604051808303815f87803b158015611586575f80fd5b505af1158015611598573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d31a11584846020015160400151856020015160200151866060015160200151876040015160200151602001516040518663ffffffff1660e01b81526004016116229594939291906150d8565b5f604051808303815f87803b158015611639575f80fd5b505af115801561164b573d5f803e3d5ffd5b50505050505050565b61165c6135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c19061517a565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6117766135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117db906151e2565b60405180910390fd5b8060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61186f6135fe565b6118785f61367c565b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016118d591906142e0565b5f604051808303815f875af11580156118f0573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061191891906146a3565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b815260040161197591906142e0565b6101c0604051808303815f875af1158015611992573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119b69190614f7c565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516020015173ffffffffffffffffffffffffffffffffffffffff161480611a2d57503273ffffffffffffffffffffffffffffffffffffffff1682602001516040015173ffffffffffffffffffffffffffffffffffffffff16145b611a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a639061524a565b60405180910390fd5b5f600a811115611a7f57611a7e613fa7565b5b815f0151600a811115611a9557611a94613fa7565b5b14611ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acc90614ff2565b60405180910390fd5b81604001515f01515f01518160600151611aef919061503d565b4211611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b27906150ba565b60405180910390fd5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663795f9abf846040518263ffffffff1660e01b8152600401611b8a91906142e0565b5f604051808303815f87803b158015611ba1575f80fd5b505af1158015611bb3573d5f803e3d5ffd5b505050505f81602001511115611c675760085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ef0d89e84846020015160400151856040015160200151602001516040518463ffffffff1660e01b8152600401611c3593929190615268565b5f604051808303815f87803b158015611c4c575f80fd5b505af1158015611c5e573d5f803e3d5ffd5b50505050611d1e565b5f81604001511115611d1d5760085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afe1dff784846020015160200151856060015160200151866040015160200151602001516040518563ffffffff1660e01b8152600401611cef9493929190614a38565b5f604051808303815f87803b158015611d06575f80fd5b505af1158015611d18573d5f803e3d5ffd5b505050505b5b505050565b611d2b61373d565b73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db0906152ee565b60405180910390fd5b611dc281613744565b611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df890615356565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b8152600401611e5c91906142e0565b5f604051808303815f875af1158015611e77573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611e9f91906146a3565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f846040518263ffffffff1660e01b8152600401611efc91906142e0565b6020604051808303815f875af1158015611f18573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f3c9190614752565b905060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380ffdfe0846040518263ffffffff1660e01b8152600401611f9891906142e0565b5f604051808303815f87803b158015611faf575f80fd5b505af1158015611fc1573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2485cce84846020015160400151856020015160200151866060015160200151868860600151606001516040518763ffffffff1660e01b815260040161204996959493929190615374565b5f604051808303815f87803b158015612060575f80fd5b505af1158015612072573d5f803e3d5ffd5b50505050505050565b61208361373d565b73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612111576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612108906152ee565b60405180910390fd5b61211a81613744565b612159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215090615356565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016121b491906142e0565b5f604051808303815f875af11580156121cf573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121f791906146a3565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373db5c6a846040518263ffffffff1660e01b815260040161225491906142e0565b6020604051808303815f875af1158015612270573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122949190614752565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b81526004016122f191906142e0565b6020604051808303815f875af115801561230d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123319190614752565b905060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663824518aa856040518263ffffffff1660e01b815260040161238d91906142e0565b5f604051808303815f87803b1580156123a4575f80fd5b505af11580156123b6573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a1f90728585602001516040015186602001516020015186886060015160200151878a60600151606001516040518863ffffffff1660e01b8152600401612440979695949392919061478c565b5f604051808303815f87803b158015612457575f80fd5b505af1158015612469573d5f803e3d5ffd5b5050505050505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6124ca6135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252f90615424565b60405180910390fd5b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6125836135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e890614df0565b60405180910390fd5b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8060159054906101000a900460ff16159050808015612665575060015f60149054906101000a900460ff1660ff16105b8061269357506126743061382a565b158015612692575060015f60149054906101000a900460ff1660ff16145b5b6126d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c9906154b2565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff160217905550801561270e5760015f60156101000a81548160ff0219169083151502179055505b61271787611654565b6127208661257b565b6127298561176e565b61273284610d3c565b61273b836124c2565b612744826111e2565b801561279c575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051612793919061551e565b60405180910390a15b50505050505050565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b815260040161285091906142e0565b5f604051808303815f875af115801561286b573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061289391906146a3565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b81526004016128f091906142e0565b6101c0604051808303815f875af115801561290d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129319190614f7c565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516040015173ffffffffffffffffffffffffffffffffffffffff1614806129a857503273ffffffffffffffffffffffffffffffffffffffff1682602001516020015173ffffffffffffffffffffffffffffffffffffffff16145b6129e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129de90615581565b60405180910390fd5b6004600a8111156129fb576129fa613fa7565b5b815f0151600a811115612a1157612a10613fa7565b5b14612a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4890614ff2565b60405180910390fd5b8160400151604001515f01518160a00151612a6c919061503d565b4211612aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa4906150ba565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b8152600401612b0891906142e0565b6020604051808303815f875af1158015612b24573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b489190614752565b905060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7b957d1856040518263ffffffff1660e01b8152600401612ba491906142e0565b5f604051808303815f87803b158015612bbb575f80fd5b505af1158015612bcd573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663823f3de185856020015160400151866020015160200151876060015160200151868960600151606001516040518763ffffffff1660e01b8152600401612c5596959493929190615374565b5f604051808303815f87803b158015612c6c575f80fd5b505af1158015612c7e573d5f803e3d5ffd5b5050505050505050565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b8152600401612ce391906142e0565b5f604051808303815f875af1158015612cfe573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190612d2691906146a3565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b8152600401612d8391906142e0565b6101c0604051808303815f875af1158015612da0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dc49190614f7c565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516040015173ffffffffffffffffffffffffffffffffffffffff1614612e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e33906148b2565b60405180910390fd5b6002600a811115612e5057612e4f613fa7565b5b815f0151600a811115612e6657612e65613fa7565b5b14612ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9d90614ff2565b60405180910390fd5b8160400151604001515f01518160a00151612ec1919061503d565b4211612f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef9906150ba565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b8152600401612f5d91906142e0565b6020604051808303815f875af1158015612f79573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f9d9190614752565b905060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e850be37856040518263ffffffff1660e01b8152600401612ff991906142e0565b5f604051808303815f87803b158015613010575f80fd5b505af1158015613022573d5f803e3d5ffd5b5050505060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a6726b58585602001516040015186602001516020015185886040015160400151602001516040518663ffffffff1660e01b81526004016130a49594939291906150d8565b5f604051808303815f87803b1580156130bb575f80fd5b505af11580156130cd573d5f803e3d5ffd5b5050505050505050565b6130df6135fe565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361314d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131449061560f565b60405180910390fd5b6131568161367c565b50565b61316161384c565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6370b0e878787876040518563ffffffff1660e01b81526004016131c29493929190615734565b5f604051808303815f875af11580156131dd573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061320591906146a3565b90505f81602001516040015173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161490505f82602001516020015173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614905081806132845750805b6132c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ba906157d1565b60405180910390fd5b81156134095760075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec95b967896040518263ffffffff1660e01b815260040161332391906142e0565b6101c0604051808303815f875af1158015613340573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906133649190614f7c565b5060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e3868dc89856020015160400151866040015160200151602001516040518463ffffffff1660e01b81526004016133d793929190615268565b5f604051808303815f87803b1580156133ee575f80fd5b505af1158015613400573d5f803e3d5ffd5b50505050613556565b80156135555760075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c4135da896040518263ffffffff1660e01b815260040161346991906142e0565b6101c0604051808303815f875af1158015613486573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906134aa9190614f7c565b5060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b918803589856020015160200151866060015160200151876040015160400151602001516040518563ffffffff1660e01b81526004016135279493929190614a38565b5f604051808303815f87803b15801561353e575f80fd5b505af1158015613550573d5f803e3d5ffd5b505050505b5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d896040518263ffffffff1660e01b81526004016135b091906142e0565b6101c0604051808303815f875af11580156135cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906135f19190614f7c565b9350505050949350505050565b61360661373d565b73ffffffffffffffffffffffffffffffffffffffff16613624612473565b73ffffffffffffffffffffffffffffffffffffffff161461367a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161367190615839565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8360046040518363ffffffff1660e01b81526004016137a29291906141ea565b6020604051808303815f875af11580156137be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906137e2919061424d565b613821576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613818906158a1565b60405180910390fd5b60019050919050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806101c001604052805f600a81111561386b5761386a613fa7565b5b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6138e8826138bf565b9050919050565b6138f8816138de565b82525050565b5f6020820190506139115f8301846138ef565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61397682613930565b810181811067ffffffffffffffff8211171561399557613994613940565b5b80604052505050565b5f6139a7613917565b90506139b3828261396d565b919050565b5f67ffffffffffffffff8211156139d2576139d1613940565b5b6139db82613930565b9050602081019050919050565b828183375f83830152505050565b5f613a08613a03846139b8565b61399e565b905082815260208101848484011115613a2457613a2361392c565b5b613a2f8482856139e8565b509392505050565b5f82601f830112613a4b57613a4a613928565b5b8135613a5b8482602086016139f6565b91505092915050565b5f60208284031215613a7957613a78613920565b5b5f82013567ffffffffffffffff811115613a9657613a95613924565b5b613aa284828501613a37565b91505092915050565b5f819050919050565b613abd81613aab565b8114613ac7575f80fd5b50565b5f81359050613ad881613ab4565b92915050565b5f805f8060808587031215613af657613af5613920565b5b5f85013567ffffffffffffffff811115613b1357613b12613924565b5b613b1f87828801613a37565b945050602085013567ffffffffffffffff811115613b4057613b3f613924565b5b613b4c87828801613a37565b935050604085013567ffffffffffffffff811115613b6d57613b6c613924565b5b613b7987828801613a37565b9250506060613b8a87828801613aca565b91505092959194509250565b613b9f816138de565b8114613ba9575f80fd5b50565b5f81359050613bba81613b96565b92915050565b5f60208284031215613bd557613bd4613920565b5b5f613be284828501613bac565b91505092915050565b5f805f805f8060c08789031215613c0557613c04613920565b5b5f613c1289828a01613bac565b9650506020613c2389828a01613bac565b9550506040613c3489828a01613bac565b9450506060613c4589828a01613bac565b9350506080613c5689828a01613bac565b92505060a0613c6789828a01613bac565b9150509295509295509295565b5f80fd5b5f80fd5b5f67ffffffffffffffff821115613c9657613c95613940565b5b602082029050602081019050919050565b5f80fd5b5f613cbd613cb884613c7c565b61399e565b90508083825260208201905060208402830185811115613ce057613cdf613ca7565b5b835b81811015613d095780613cf58882613bac565b845260208401935050602081019050613ce2565b5050509392505050565b5f82601f830112613d2757613d26613928565b5b8135613d37848260208601613cab565b91505092915050565b5f60808284031215613d5557613d54613c74565b5b613d5f608061399e565b90505f613d6e84828501613bac565b5f830152506020613d8184828501613bac565b6020830152506040613d9584828501613bac565b604083015250606082013567ffffffffffffffff811115613db957613db8613c78565b5b613dc584828501613d13565b60608301525092915050565b5f60408284031215613de657613de5613c74565b5b613df0604061399e565b90505f613dff84828501613aca565b5f830152506020613e1284828501613aca565b60208301525092915050565b5f6101008284031215613e3457613e33613c74565b5b613e3e608061399e565b90505f613e4d84828501613dd1565b5f830152506040613e6084828501613dd1565b6020830152506080613e7484828501613dd1565b60408301525060c0613e8884828501613dd1565b60608301525092915050565b5f60808284031215613ea957613ea8613c74565b5b613eb3608061399e565b90505f613ec284828501613aca565b5f830152506020613ed584828501613aca565b6020830152506040613ee984828501613aca565b6040830152506060613efd84828501613aca565b60608301525092915050565b5f805f806101c08587031215613f2257613f21613920565b5b5f85013567ffffffffffffffff811115613f3f57613f3e613924565b5b613f4b87828801613a37565b945050602085013567ffffffffffffffff811115613f6c57613f6b613924565b5b613f7887828801613d40565b9350506040613f8987828801613e1e565b925050610140613f9b87828801613e94565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600b8110613fe557613fe4613fa7565b5b50565b5f819050613ff582613fd4565b919050565b5f61400482613fe8565b9050919050565b61401481613ffa565b82525050565b61402381613aab565b82525050565b6101c082015f82015161403e5f85018261400b565b506020820151614051602085018261401a565b506040820151614064604085018261401a565b506060820151614077606085018261401a565b50608082015161408a608085018261401a565b5060a082015161409d60a085018261401a565b5060c08201516140b060c085018261401a565b5060e08201516140c360e085018261401a565b506101008201516140d861010085018261401a565b506101208201516140ed61012085018261401a565b5061014082015161410261014085018261401a565b5061016082015161411761016085018261401a565b5061018082015161412c61018085018261401a565b506101a08201516141416101a085018261401a565b50505050565b5f6101c08201905061415b5f830184614029565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561419857808201518184015260208101905061417d565b5f8484015250505050565b5f6141ad82614161565b6141b7818561416b565b93506141c781856020860161417b565b6141d081613930565b840191505092915050565b6141e481613ffa565b82525050565b5f6040820190508181035f83015261420281856141a3565b905061421160208301846141db565b9392505050565b5f8115159050919050565b61422c81614218565b8114614236575f80fd5b50565b5f8151905061424781614223565b92915050565b5f6020828403121561426257614261613920565b5b5f61426f84828501614239565b91505092915050565b7f526573756c74735375626d6974746564000000000000000000000000000000005f82015250565b5f6142ac60108361416b565b91506142b782614278565b602082019050919050565b5f6020820190508181035f8301526142d9816142a0565b9050919050565b5f6020820190508181035f8301526142f881846141a3565b905092915050565b5f61431261430d846139b8565b61399e565b90508281526020810184848401111561432e5761432d61392c565b5b61433984828561417b565b509392505050565b5f82601f83011261435557614354613928565b5b8151614365848260208601614300565b91505092915050565b5f8151905061437c81613b96565b92915050565b5f61439461438f84613c7c565b61399e565b905080838252602082019050602084028301858111156143b7576143b6613ca7565b5b835b818110156143e057806143cc888261436e565b8452602084019350506020810190506143b9565b5050509392505050565b5f82601f8301126143fe576143fd613928565b5b815161440e848260208601614382565b91505092915050565b5f6080828403121561442c5761442b613c74565b5b614436608061399e565b90505f6144458482850161436e565b5f8301525060206144588482850161436e565b602083015250604061446c8482850161436e565b604083015250606082015167ffffffffffffffff8111156144905761448f613c78565b5b61449c848285016143ea565b60608301525092915050565b5f815190506144b681613ab4565b92915050565b5f604082840312156144d1576144d0613c74565b5b6144db604061399e565b90505f6144ea848285016144a8565b5f8301525060206144fd848285016144a8565b60208301525092915050565b5f610100828403121561451f5761451e613c74565b5b614529608061399e565b90505f614538848285016144bc565b5f83015250604061454b848285016144bc565b602083015250608061455f848285016144bc565b60408301525060c0614573848285016144bc565b60608301525092915050565b5f6080828403121561459457614593613c74565b5b61459e608061399e565b90505f6145ad848285016144a8565b5f8301525060206145c0848285016144a8565b60208301525060406145d4848285016144a8565b60408301525060606145e8848285016144a8565b60608301525092915050565b5f6101c0828403121561460a57614609613c74565b5b614614608061399e565b90505f82015167ffffffffffffffff81111561463357614632613c78565b5b61463f84828501614341565b5f83015250602082015167ffffffffffffffff81111561466257614661613c78565b5b61466e84828501614417565b602083015250604061468284828501614509565b6040830152506101406146978482850161457f565b60608301525092915050565b5f602082840312156146b8576146b7613920565b5b5f82015167ffffffffffffffff8111156146d5576146d4613924565b5b6146e1848285016145f4565b91505092915050565b7f4f6e6c79204a43000000000000000000000000000000000000000000000000005f82015250565b5f61471e60078361416b565b9150614729826146ea565b602082019050919050565b5f6020820190508181035f83015261474b81614712565b9050919050565b5f6020828403121561476757614766613920565b5b5f614774848285016144a8565b91505092915050565b61478681613aab565b82525050565b5f60e0820190508181035f8301526147a4818a6141a3565b90506147b360208301896138ef565b6147c060408301886138ef565b6147cd606083018761477d565b6147da608083018661477d565b6147e760a083018561477d565b6147f460c083018461477d565b98975050505050505050565b7f4465616c416772656564000000000000000000000000000000000000000000005f82015250565b5f614834600a8361416b565b915061483f82614800565b602082019050919050565b5f6020820190508181035f83015261486181614828565b9050919050565b7f4f6e6c79205250000000000000000000000000000000000000000000000000005f82015250565b5f61489c60078361416b565b91506148a782614868565b602082019050919050565b5f6020820190508181035f8301526148c981614890565b9050919050565b5f6080820190508181035f8301526148e881876141a3565b905081810360208301526148fc81866141a3565b9050818103604083015261491081856141a3565b905061491f606083018461477d565b95945050505050565b5f6080828403121561493d5761493c613c74565b5b614947608061399e565b90505f82015167ffffffffffffffff81111561496657614965613c78565b5b61497284828501614341565b5f83015250602082015167ffffffffffffffff81111561499557614994613c78565b5b6149a184828501614341565b602083015250604082015167ffffffffffffffff8111156149c5576149c4613c78565b5b6149d184828501614341565b60408301525060606149e5848285016144a8565b60608301525092915050565b5f60208284031215614a0657614a05613920565b5b5f82015167ffffffffffffffff811115614a2357614a22613924565b5b614a2f84828501614928565b91505092915050565b5f6080820190508181035f830152614a5081876141a3565b9050614a5f60208301866138ef565b614a6c604083018561477d565b614a79606083018461477d565b95945050505050565b7f4d6564696174696f6e20616464726573730000000000000000000000000000005f82015250565b5f614ab660118361416b565b9150614ac182614a82565b602082019050919050565b5f6020820190508181035f830152614ae381614aaa565b9050919050565b5f82825260208201905092915050565b5f614b0482614161565b614b0e8185614aea565b9350614b1e81856020860161417b565b614b2781613930565b840191505092915050565b614b3b816138de565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f614b758383614b32565b60208301905092915050565b5f602082019050919050565b5f614b9782614b41565b614ba18185614b4b565b9350614bac83614b5b565b805f5b83811015614bdc578151614bc38882614b6a565b9750614bce83614b81565b925050600181019050614baf565b5085935050505092915050565b5f608083015f830151614bfe5f860182614b32565b506020830151614c116020860182614b32565b506040830151614c246040860182614b32565b5060608301518482036060860152614c3c8282614b8d565b9150508091505092915050565b604082015f820151614c5d5f85018261401a565b506020820151614c70602085018261401a565b50505050565b61010082015f820151614c8b5f850182614c49565b506020820151614c9e6040850182614c49565b506040820151614cb16080850182614c49565b506060820151614cc460c0850182614c49565b50505050565b608082015f820151614cde5f85018261401a565b506020820151614cf1602085018261401a565b506040820151614d04604085018261401a565b506060820151614d17606085018261401a565b50505050565b5f6101c083015f8301518482035f860152614d388282614afa565b91505060208301518482036020860152614d528282614be9565b9150506040830151614d676040860182614c76565b506060830151614d7b610140860182614cca565b508091505092915050565b5f6020820190508181035f830152614d9e8184614d1d565b905092915050565b7f55736572732061646472657373000000000000000000000000000000000000005f82015250565b5f614dda600d8361416b565b9150614de582614da6565b602082019050919050565b5f6020820190508181035f830152614e0781614dce565b9050919050565b600b8110614e1a575f80fd5b50565b5f81519050614e2b81614e0e565b92915050565b5f6101c08284031215614e4757614e46613c74565b5b614e526101c061399e565b90505f614e6184828501614e1d565b5f830152506020614e74848285016144a8565b6020830152506040614e88848285016144a8565b6040830152506060614e9c848285016144a8565b6060830152506080614eb0848285016144a8565b60808301525060a0614ec4848285016144a8565b60a08301525060c0614ed8848285016144a8565b60c08301525060e0614eec848285016144a8565b60e083015250610100614f01848285016144a8565b61010083015250610120614f17848285016144a8565b61012083015250610140614f2d848285016144a8565b61014083015250610160614f43848285016144a8565b61016083015250610180614f59848285016144a8565b610180830152506101a0614f6f848285016144a8565b6101a08301525092915050565b5f6101c08284031215614f9257614f91613920565b5b5f614f9f84828501614e31565b91505092915050565b7f4e6f7420636f72726563742073746174650000000000000000000000000000005f82015250565b5f614fdc60118361416b565b9150614fe782614fa8565b602082019050919050565b5f6020820190508181035f83015261500981614fd0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61504782613aab565b915061505283613aab565b925082820190508082111561506a57615069615010565b5b92915050565b7f4e6f742074696d6564206f7574000000000000000000000000000000000000005f82015250565b5f6150a4600d8361416b565b91506150af82615070565b602082019050919050565b5f6020820190508181035f8301526150d181615098565b9050919050565b5f60a0820190508181035f8301526150f081886141a3565b90506150ff60208301876138ef565b61510c60408301866138ef565b615119606083018561477d565b615126608083018461477d565b9695505050505050565b7f53746f72616765206164647265737300000000000000000000000000000000005f82015250565b5f615164600f8361416b565b915061516f82615130565b602082019050919050565b5f6020820190508181035f83015261519181615158565b9050919050565b7f5061796d656e74732061646472657373000000000000000000000000000000005f82015250565b5f6151cc60108361416b565b91506151d782615198565b602082019050919050565b5f6020820190508181035f8301526151f9816151c0565b9050919050565b7f4f6e6c79204a43206f72205250000000000000000000000000000000000000005f82015250565b5f615234600d8361416b565b915061523f82615200565b602082019050919050565b5f6020820190508181035f83015261526181615228565b9050919050565b5f6060820190508181035f83015261528081866141a3565b905061528f60208301856138ef565b61529c604083018461477d565b949350505050565b7f4f6e6c79206d6564696174696f6e0000000000000000000000000000000000005f82015250565b5f6152d8600e8361416b565b91506152e3826152a4565b602082019050919050565b5f6020820190508181035f830152615305816152cc565b9050919050565b7f43616e6e6f74206d6564696174650000000000000000000000000000000000005f82015250565b5f615340600e8361416b565b915061534b8261530c565b602082019050919050565b5f6020820190508181035f83015261536d81615334565b9050919050565b5f60c0820190508181035f83015261538c81896141a3565b905061539b60208301886138ef565b6153a860408301876138ef565b6153b5606083018661477d565b6153c2608083018561477d565b6153cf60a083018461477d565b979650505050505050565b7f4a6f6243726561746f72206164647265737300000000000000000000000000005f82015250565b5f61540e60128361416b565b9150615419826153da565b602082019050919050565b5f6020820190508181035f83015261543b81615402565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f61549c602e8361416b565b91506154a782615442565b604082019050919050565b5f6020820190508181035f8301526154c981615490565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f6155086155036154fe846154d0565b6154e5565b6154d9565b9050919050565b615518816154ee565b82525050565b5f6020820190506155315f83018461550f565b92915050565b7f4f6e6c79205250206f72204a43000000000000000000000000000000000000005f82015250565b5f61556b600d8361416b565b915061557682615537565b602082019050919050565b5f6020820190508181035f8301526155988161555f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6155f960268361416b565b91506156048261559f565b604082019050919050565b5f6020820190508181035f830152615626816155ed565b9050919050565b5f608083015f8301516156425f860182614b32565b5060208301516156556020860182614b32565b5060408301516156686040860182614b32565b50606083015184820360608601526156808282614b8d565b9150508091505092915050565b61010082015f8201516156a25f850182614c49565b5060208201516156b56040850182614c49565b5060408201516156c86080850182614c49565b5060608201516156db60c0850182614c49565b50505050565b608082015f8201516156f55f85018261401a565b506020820151615708602085018261401a565b50604082015161571b604085018261401a565b50606082015161572e606085018261401a565b50505050565b5f6101c0820190508181035f83015261574d81876141a3565b90508181036020830152615761818661562d565b9050615770604083018561568d565b61577e6101408301846156e1565b95945050505050565b7f4f6e6c79205250202f204a4300000000000000000000000000000000000000005f82015250565b5f6157bb600c8361416b565b91506157c682615787565b602082019050919050565b5f6020820190508181035f8301526157e8816157af565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61582360208361416b565b915061582e826157ef565b602082019050919050565b5f6020820190508181035f83015261585081615817565b9050919050565b7f526573756c7473436865636b65640000000000000000000000000000000000005f82015250565b5f61588b600e8361416b565b915061589682615857565b602082019050919050565b5f6020820190508181035f8301526158b88161587f565b905091905056fea264697066735822122033e3812b7fb876adb3486c096fd2e7a47d29fedf12bcc5a37c82b1d46f3ebd8164736f6c63430008150033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addResult(string,string,string,uint256)": {
        "notice": "Results"
      },
      "agree(string,(address,address,address,address[]),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),(uint256,uint256,uint256,uint256))": {
        "notice": "Agreements"
      },
      "initialize(address,address,address,address,address,address)": {
        "notice": "Init"
      },
      "mediationAcceptResult(string)": {
        "notice": "Mediation"
      },
      "timeoutAgree(string)": {
        "notice": "Timeouts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 680,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 138,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2452,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "storageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2454,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "userAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2456,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "paymentsAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2458,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "mediationAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2460,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "jobCreatorAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2462,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "powAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2465,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "storageContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILilypadStorage)2337"
      },
      {
        "astId": 2468,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "paymentsContract",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILilypadPayments)2175"
      },
      {
        "astId": 2471,
        "contract": "contracts/LilypadController.sol:LilypadController",
        "label": "mediationContract",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ILilypadMediationHandler)2010"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILilypadMediationHandler)2010": {
        "encoding": "inplace",
        "label": "contract ILilypadMediationHandler",
        "numberOfBytes": "20"
      },
      "t_contract(ILilypadPayments)2175": {
        "encoding": "inplace",
        "label": "contract ILilypadPayments",
        "numberOfBytes": "20"
      },
      "t_contract(ILilypadStorage)2337": {
        "encoding": "inplace",
        "label": "contract ILilypadStorage",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}