{
  "address": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "GenerateChallenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NewPowRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "complete_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "ValidPOWSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "calculate_difficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "change_difficulty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkTimeWindow",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        }
      ],
      "name": "generateChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getMinerPosSubmissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "nodeId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start_timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "complete_timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challenge",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "difficulty",
              "type": "uint256"
            }
          ],
          "internalType": "struct LilypadPow.POWSubmission[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMiners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastChallenges",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "powSubmissions",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "complete_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nodeId",
          "type": "string"
        }
      ],
      "name": "submitWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerNewPowRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "window_end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "window_start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39821fb47af12bd7b314552cd279d7eb23a43a76a0de9251592af782d78be83c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
    "transactionIndex": 1,
    "gasUsed": "39592954",
    "logsBloom": "0x
    "blockHash": "0x20cb89b4eb5022930c405d574eb23b67f77ef00125aa94dfd6d26659a8eda4c1",
    "transactionHash": "0x39821fb47af12bd7b314552cd279d7eb23a43a76a0de9251592af782d78be83c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 62,
        "transactionHash": "0x39821fb47af12bd7b314552cd279d7eb23a43a76a0de9251592af782d78be83c",
        "address": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x20cb89b4eb5022930c405d574eb23b67f77ef00125aa94dfd6d26659a8eda4c1"
      }
    ],
    "blockNumber": 62,
    "cumulativeGasUsed": "39592954",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "d001b26014f54dfb67c73652aa124014",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"GenerateChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewPowRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"complete_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"ValidPOWSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculate_difficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"change_difficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTimeWindow\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"}],\"name\":\"generateChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMinerPosSubmissions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complete_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"internalType\":\"struct LilypadPow.POWSubmission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastChallenges\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powSubmissions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complete_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"}],\"name\":\"submitWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerNewPowRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize()\":{\"notice\":\"Init\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LilypadPow.sol\":\"LilypadPow\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LilypadPow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract LilypadPow is Ownable, Initializable {\\n    struct POWSubmission {\\n        address walletAddress;\\n        string nodeId;\\n        uint256 nonce;\\n        uint256 start_timestamp;\\n        uint256 complete_timestamp; //used to estimate hashrate of this submission\\n        bytes32 challenge; //record this to provent user never change challenge\\n        uint256 difficulty;\\n    }\\n\\n    struct Challenge {\\n        bytes32 challenge;\\n        uint256 difficulty;\\n        string nodeId;\\n        uint256 timestamp;\\n    }\\n\\n    // todo  difficulty may need to adjust in test\\n    // this difficulty was calculate with this tool https://github.com/hunjixin/pow-tool/tree/main/difficulty\\n    // Theoretically  A machine with a hash rate of 8M has a probability of no more than 0.01% of not finding a nonce that meets the difficulty within 20 blocks.\\n    // However, this issue has not been well validated in practice. it can solve nonce within one minute most of the time.\\n    uint256 public targetDifficulty =\\n        555460709263765739036470010701196062214039696708679004195670928130048;\\n    mapping(address => POWSubmission[]) public powSubmissions;\\n    address[] public miners;\\n\\n    mapping(address => Challenge) public lastChallenges;\\n    uint256 public validProofs;\\n    uint256 public startTime;\\n\\n    uint256 public window_start;\\n    uint256 public window_end;\\n    /**\\n     * Init\\n     */\\n\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n    function initialize() public initializer {}\\n\\n    function getMiners() public view returns (address[] memory) {\\n        return miners;\\n    }\\n\\n   function getMinerPosSubmissions(address addr) public view returns (POWSubmission[] memory) {\\n        return powSubmissions[addr];\\n   }\\n\\n    // generateChallenge gen a byte32 value as challenge value, Sc store this one for verify\\n    function generateChallenge(string calldata nodeId) external {\\n        checkTimeWindow();\\n\\n        bytes32 challenge = keccak256(\\n            abi.encodePacked(block.timestamp, window_start, msg.sender, nodeId)\\n        );\\n\\n        uint256 difficulty = calculate_difficulty();\\n        lastChallenges[msg.sender] = Challenge(\\n            challenge,\\n            difficulty,\\n            nodeId,\\n            block.timestamp\\n        );\\n        emit GenerateChallenge(challenge, difficulty);\\n    }\\n\\n    function change_difficulty(uint256 difficulty) public onlyOwner {\\n        targetDifficulty  = difficulty;\\n    }\\n\\n    function calculate_difficulty() public view returns (uint256) {\\n        uint256 percentChange = 90 + (block.prevrandao % 21);\\n        return (targetDifficulty * percentChange) / 100;\\n    }\\n\\n    // submitWork miner submint a nonce value, sc check the difficulty and emit a valid pow event when success\\n    function submitWork(uint256 nonce, string calldata nodeId) external {\\n        checkTimeWindow();\\n\\n        Challenge memory lastChallenge = lastChallenges[msg.sender];\\n        bytes32 challenge = keccak256(\\n            abi.encodePacked(\\n                lastChallenge.timestamp,\\n                window_start,\\n                msg.sender,\\n                nodeId\\n            )\\n        );\\n\\n        require(\\n            lastChallenge.challenge == challenge,\\n            \\\"Work submit not compatable with challenge\\\"\\n        );\\n\\n        bytes32 hash = keccak256(abi.encodePacked(challenge, nonce));\\n        require(\\n            uint256(hash) < lastChallenge.difficulty,\\n            \\\"Work does not meet difficulty target\\\"\\n        );\\n\\n        validProofs++;\\n\\n        POWSubmission[] storage posSubmissions = powSubmissions[msg.sender];\\n        if (posSubmissions.length == 0) {\\n            miners.push(msg.sender);\\n        }\\n        posSubmissions.push(\\n            POWSubmission(\\n                msg.sender,\\n                nodeId,\\n                nonce,\\n                lastChallenge.timestamp,\\n                block.timestamp,\\n                lastChallenge.challenge,\\n                lastChallenge.difficulty\\n            )\\n        );\\n\\n        //clean last challenge to submit the same proof\\n        lastChallenges[msg.sender] = Challenge(0, 0, \\\"\\\", 0);\\n        emit ValidPOWSubmitted(\\n            msg.sender,\\n            nodeId,\\n            nonce,\\n            lastChallenge.timestamp,\\n            block.timestamp,\\n            lastChallenge.challenge,\\n            lastChallenge.difficulty\\n        );\\n    }\\n\\n    function triggerNewPowRound() external onlyOwner {\\n        window_start = block.number;\\n        window_end = block.number + 30; //todo arbitary value , need to discuss\\n        emit NewPowRound();\\n    }\\n\\n    function checkTimeWindow() public view {\\n        require(block.number < window_end, \\\"proof windows has closed\\\");\\n    }\\n\\n    event ValidPOWSubmitted(\\n        address walletAddress,\\n        string nodeId,\\n        uint256 nonce,\\n        uint256 start_timestamp,\\n        uint256 complete_timestamp,\\n        bytes32 challenge,\\n        uint256 difficulty\\n    );\\n    event GenerateChallenge(bytes32 challenge, uint256 difficulty);\\n    event NewPowRound();\\n}\",\"keccak256\":\"0x8f1c19613a6f955905f1ccbaf5e21cfc93801841808f825648988ff5024f9d01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b506004361061012a575f3560e01c80638da5cb5b116100ab578063b681f2fd1161006f578063b681f2fd14610303578063bfb660de1461030d578063da8accf914610317578063e0d152af14610333578063f2fde38b146103635761012a565b80638da5cb5b14610271578063a738bf8f1461028f578063ab098945146102ad578063adf0047c146102c9578063b28d87ea146102e55761012a565b80636189f3ac116100f25780636189f3ac146101ee578063715018a61461022157806378e979251461022b5780638129fc1c146102495780638b2db16e146102535761012a565b80631633da6e1461012e5780632d68c3971461014c578063331bade11461016a5780634bbe05e41461018857806354bfd759146101be575b5f80fd5b61013661037f565b604051610143919061133e565b60405180910390f35b61015461040a565b6040516101619190611376565b60405180910390f35b610172610447565b60405161017f9190611376565b60405180910390f35b6101a2600480360381019061019d91906113eb565b61044d565b6040516101b597969594939291906114da565b60405180910390f35b6101d860048036038101906101d3919061154e565b61054a565b6040516101e59190611733565b60405180910390f35b6102086004803603810190610203919061154e565b6106f9565b6040516102189493929190611753565b60405180910390f35b6102296107ab565b005b6102336107be565b6040516102409190611376565b60405180910390f35b6102516107c4565b005b61025b6108f9565b6040516102689190611376565b60405180910390f35b6102796108ff565b604051610286919061179d565b60405180910390f35b610297610926565b6040516102a49190611376565b60405180910390f35b6102c760048036038101906102c29190611817565b61092c565b005b6102e360048036038101906102de9190611862565b610a88565b005b6102ed610a9a565b6040516102fa9190611376565b60405180910390f35b61030b610aa0565b005b610315610af0565b005b610331600480360381019061032c919061188d565b610b36565b005b61034d60048036038101906103489190611862565b611032565b60405161035a919061179d565b60405180910390f35b61037d6004803603810190610378919061154e565b61106d565b005b6060600380548060200260200160405190810160405280929190818152602001828054801561040057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103b7575b5050505050905090565b5f806015446104199190611917565b605a6104259190611974565b905060648160015461043791906119a7565b61044191906119e8565b91505090565b60075481565b6002602052815f5260405f208181548110610466575f80fd5b905f5260205f2090600702015f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546104ab90611a45565b80601f01602080910402602001604051908101604052809291908181526020018280546104d790611a45565b80156105225780601f106104f957610100808354040283529160200191610522565b820191905f5260205f20905b81548152906001019060200180831161050557829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154905087565b606060025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156106ee578382905f5260205f2090600702016040518060e00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461062d90611a45565b80601f016020809104026020016040519081016040528092919081815260200182805461065990611a45565b80156106a45780601f1061067b576101008083540402835291602001916106a4565b820191905f5260205f20905b81548152906001019060200180831161068757829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050815260200190600101906105a8565b505050509050919050565b6004602052805f5260405f205f91509050805f01549080600101549080600201805461072490611a45565b80601f016020809104026020016040519081016040528092919081815260200182805461075090611a45565b801561079b5780601f106107725761010080835404028352916020019161079b565b820191905f5260205f20905b81548152906001019060200180831161077e57829003601f168201915b5050505050908060030154905084565b6107b36110ef565b6107bc5f61116d565b565b60065481565b5f8060159054906101000a900460ff161590508080156107f5575060015f60149054906101000a900460ff1660ff16105b8061082357506108043061122e565b158015610822575060015f60149054906101000a900460ff1660ff16145b5b610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990611ae5565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff160217905550801561089e5760015f60156101000a81548160ff0219169083151502179055505b80156108f6575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516108ed9190611b51565b60405180910390a15b50565b60015481565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60085481565b610934610af0565b5f42600754338585604051602001610950959493929190611c0b565b6040516020818303038152906040528051906020012090505f61097161040a565b9050604051806080016040528083815260200182815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020014281525060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0155602082015181600101556040820151816002019081610a3b9190611e17565b50606082015181600301559050507f496186a9d930bac0744acdcd1d0c054b18283eecbe99d30bda98102d3d06b8ef8282604051610a7a929190611ee6565b60405180910390a150505050565b610a906110ef565b8060018190555050565b60055481565b610aa86110ef565b43600781905550601e43610abc9190611974565b6008819055507f10cc99616aca050d810fd487c95f968e516d0fa25318530ed50753153d060a1e60405160405180910390a1565b6008544310610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b90611f57565b60405180910390fd5b565b610b3e610af0565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282018054610baa90611a45565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd690611a45565b8015610c215780601f10610bf857610100808354040283529160200191610c21565b820191905f5260205f20905b815481529060010190602001808311610c0457829003601f168201915b5050505050815260200160038201548152505090505f8160600151600754338686604051602001610c56959493929190611c0b565b60405160208183030381529060405280519060200120905080825f015114610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90611fe5565b60405180910390fd5b5f8186604051602001610cc7929190612023565b6040516020818303038152906040528051906020012090508260200151815f1c10610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e906120be565b60405180910390fd5b60055f815480929190610d39906120dc565b91905055505f60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f818054905003610dea57600333908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b806040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200189815260200186606001518152602001428152602001865f015181526020018660200151815250908060018154018082558091505060019003905f5260205f2090600702015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610f019190611e17565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505060405180608001604052805f801b81526020015f815260200160405180602001604052805f81525081526020015f81525060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0155602082015181600101556040820151816002019081610fcb9190611e17565b50606082015181600301559050507f172b7d59e60446d8dfc98985344fb883c871ef150b1db4d1592bcb67699037323387878a8860600151428a5f01518b6020015160405161102198979695949392919061214f565b60405180910390a150505050505050565b60038181548110611041575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110756110ef565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110da90612235565b60405180910390fd5b6110ec8161116d565b50565b6110f7611250565b73ffffffffffffffffffffffffffffffffffffffff166111156108ff565b73ffffffffffffffffffffffffffffffffffffffff161461116b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111629061229d565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f33905090565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6112a982611280565b9050919050565b6112b98161129f565b82525050565b5f6112ca83836112b0565b60208301905092915050565b5f602082019050919050565b5f6112ec82611257565b6112f68185611261565b935061130183611271565b805f5b8381101561133157815161131888826112bf565b9750611323836112d6565b925050600181019050611304565b5085935050505092915050565b5f6020820190508181035f83015261135681846112e2565b905092915050565b5f819050919050565b6113708161135e565b82525050565b5f6020820190506113895f830184611367565b92915050565b5f80fd5b5f80fd5b6113a08161129f565b81146113aa575f80fd5b50565b5f813590506113bb81611397565b92915050565b6113ca8161135e565b81146113d4575f80fd5b50565b5f813590506113e5816113c1565b92915050565b5f80604083850312156114015761140061138f565b5b5f61140e858286016113ad565b925050602061141f858286016113d7565b9150509250929050565b6114328161129f565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561146f578082015181840152602081019050611454565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61149482611438565b61149e8185611442565b93506114ae818560208601611452565b6114b78161147a565b840191505092915050565b5f819050919050565b6114d4816114c2565b82525050565b5f60e0820190506114ed5f83018a611429565b81810360208301526114ff818961148a565b905061150e6040830188611367565b61151b6060830187611367565b6115286080830186611367565b61153560a08301856114cb565b61154260c0830184611367565b98975050505050505050565b5f602082840312156115635761156261138f565b5b5f611570848285016113ad565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f6115bc82611438565b6115c681856115a2565b93506115d6818560208601611452565b6115df8161147a565b840191505092915050565b6115f38161135e565b82525050565b611602816114c2565b82525050565b5f60e083015f83015161161d5f8601826112b0565b506020830151848203602086015261163582826115b2565b915050604083015161164a60408601826115ea565b50606083015161165d60608601826115ea565b50608083015161167060808601826115ea565b5060a083015161168360a08601826115f9565b5060c083015161169660c08601826115ea565b508091505092915050565b5f6116ac8383611608565b905092915050565b5f602082019050919050565b5f6116ca82611579565b6116d48185611583565b9350836020820285016116e685611593565b805f5b85811015611721578484038952815161170285826116a1565b945061170d836116b4565b925060208a019950506001810190506116e9565b50829750879550505050505092915050565b5f6020820190508181035f83015261174b81846116c0565b905092915050565b5f6080820190506117665f8301876114cb565b6117736020830186611367565b8181036040830152611785818561148a565b90506117946060830184611367565b95945050505050565b5f6020820190506117b05f830184611429565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126117d7576117d66117b6565b5b8235905067ffffffffffffffff8111156117f4576117f36117ba565b5b6020830191508360018202830111156118105761180f6117be565b5b9250929050565b5f806020838503121561182d5761182c61138f565b5b5f83013567ffffffffffffffff81111561184a57611849611393565b5b611856858286016117c2565b92509250509250929050565b5f602082840312156118775761187661138f565b5b5f611884848285016113d7565b91505092915050565b5f805f604084860312156118a4576118a361138f565b5b5f6118b1868287016113d7565b935050602084013567ffffffffffffffff8111156118d2576118d1611393565b5b6118de868287016117c2565b92509250509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6119218261135e565b915061192c8361135e565b92508261193c5761193b6118ea565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61197e8261135e565b91506119898361135e565b92508282019050808211156119a1576119a0611947565b5b92915050565b5f6119b18261135e565b91506119bc8361135e565b92508282026119ca8161135e565b915082820484148315176119e1576119e0611947565b5b5092915050565b5f6119f28261135e565b91506119fd8361135e565b925082611a0d57611a0c6118ea565b5b828204905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611a5c57607f821691505b602082108103611a6f57611a6e611a18565b5b50919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f611acf602e83611442565b9150611ada82611a75565b604082019050919050565b5f6020820190508181035f830152611afc81611ac3565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f611b3b611b36611b3184611b03565b611b18565b611b0c565b9050919050565b611b4b81611b21565b82525050565b5f602082019050611b645f830184611b42565b92915050565b5f819050919050565b611b84611b7f8261135e565b611b6a565b82525050565b5f8160601b9050919050565b5f611ba082611b8a565b9050919050565b5f611bb182611b96565b9050919050565b611bc9611bc48261129f565b611ba7565b82525050565b5f81905092915050565b828183375f83830152505050565b5f611bf28385611bcf565b9350611bff838584611bd9565b82840190509392505050565b5f611c168288611b73565b602082019150611c268287611b73565b602082019150611c368286611bb8565b601482019150611c47828486611be7565b91508190509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611cdf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ca4565b611ce98683611ca4565b95508019841693508086168417925050509392505050565b5f611d1b611d16611d118461135e565b611b18565b61135e565b9050919050565b5f819050919050565b611d3483611d01565b611d48611d4082611d22565b848454611cb0565b825550505050565b5f90565b611d5c611d50565b611d67818484611d2b565b505050565b5b81811015611d8a57611d7f5f82611d54565b600181019050611d6d565b5050565b601f821115611dcf57611da081611c83565b611da984611c95565b81016020851015611db8578190505b611dcc611dc485611c95565b830182611d6c565b50505b505050565b5f82821c905092915050565b5f611def5f1984600802611dd4565b1980831691505092915050565b5f611e078383611de0565b9150826002028217905092915050565b611e2082611438565b67ffffffffffffffff811115611e3957611e38611c56565b5b611e438254611a45565b611e4e828285611d8e565b5f60209050601f831160018114611e7f575f8415611e6d578287015190505b611e778582611dfc565b865550611ede565b601f198416611e8d86611c83565b5f5b82811015611eb457848901518255600182019150602085019450602081019050611e8f565b86831015611ed15784890151611ecd601f891682611de0565b8355505b6001600288020188555050505b505050505050565b5f604082019050611ef95f8301856114cb565b611f066020830184611367565b9392505050565b7f70726f6f662077696e646f77732068617320636c6f73656400000000000000005f82015250565b5f611f41601883611442565b9150611f4c82611f0d565b602082019050919050565b5f6020820190508181035f830152611f6e81611f35565b9050919050565b7f576f726b207375626d6974206e6f7420636f6d70617461626c652077697468205f8201527f6368616c6c656e67650000000000000000000000000000000000000000000000602082015250565b5f611fcf602983611442565b9150611fda82611f75565b604082019050919050565b5f6020820190508181035f830152611ffc81611fc3565b9050919050565b5f819050919050565b61201d612018826114c2565b612003565b82525050565b5f61202e828561200c565b60208201915061203e8284611b73565b6020820191508190509392505050565b7f576f726b20646f6573206e6f74206d65657420646966666963756c74792074615f8201527f7267657400000000000000000000000000000000000000000000000000000000602082015250565b5f6120a8602483611442565b91506120b38261204e565b604082019050919050565b5f6020820190508181035f8301526120d58161209c565b9050919050565b5f6120e68261135e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361211857612117611947565b5b600182019050919050565b5f61212e8385611442565b935061213b838584611bd9565b6121448361147a565b840190509392505050565b5f60e0820190506121625f83018b611429565b818103602083015261217581898b612123565b90506121846040830188611367565b6121916060830187611367565b61219e6080830186611367565b6121ab60a08301856114cb565b6121b860c0830184611367565b9998505050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61221f602683611442565b915061222a826121c5565b604082019050919050565b5f6020820190508181035f83015261224c81612213565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612287602083611442565b915061229282612253565b602082019050919050565b5f6020820190508181035f8301526122b48161227b565b905091905056fea264697066735822122081be4ff4b6005e45b1e86acd2e48c7cb892cea940a56bb4597c1f0180378f6b264736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize()": {
        "notice": "Init"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 668,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "targetDifficulty",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 674,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "powSubmissions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(POWSubmission)656_storage)dyn_storage)"
      },
      {
        "astId": 677,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "miners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 682,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "lastChallenges",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Challenge)665_storage)"
      },
      {
        "astId": 684,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "validProofs",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 686,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "startTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 688,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "window_start",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 690,
        "contract": "contracts/LilypadPow.sol:LilypadPow",
        "label": "window_end",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(POWSubmission)656_storage)dyn_storage": {
        "base": "t_struct(POWSubmission)656_storage",
        "encoding": "dynamic_array",
        "label": "struct LilypadPow.POWSubmission[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(POWSubmission)656_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LilypadPow.POWSubmission[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(POWSubmission)656_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Challenge)665_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LilypadPow.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)665_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Challenge)665_storage": {
        "encoding": "inplace",
        "label": "struct LilypadPow.Challenge",
        "members": [
          {
            "astId": 658,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "challenge",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 660,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "difficulty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 662,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "nodeId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 664,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(POWSubmission)656_storage": {
        "encoding": "inplace",
        "label": "struct LilypadPow.POWSubmission",
        "members": [
          {
            "astId": 643,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "walletAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 645,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "nodeId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 647,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 649,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "start_timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 651,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "complete_timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 653,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "challenge",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 655,
            "contract": "contracts/LilypadPow.sol:LilypadPow",
            "label": "difficulty",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}