{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ControllerOwnable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// as well as being ownable (i.e. our admin wallet)\n// this contract has a modifier called onlyController\n// it works the same way as Ownable but only the Owner\n// can change the controller address so it gives us a way of\n// re-pointing contracts if needed\ncontract ControllerOwnable is Ownable {\n\n  // the address of the controller that is allowed to call functions\n  address private controllerAddress;\n\n  // used to \"freeze\" the controller address - even the admin cannot\n  // change it from this point onwards\n  bool private canChangeControllerAddress = true;\n\n  modifier onlyController() {\n    _checkControllerAccess();\n    _;\n  }\n\n  function _checkControllerAccess() internal view virtual returns (bool) {\n    require(controllerAddress != address(0), \"ControllerOwnable: Controller address must be defined\");\n    require(_msgSender() == controllerAddress, \"ControllerOwnable: Only the controller can call this method\");\n    return true;\n  }\n\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\n    require(_controllerAddress != address(0), \"ControllerOwnable: Controller address must be defined\");\n    require(canChangeControllerAddress, \"ControllerOwnable: canChangeControllerAddress is disabled\");\n    controllerAddress = _controllerAddress;\n  }\n\n  function getControllerAddress() public view returns (address) {\n    return controllerAddress;\n  }\n\n  function disableChangeControllerAddress() public onlyOwner {\n    canChangeControllerAddress = false;\n  }\n}\n"
    },
    "contracts/LilypadStorage.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./SharedStructs.sol\";\nimport \"./ControllerOwnable.sol\";\n\ncontract LilypadStorage is ControllerOwnable, Initializable {\n\n  // the address that is allowed to be the msg.sender for the payment functions\n  address private controllerAddress;\n\n  // used to cut off upgrades for the remote contract\n  bool private canChangeControllerAddress = true;\n\n  // a map of deal id -> deal\n  mapping(string => SharedStructs.Deal) private deals;\n\n  // a map of party -> dealid[]\n  mapping(address => string[]) private dealsForParty;\n\n  // a map of deal id -> agreement\n  mapping(string => SharedStructs.Agreement) private agreements;\n\n  // a map of deal id -> result\n  mapping(string => SharedStructs.Result) private results;\n\n  // a map of deal id -> result\n  mapping(string => SharedStructs.Result) private mediations;\n\n  event Deal(\n    string dealId,\n    address solver,\n    address jobCreator,\n    address resourceProvider,\n    address[] mediators\n  );\n\n  event DealStateChange(\n    string dealId,\n    SharedStructs.AgreementState state\n  );\n\n  /**\n   * Init\n   */\n\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\n  function initialize() public initializer {\n    \n  }\n\n  /**\n   * Deals\n   */\n\n  function getDeal(\n    string memory dealId\n  ) public view returns (SharedStructs.Deal memory) {\n    return deals[dealId];\n  }\n\n  function getDealsForParty(\n    address party\n  ) public view returns (string[] memory) {\n    return dealsForParty[party];\n  }\n\n  function checkDealMembers(\n    SharedStructs.DealMembers memory members\n  ) private pure {\n    require(members.resourceProvider != address(0), \"RP missing\");\n    require(members.jobCreator != address(0), \"JC missing\");\n    require(members.solver != address(0), \"Solver missing\");\n    require(members.mediators.length > 0, \"Mediators <= 0\");\n    require(members.resourceProvider != members.jobCreator, \"RP / JC same\");\n  }\n\n  function checkTimeouts(\n    SharedStructs.DealTimeouts memory timeouts\n  ) private pure {\n    // the cost of the agree timeout cannot be > 0 because the whole point is\n    // one party has not paid anything into the contract is what has timed out\n    require(timeouts.agree.collateral == 0, \"Agree deposit must be 0\");\n    // the same is true of the mediation timeout - it's cost cannot be zero\n    require(timeouts.mediateResults.collateral == 0, \"Mediate deposit must be 0\");\n  }\n\n  function compareDealMembers(\n    SharedStructs.DealMembers memory members1,\n    SharedStructs.DealMembers memory members2\n  ) private pure {\n    require(members1.resourceProvider == members2.resourceProvider, \"RP\");\n    require(members1.jobCreator == members2.jobCreator, \"JC\");\n    require(members1.solver == members2.solver, \"Solver\");\n    require(members1.mediators.length == members2.mediators.length, \"Mediators\");\n    for (uint256 i = 0; i < members1.mediators.length; i++) {\n      require(members1.mediators[i] == members2.mediators[i], \"Mediator\");\n    }\n  }\n\n  function compareDealTimeout(\n    SharedStructs.DealTimeout memory timeout1,\n    SharedStructs.DealTimeout memory timeout2\n  ) private pure {\n    require(timeout1.timeout == timeout2.timeout, \"Timeout\");\n    require(timeout1.collateral == timeout2.collateral, \"Collateral\");\n  }\n  \n  function compareDealTimeouts(\n    SharedStructs.DealTimeouts memory timeouts1,\n    SharedStructs.DealTimeouts memory timeouts2\n  ) private pure {\n    compareDealTimeout(timeouts1.agree, timeouts2.agree);\n    compareDealTimeout(timeouts1.submitResults, timeouts2.submitResults);\n    compareDealTimeout(timeouts1.judgeResults, timeouts2.judgeResults);\n    compareDealTimeout(timeouts1.mediateResults, timeouts2.mediateResults);\n  }\n\n  function compareDealPricing(\n    SharedStructs.DealPricing memory pricing1,\n    SharedStructs.DealPricing memory pricing2\n  ) private pure {\n    require(pricing1.instructionPrice == pricing2.instructionPrice, \"Price\");\n    require(pricing1.paymentCollateral == pricing2.paymentCollateral, \"Payment\");\n    require(pricing1.resultsCollateralMultiple == pricing2.resultsCollateralMultiple, \"Results\");\n    require(pricing1.mediationFee == pricing2.mediationFee, \"Mediation\");\n  }\n\n  function ensureDeal(\n    string memory dealId,\n    SharedStructs.DealMembers memory members,\n    SharedStructs.DealTimeouts memory timeouts,\n    SharedStructs.DealPricing memory pricing\n  ) public onlyController returns (SharedStructs.Deal memory) {\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \"DealNegotiating\");\n    checkDealMembers(members);\n    checkTimeouts(timeouts);\n    if(hasDeal(dealId)) {\n      SharedStructs.Deal memory existingDeal = getDeal(dealId);\n      compareDealMembers(existingDeal.members, members);\n      compareDealTimeouts(existingDeal.timeouts, timeouts);\n      compareDealPricing(existingDeal.pricing, pricing);\n    }\n    else {\n      deals[dealId] = SharedStructs.Deal(\n        dealId,\n        members,\n        timeouts,\n        pricing\n      );\n      dealsForParty[members.resourceProvider].push(dealId);\n      dealsForParty[members.jobCreator].push(dealId);\n\n      emit Deal(dealId, members.solver, members.jobCreator, members.resourceProvider, members.mediators);\n    }\n    return deals[dealId];\n  }\n\n  /**\n   * Agreements\n   */\n  \n  function getAgreement(\n    string memory dealId\n  ) public view returns (SharedStructs.Agreement memory) {\n    return agreements[dealId];\n  }\n\n  function agreeResourceProvider(\n    string memory dealId\n  ) public onlyController returns (SharedStructs.Agreement memory) {\n    require(hasDeal(dealId), \"Deal does not exist\");\n    require(agreements[dealId].resourceProviderAgreedAt == 0, \"RP has already agreed\");\n    agreements[dealId].resourceProviderAgreedAt = block.timestamp;\n    _maybeAgreeDeal(dealId);\n    return agreements[dealId];\n  }\n\n  function agreeJobCreator(\n    string memory dealId\n  ) public onlyController returns (SharedStructs.Agreement memory) {\n    require(hasDeal(dealId), \"Deal does not exist\");\n    require(agreements[dealId].jobCreatorAgreedAt == 0, \"JC has already agreed\");\n    agreements[dealId].jobCreatorAgreedAt = block.timestamp;\n    _maybeAgreeDeal(dealId);\n    return agreements[dealId];\n  }\n\n  /**\n   * Post Results\n   */\n\n  function getResult(\n    string memory dealId\n  ) public view returns (SharedStructs.Result memory) {\n    return results[dealId];\n  }\n\n  function addResult(\n    string memory dealId,\n    string memory resultsId,\n    string memory dataId,\n    uint256 instructionCount\n  ) public onlyController returns (SharedStructs.Result memory) {\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \"DealAgreed\");\n    agreements[dealId].resultsSubmittedAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsSubmitted);\n    results[dealId] = SharedStructs.Result(\n      dealId,\n      resultsId,\n      dataId,\n      instructionCount\n    );\n    return results[dealId];\n  }\n\n  /**\n   * Judge Results\n   */\n\n  function acceptResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\n    agreements[dealId].resultsAcceptedAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsAccepted);\n  }\n\n  function checkResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\n    agreements[dealId].resultsCheckedAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsChecked);\n  }\n\n  /**\n   * Mediati:\n   */\n\n  function mediationAcceptResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\n    agreements[dealId].mediationAcceptedAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationAccepted);\n  }\n\n  function mediationRejectResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\n    agreements[dealId].mediationRejectedAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationRejected);\n  }\n\n  /**\n   * Timeouts\n   */\n\n  // called because one party submitted a deal and the other party\n  // did not agree in time\n  function timeoutAgree(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \"DealNegotiating\");\n    agreements[dealId].timeoutAgreeAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutAgree);\n  }\n\n  // called because the JC waited too long for a result to be submitted\n  // and wants it's money back\n  function timeoutSubmitResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \"DealAgreed\");\n    agreements[dealId].timeoutSubmitResultsAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutSubmitResults);\n  }\n\n  // called because the RP waited too long for a judgement of it's results\n  // and wants it's money back\n  function timeoutJudgeResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\n    agreements[dealId].timeoutJudgeResultsAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutJudgeResults);\n  }\n  // called because the RP or JC waited too long for a mediation of it's results\n  // and both want their money back\n  function timeoutMediateResult(\n    string memory dealId\n  ) public onlyController {\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\n    agreements[dealId].timeoutMediateResultsAt = block.timestamp;\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutMediateResults);\n  }\n\n  /**\n   * Costings\n   */\n\n  function getJobCost(\n    string memory dealId\n  ) public view returns (uint256) {\n    return deals[dealId].pricing.instructionPrice * results[dealId].instructionCount;\n  }\n\n  function getResultsCollateral(\nstring memory dealId\n  ) public view returns (uint256) {\n    return deals[dealId].pricing.resultsCollateralMultiple * getJobCost(dealId);\n  }\n\n  /**\n   * Checkers\n   */\n\n  function hasDeal(\n    string memory dealId\n  ) public view returns (bool) {\n    return  bytes(getDeal(dealId).dealId).length > 0;\n  }\n\n  function isState(\n    string memory dealId,\n    SharedStructs.AgreementState state\n  ) public view returns (bool) {\n    // if we don't have a deal, we should check against DealNegotiating\n    // as this is the default state - otherwise it's impossible to check\n    // for isState('DealNegotiating')\n    if(!hasDeal(dealId)) {\n      return state == SharedStructs.AgreementState.DealNegotiating;\n    }\n    return agreements[dealId].state == state;\n  }\n\n  /**\n   * Utils\n   */\n\n  function _maybeAgreeDeal(\n    string memory dealId\n  ) private {\n    if(agreements[dealId].resourceProviderAgreedAt != 0 && agreements[dealId].jobCreatorAgreedAt != 0) {\n      agreements[dealId].dealAgreedAt = block.timestamp;\n      _changeAgreementState(dealId, SharedStructs.AgreementState.DealAgreed);\n    } else {\n      // this is used so we can know if a party can call an agree timeout trigger\n      agreements[dealId].dealCreatedAt = block.timestamp;\n    }\n  }\n\n  function _changeAgreementState(\n    string memory dealId,\n    SharedStructs.AgreementState state\n  ) private {\n    agreements[dealId].state = state;\n    emit DealStateChange(dealId, state);\n  }\n}\n"
    },
    "contracts/LilypadStorageTestable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nimport \"./LilypadStorage.sol\";\n\ncontract LilypadStorageTestable is LilypadStorage {\n  function _checkControllerAccess() internal pure override returns (bool) {\n    return true;\n  }\n}\n"
    },
    "contracts/SharedStructs.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.6;\n\nlibrary SharedStructs {\n\n  enum ServiceType {\n    Solver,\n    Mediator,\n    ResourceProvider,\n    JobCreator\n  }\n\n  enum AgreementState {\n\n    // the two parties have not yet both agreed to the deal\n    DealNegotiating,\n\n    // both parties have agreed\n    DealAgreed,\n\n    // results have been submitted by the RP\n    ResultsSubmitted,\n\n    // the JC has accepted the results\n    ResultsAccepted,\n\n    // the JC has checked the results\n    ResultsChecked,\n\n    // a mediator has accepted the results\n    MediationAccepted,\n\n    // a mediator has rejected the results\n    MediationRejected,\n\n    // this means the counter-party did not agree to the deal in time\n    TimeoutAgree,\n\n    // this means the RP did not submit results in time\n    TimeoutSubmitResults,\n\n    // this means the JC did not accept or reject results in time\n    TimeoutJudgeResults,\n\n    // this means the mediator did not accept or submit judgement in time\n    TimeoutMediateResults\n\n  }\n\n  // we map addresses onto infomation about the user\n  struct User {\n    address userAddress;\n    // the CID of information for this user\n    string metadataCID;\n    string url;\n    ServiceType[] roles;\n  }\n\n  // the various addresses involved in runnig a deal\n  struct DealMembers {\n    // the address of the solver service that the RP and JC have agreed to use\n    address solver;\n    // the addresses of the RP and JC that have agreed to this deal\n    address jobCreator;\n    address resourceProvider;\n    // the list of mediators that the RP and JC have agreed to use\n    address[] mediators;\n  }\n\n  // a timeout represents the agreed amount of time and the penalty\n  // that is applied if the timeout is exceeded  \n  struct DealTimeout {\n    uint256 timeout;\n    uint256 collateral;\n  }\n  \n  // the various forms of timeout a deal can have\n  struct DealTimeouts { \n    DealTimeout agree;\n    DealTimeout submitResults;\n    DealTimeout judgeResults;\n    DealTimeout mediateResults;\n  }\n\n  // configure the cost of a deal\n  struct DealPricing {\n  // agreed price per instruction\n    uint256 instructionPrice;\n\n    // the collateral that the JC has put up to pay for the job\n    // the final cost of the job will be deducted from this\n    uint256 paymentCollateral;\n\n    // how much collateral the RP will post to attest it's results are correct\n    // this is a multiple of the cost of the job which is known at results\n    // submission time\n    uint256 resultsCollateralMultiple;\n\n    // how much is the JC willing to pay the mediator to resolve disputes\n    uint256 mediationFee;\n  }\n\n  // a Deal forms the information that is agreed between both parties\n  // both parties must have called \"agree_deal\" with the exact\n  // same parameters before the deal is considered valid\n  // a Deal is immutable - nothing about it can be updated\n  struct Deal {\n    // the CID of the Deal document on IPFS (and directory service)\n    // this contains the job spec, the job offer and the resource offer\n    string dealId;\n\n    // who is participating in this deal\n    DealMembers members;\n    \n    // the timeout settings for a deal\n    DealTimeouts timeouts;\n\n    // the pricing settings for a deal\n    DealPricing pricing;    \n  }\n\n  // what the RP submits back once having run the job\n  // this is also immutable\n  struct Result {\n    // the id of the deal that this result is for\n    string dealId;\n\n    // the CID of the results on IPFS (and directory service)\n    // NOTE - this is not the CID of actual results data rather\n    // of the JSON object reporting that data\n    string resultsId;\n\n    // this is the actual lower level data CID\n    string dataId;\n\n    // how many instructions were executed by the RP\n    uint256 instructionCount;\n  }\n\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\n  struct Agreement {\n    // the current state of the agreement\n    AgreementState state;\n\n    uint256 resourceProviderAgreedAt;\n    uint256 jobCreatorAgreedAt;\n    uint256 dealCreatedAt;\n    uint256 dealAgreedAt;\n\n    uint256 resultsSubmittedAt;\n    uint256 resultsAcceptedAt;\n    uint256 resultsCheckedAt;\n\n    uint256 mediationAcceptedAt;\n    uint256 mediationRejectedAt;\n\n    uint256 timeoutAgreeAt;\n    uint256 timeoutSubmitResultsAt;\n    uint256 timeoutJudgeResultsAt;\n    uint256 timeoutMediateResultsAt;\n  }\n\n  struct JobOffer {\n    uint256 id;\n    \n    // this is the contract that will be triggered\n    // once there are some results\n    address calling_contract;\n\n    // this is the address that is paying for the job\n    // they must have called approve on the token contract\n    // and granted the solver address the number of tokens\n    // required\n    address payee;\n\n    // the job spec\n    string module;\n    string[] inputs;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}