{
  "address": "0xC5a58D6BDbdB66c50ecD795C5456E1f6ADc52dD9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "solver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jobCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resourceProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "mediators",
          "type": "address[]"
        }
      ],
      "name": "Deal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SharedStructs.AgreementState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "DealStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "acceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resultsId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "instructionCount",
          "type": "uint256"
        }
      ],
      "name": "addResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resultsId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "instructionCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "agreeJobCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "agreeResourceProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "checkResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableChangeControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "solver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "jobCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "resourceProvider",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mediators",
              "type": "address[]"
            }
          ],
          "internalType": "struct SharedStructs.DealMembers",
          "name": "members",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "agree",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "submitResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "judgeResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "mediateResults",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.DealTimeouts",
          "name": "timeouts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "instructionPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCollateralMultiple",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.DealPricing",
          "name": "pricing",
          "type": "tuple"
        }
      ],
      "name": "ensureDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "solver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "jobCreator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resourceProvider",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mediators",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SharedStructs.DealMembers",
              "name": "members",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "agree",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "submitResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "judgeResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "mediateResults",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeouts",
              "name": "timeouts",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "instructionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "resultsCollateralMultiple",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediationFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealPricing",
              "name": "pricing",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.Deal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getAgreement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getControllerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "solver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "jobCreator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resourceProvider",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mediators",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SharedStructs.DealMembers",
              "name": "members",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "agree",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "submitResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "judgeResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "mediateResults",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeouts",
              "name": "timeouts",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "instructionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "resultsCollateralMultiple",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediationFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealPricing",
              "name": "pricing",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.Deal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getDealsForParty",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getJobCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resultsId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "instructionCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getResultsCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "hasDeal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "enum SharedStructs.AgreementState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "isState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationAcceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationRejectResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controllerAddress",
          "type": "address"
        }
      ],
      "name": "setControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutAgree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutJudgeResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutMediateResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutSubmitResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c31a0b19290fd10f275c9e8c81cc5da1c27584a536abf22b340f8ad6eb4c3a9",
  "receipt": {
    "to": null,
    "from": "0x23f318fAe637F7F7081D71d2ECD62cb62D27ac4f",
    "contractAddress": "0xC5a58D6BDbdB66c50ecD795C5456E1f6ADc52dD9",
    "transactionIndex": 1,
    "gasUsed": "4594933",
    "logsBloom": "0x
    "blockHash": "0x32186a429e0789f7fa9ca511b34636612663debd1f9ca41a9f30c240c9e647b4",
    "transactionHash": "0x3c31a0b19290fd10f275c9e8c81cc5da1c27584a536abf22b340f8ad6eb4c3a9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 42392533,
        "transactionHash": "0x3c31a0b19290fd10f275c9e8c81cc5da1c27584a536abf22b340f8ad6eb4c3a9",
        "address": "0xC5a58D6BDbdB66c50ecD795C5456E1f6ADc52dD9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023f318fae637f7f7081d71d2ecd62cb62d27ac4f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x32186a429e0789f7fa9ca511b34636612663debd1f9ca41a9f30c240c9e647b4"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 42392533,
        "transactionHash": "0x3c31a0b19290fd10f275c9e8c81cc5da1c27584a536abf22b340f8ad6eb4c3a9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000023f318fae637f7f7081d71d2ecd62cb62d27ac4f",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000042ee2cef77cdb000000000000000000000000000000000000000000000000002c53898203c9f7800000000000000000000000000000000000000000000039410d46d3c47fa399300000000000000000000000000000000000000000000000002824a6b30c4d1c800000000000000000000000000000000000000000000039411175b6937720743",
        "logIndex": 3,
        "blockHash": "0x32186a429e0789f7fa9ca511b34636612663debd1f9ca41a9f30c240c9e647b4"
      }
    ],
    "blockNumber": 42392533,
    "cumulativeGasUsed": "4681888",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01b3103eedac7aa099de00949e6738e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"name\":\"Deal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"DealStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"acceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"agreeJobCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"agreeResourceProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"checkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"name\":\"ensureDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getAgreement\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getDealsForParty\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getJobCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getResult\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getResultsCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"hasDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"isState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationAcceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationRejectResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"setControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutAgree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutJudgeResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutMediateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutSubmitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptResult(string)\":{\"notice\":\"Judge Results\"},\"getAgreement(string)\":{\"notice\":\"Agreements\"},\"getDeal(string)\":{\"notice\":\"Deals\"},\"getJobCost(string)\":{\"notice\":\"Costings\"},\"getResult(string)\":{\"notice\":\"Post Results\"},\"hasDeal(string)\":{\"notice\":\"Checkers\"},\"initialize()\":{\"notice\":\"Init\"},\"mediationAcceptResult(string)\":{\"notice\":\"Mediati:\"},\"timeoutAgree(string)\":{\"notice\":\"Timeouts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LilypadStorage.sol\":\"LilypadStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ControllerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// as well as being ownable (i.e. our admin wallet)\\n// this contract has a modifier called onlyController\\n// it works the same way as Ownable but only the Owner\\n// can change the controller address so it gives us a way of\\n// re-pointing contracts if needed\\ncontract ControllerOwnable is Ownable {\\n\\n  // the address of the controller that is allowed to call functions\\n  address private controllerAddress;\\n\\n  // used to \\\"freeze\\\" the controller address - even the admin cannot\\n  // change it from this point onwards\\n  bool private canChangeControllerAddress = true;\\n\\n  modifier onlyController() {\\n    _checkControllerAccess();\\n    _;\\n  }\\n\\n  function _checkControllerAccess() internal view virtual returns (bool) {\\n    require(controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(_msgSender() == controllerAddress, \\\"ControllerOwnable: Only the controller can call this method\\\");\\n    return true;\\n  }\\n\\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\\n    require(_controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(canChangeControllerAddress, \\\"ControllerOwnable: canChangeControllerAddress is disabled\\\");\\n    controllerAddress = _controllerAddress;\\n  }\\n\\n  function getControllerAddress() public view returns (address) {\\n    return controllerAddress;\\n  }\\n\\n  function disableChangeControllerAddress() public onlyOwner {\\n    canChangeControllerAddress = false;\\n  }\\n}\\n\",\"keccak256\":\"0xecfd8b0beb12340f51cefee5e121932fa7aee0a41fb7d0233966419d153ef429\",\"license\":\"Apache-2.0\"},\"contracts/LilypadStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./ControllerOwnable.sol\\\";\\n\\ncontract LilypadStorage is ControllerOwnable, Initializable {\\n\\n  // the address that is allowed to be the msg.sender for the payment functions\\n  address private controllerAddress;\\n\\n  // used to cut off upgrades for the remote contract\\n  bool private canChangeControllerAddress = true;\\n\\n  // a map of deal id -> deal\\n  mapping(string => SharedStructs.Deal) private deals;\\n\\n  // a map of party -> dealid[]\\n  mapping(address => string[]) private dealsForParty;\\n\\n  // a map of deal id -> agreement\\n  mapping(string => SharedStructs.Agreement) private agreements;\\n\\n  // a map of deal id -> result\\n  mapping(string => SharedStructs.Result) private results;\\n\\n  // a map of deal id -> result\\n  mapping(string => SharedStructs.Result) private mediations;\\n\\n  event Deal(\\n    string dealId,\\n    address solver,\\n    address jobCreator,\\n    address resourceProvider,\\n    address[] mediators\\n  );\\n\\n  event DealStateChange(\\n    string dealId,\\n    SharedStructs.AgreementState state\\n  );\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize() public initializer {\\n    \\n  }\\n\\n  /**\\n   * Deals\\n   */\\n\\n  function getDeal(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Deal memory) {\\n    return deals[dealId];\\n  }\\n\\n  function getDealsForParty(\\n    address party\\n  ) public view returns (string[] memory) {\\n    return dealsForParty[party];\\n  }\\n\\n  function checkDealMembers(\\n    SharedStructs.DealMembers memory members\\n  ) private pure {\\n    require(members.resourceProvider != address(0), \\\"RP missing\\\");\\n    require(members.jobCreator != address(0), \\\"JC missing\\\");\\n    require(members.solver != address(0), \\\"Solver missing\\\");\\n    require(members.mediators.length > 0, \\\"Mediators <= 0\\\");\\n    require(members.resourceProvider != members.jobCreator, \\\"RP / JC same\\\");\\n  }\\n\\n  function checkTimeouts(\\n    SharedStructs.DealTimeouts memory timeouts\\n  ) private pure {\\n    // the cost of the agree timeout cannot be > 0 because the whole point is\\n    // one party has not paid anything into the contract is what has timed out\\n    require(timeouts.agree.collateral == 0, \\\"Agree deposit must be 0\\\");\\n    // the same is true of the mediation timeout - it's cost cannot be zero\\n    require(timeouts.mediateResults.collateral == 0, \\\"Mediate deposit must be 0\\\");\\n  }\\n\\n  function compareDealMembers(\\n    SharedStructs.DealMembers memory members1,\\n    SharedStructs.DealMembers memory members2\\n  ) private pure {\\n    require(members1.resourceProvider == members2.resourceProvider, \\\"RP\\\");\\n    require(members1.jobCreator == members2.jobCreator, \\\"JC\\\");\\n    require(members1.solver == members2.solver, \\\"Solver\\\");\\n    require(members1.mediators.length == members2.mediators.length, \\\"Mediators\\\");\\n    for (uint256 i = 0; i < members1.mediators.length; i++) {\\n      require(members1.mediators[i] == members2.mediators[i], \\\"Mediator\\\");\\n    }\\n  }\\n\\n  function compareDealTimeout(\\n    SharedStructs.DealTimeout memory timeout1,\\n    SharedStructs.DealTimeout memory timeout2\\n  ) private pure {\\n    require(timeout1.timeout == timeout2.timeout, \\\"Timeout\\\");\\n    require(timeout1.collateral == timeout2.collateral, \\\"Collateral\\\");\\n  }\\n  \\n  function compareDealTimeouts(\\n    SharedStructs.DealTimeouts memory timeouts1,\\n    SharedStructs.DealTimeouts memory timeouts2\\n  ) private pure {\\n    compareDealTimeout(timeouts1.agree, timeouts2.agree);\\n    compareDealTimeout(timeouts1.submitResults, timeouts2.submitResults);\\n    compareDealTimeout(timeouts1.judgeResults, timeouts2.judgeResults);\\n    compareDealTimeout(timeouts1.mediateResults, timeouts2.mediateResults);\\n  }\\n\\n  function compareDealPricing(\\n    SharedStructs.DealPricing memory pricing1,\\n    SharedStructs.DealPricing memory pricing2\\n  ) private pure {\\n    require(pricing1.instructionPrice == pricing2.instructionPrice, \\\"Price\\\");\\n    require(pricing1.paymentCollateral == pricing2.paymentCollateral, \\\"Payment\\\");\\n    require(pricing1.resultsCollateralMultiple == pricing2.resultsCollateralMultiple, \\\"Results\\\");\\n    require(pricing1.mediationFee == pricing2.mediationFee, \\\"Mediation\\\");\\n  }\\n\\n  function ensureDeal(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) public onlyController returns (SharedStructs.Deal memory) {\\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \\\"DealNegotiating\\\");\\n    checkDealMembers(members);\\n    checkTimeouts(timeouts);\\n    if(hasDeal(dealId)) {\\n      SharedStructs.Deal memory existingDeal = getDeal(dealId);\\n      compareDealMembers(existingDeal.members, members);\\n      compareDealTimeouts(existingDeal.timeouts, timeouts);\\n      compareDealPricing(existingDeal.pricing, pricing);\\n    }\\n    else {\\n      deals[dealId] = SharedStructs.Deal(\\n        dealId,\\n        members,\\n        timeouts,\\n        pricing\\n      );\\n      dealsForParty[members.resourceProvider].push(dealId);\\n      dealsForParty[members.jobCreator].push(dealId);\\n\\n      emit Deal(dealId, members.solver, members.jobCreator, members.resourceProvider, members.mediators);\\n    }\\n    return deals[dealId];\\n  }\\n\\n  /**\\n   * Agreements\\n   */\\n  \\n  function getAgreement(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Agreement memory) {\\n    return agreements[dealId];\\n  }\\n\\n  function agreeResourceProvider(\\n    string memory dealId\\n  ) public onlyController returns (SharedStructs.Agreement memory) {\\n    require(hasDeal(dealId), \\\"Deal does not exist\\\");\\n    require(agreements[dealId].resourceProviderAgreedAt == 0, \\\"RP has already agreed\\\");\\n    agreements[dealId].resourceProviderAgreedAt = block.timestamp;\\n    _maybeAgreeDeal(dealId);\\n    return agreements[dealId];\\n  }\\n\\n  function agreeJobCreator(\\n    string memory dealId\\n  ) public onlyController returns (SharedStructs.Agreement memory) {\\n    require(hasDeal(dealId), \\\"Deal does not exist\\\");\\n    require(agreements[dealId].jobCreatorAgreedAt == 0, \\\"JC has already agreed\\\");\\n    agreements[dealId].jobCreatorAgreedAt = block.timestamp;\\n    _maybeAgreeDeal(dealId);\\n    return agreements[dealId];\\n  }\\n\\n  /**\\n   * Post Results\\n   */\\n\\n  function getResult(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Result memory) {\\n    return results[dealId];\\n  }\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) public onlyController returns (SharedStructs.Result memory) {\\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    agreements[dealId].resultsSubmittedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsSubmitted);\\n    results[dealId] = SharedStructs.Result(\\n      dealId,\\n      resultsId,\\n      dataId,\\n      instructionCount\\n    );\\n    return results[dealId];\\n  }\\n\\n  /**\\n   * Judge Results\\n   */\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].resultsAcceptedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsAccepted);\\n  }\\n\\n  function checkResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].resultsCheckedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsChecked);\\n  }\\n\\n  /**\\n   * Mediati:\\n   */\\n\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].mediationAcceptedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationAccepted);\\n  }\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].mediationRejectedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationRejected);\\n  }\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  // called because one party submitted a deal and the other party\\n  // did not agree in time\\n  function timeoutAgree(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \\\"DealNegotiating\\\");\\n    agreements[dealId].timeoutAgreeAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutAgree);\\n  }\\n\\n  // called because the JC waited too long for a result to be submitted\\n  // and wants it's money back\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    agreements[dealId].timeoutSubmitResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutSubmitResults);\\n  }\\n\\n  // called because the RP waited too long for a judgement of it's results\\n  // and wants it's money back\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].timeoutJudgeResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutJudgeResults);\\n  }\\n  // called because the RP or JC waited too long for a mediation of it's results\\n  // and both want their money back\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].timeoutMediateResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutMediateResults);\\n  }\\n\\n  /**\\n   * Costings\\n   */\\n\\n  function getJobCost(\\n    string memory dealId\\n  ) public view returns (uint256) {\\n    return deals[dealId].pricing.instructionPrice * results[dealId].instructionCount;\\n  }\\n\\n  function getResultsCollateral(\\nstring memory dealId\\n  ) public view returns (uint256) {\\n    return deals[dealId].pricing.resultsCollateralMultiple * getJobCost(dealId);\\n  }\\n\\n  /**\\n   * Checkers\\n   */\\n\\n  function hasDeal(\\n    string memory dealId\\n  ) public view returns (bool) {\\n    return  bytes(getDeal(dealId).dealId).length > 0;\\n  }\\n\\n  function isState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) public view returns (bool) {\\n    // if we don't have a deal, we should check against DealNegotiating\\n    // as this is the default state - otherwise it's impossible to check\\n    // for isState('DealNegotiating')\\n    if(!hasDeal(dealId)) {\\n      return state == SharedStructs.AgreementState.DealNegotiating;\\n    }\\n    return agreements[dealId].state == state;\\n  }\\n\\n  /**\\n   * Utils\\n   */\\n\\n  function _maybeAgreeDeal(\\n    string memory dealId\\n  ) private {\\n    if(agreements[dealId].resourceProviderAgreedAt != 0 && agreements[dealId].jobCreatorAgreedAt != 0) {\\n      agreements[dealId].dealAgreedAt = block.timestamp;\\n      _changeAgreementState(dealId, SharedStructs.AgreementState.DealAgreed);\\n    } else {\\n      // this is used so we can know if a party can call an agree timeout trigger\\n      agreements[dealId].dealCreatedAt = block.timestamp;\\n    }\\n  }\\n\\n  function _changeAgreementState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) private {\\n    agreements[dealId].state = state;\\n    emit DealStateChange(dealId, state);\\n  }\\n}\\n\",\"keccak256\":\"0x004946ff2decfca9a1b91e851beb6ae2c998d4ae7db28ad0dd8747e3c79fab84\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405260018060146101000a81548160ff0219169083151502179055506001600260146101000a81548160ff02191690831515021790555034801562000045575f80fd5b50620000666200005a6200006c60201b60201c565b6200007360201b60201c565b62000134565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61511c80620001425f395ff3fe608060405234801561000f575f80fd5b50600436106101a7575f3560e01c80638224ce5f116100f7578063cdd82d1d11610095578063e850be371161006f578063e850be37146104d9578063ec95b967146104f5578063f2fde38b14610525578063f3d3d44814610541576101a7565b8063cdd82d1d1461045d578063e70791801461048d578063e7b957d1146104bd576101a7565b8063a4702958116100d1578063a4702958146103d5578063a6370b0e146103df578063b050e74b1461040f578063c57380a21461043f576101a7565b80638224ce5f1461036b578063824518aa1461039b5780638da5cb5b146103b7576101a7565b8063498cc70d1161016457806373db5c6a1161013e57806373db5c6a146102f9578063795f9abf1461032957806380ffdfe0146103455780638129fc1c14610361576101a7565b8063498cc70d146102a3578063511a9f68146102d3578063715018a6146102ef576101a7565b806311d5af33146101ab5780632244ad2b146101db578063297f9e551461020b5780633955548e146102275780633c4135da1461025757806346834d1e14610287575b5f80fd5b6101c560048036038101906101c0919061310a565b61055d565b6040516101d2919061327a565b60405180910390f35b6101f560048036038101906101f091906133c6565b61066e565b6040516102029190613427565b60405180910390f35b610225600480360381019061022091906133c6565b610685565b005b610241600480360381019061023c9190613473565b61070c565b60405161024e91906135a8565b60405180910390f35b610271600480360381019061026c91906133c6565b610a10565b60405161027e9190613759565b60405180910390f35b6102a1600480360381019061029c91906133c6565b610be7565b005b6102bd60048036038101906102b891906133c6565b610c6e565b6040516102ca91906135a8565b60405180910390f35b6102ed60048036038101906102e891906133c6565b610e5f565b005b6102f7610ee6565b005b610313600480360381019061030e91906133c6565b610ef9565b6040516103209190613782565b60405180910390f35b610343600480360381019061033e91906133c6565b610f51565b005b61035f600480360381019061035a91906133c6565b610fd7565b005b61036961105e565b005b610385600480360381019061038091906133c6565b611195565b6040516103929190613782565b60405180910390f35b6103b560048036038101906103b091906133c6565b6111d5565b005b6103bf61125c565b6040516103cc91906137aa565b60405180910390f35b6103dd611283565b005b6103f960048036038101906103f49190613a58565b6112a7565b6040516104069190613d4a565b60405180910390f35b61042960048036038101906104249190613d8d565b6119d3565b6040516104369190613427565b60405180910390f35b610447611a6b565b60405161045491906137aa565b60405180910390f35b610477600480360381019061047291906133c6565b611a93565b6040516104849190613759565b60405180910390f35b6104a760048036038101906104a291906133c6565b611b87565b6040516104b49190613d4a565b60405180910390f35b6104d760048036038101906104d291906133c6565b611ed5565b005b6104f360048036038101906104ee91906133c6565b611f5c565b005b61050f600480360381019061050a91906133c6565b611fe3565b60405161051c9190613759565b60405180910390f35b61053f600480360381019061053a919061310a565b6121ba565b005b61055b6004803603810190610556919061310a565b61223c565b005b606060045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610663578382905f5260205f200180546105d890613e14565b80601f016020809104026020016040519081016040528092919081815260200182805461060490613e14565b801561064f5780601f106106265761010080835404028352916020019161064f565b820191905f5260205f20905b81548152906001019060200180831161063257829003601f168201915b5050505050815260200190600101906105bb565b505050509050919050565b5f8061067983611b87565b5f015151119050919050565b61068d612344565b506106998160026119d3565b6106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf90613e9e565b60405180910390fd5b426005826040516106e99190613ef6565b908152602001604051809103902060060181905550610709816003612471565b50565b610714612e46565b61071c612344565b506107288560016119d3565b610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e90613f56565b60405180910390fd5b426005866040516107789190613ef6565b908152602001604051809103902060050181905550610798856002612471565b6040518060800160405280868152602001858152602001848152602001838152506006866040516107c99190613ef6565b90815260200160405180910390205f820151815f0190816107ea9190614111565b5060208201518160010190816108009190614111565b5060408201518160020190816108169190614111565b50606082015181600301559050506006856040516108349190613ef6565b90815260200160405180910390206040518060800160405290815f8201805461085c90613e14565b80601f016020809104026020016040519081016040528092919081815260200182805461088890613e14565b80156108d35780601f106108aa576101008083540402835291602001916108d3565b820191905f5260205f20905b8154815290600101906020018083116108b657829003601f168201915b505050505081526020016001820180546108ec90613e14565b80601f016020809104026020016040519081016040528092919081815260200182805461091890613e14565b80156109635780601f1061093a57610100808354040283529160200191610963565b820191905f5260205f20905b81548152906001019060200180831161094657829003601f168201915b5050505050815260200160028201805461097c90613e14565b80601f01602080910402602001604051908101604052809291908181526020018280546109a890613e14565b80156109f35780601f106109ca576101008083540402835291602001916109f3565b820191905f5260205f20905b8154815290600101906020018083116109d657829003601f168201915b505050505081526020016003820154815250509050949350505050565b610a18612e6d565b610a20612344565b50610a2a8261066e565b610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a609061422a565b60405180910390fd5b5f600583604051610a7a9190613ef6565b90815260200160405180910390206002015414610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390614292565b60405180910390fd5b42600583604051610add9190613ef6565b908152602001604051809103902060020181905550610afb826124f5565b600582604051610b0b9190613ef6565b9081526020016040518091039020604051806101c00160405290815f82015f9054906101000a900460ff16600a811115610b4857610b476135c8565b5b600a811115610b5a57610b596135c8565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b610bef612344565b50610bfb8160026119d3565b610c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3190613e9e565b60405180910390fd5b42600582604051610c4b9190613ef6565b908152602001604051809103902060070181905550610c6b816004612471565b50565b610c76612e46565b600682604051610c869190613ef6565b90815260200160405180910390206040518060800160405290815f82018054610cae90613e14565b80601f0160208091040260200160405190810160405280929190818152602001828054610cda90613e14565b8015610d255780601f10610cfc57610100808354040283529160200191610d25565b820191905f5260205f20905b815481529060010190602001808311610d0857829003601f168201915b50505050508152602001600182018054610d3e90613e14565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6a90613e14565b8015610db55780601f10610d8c57610100808354040283529160200191610db5565b820191905f5260205f20905b815481529060010190602001808311610d9857829003601f168201915b50505050508152602001600282018054610dce90613e14565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfa90613e14565b8015610e455780601f10610e1c57610100808354040283529160200191610e45565b820191905f5260205f20905b815481529060010190602001808311610e2857829003601f168201915b505050505081526020016003820154815250509050919050565b610e67612344565b50610e738160016119d3565b610eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea990613f56565b60405180910390fd5b42600582604051610ec39190613ef6565b9081526020016040518091039020600b0181905550610ee3816008612471565b50565b610eee6125ac565b610ef75f61262a565b565b5f600682604051610f0a9190613ef6565b908152602001604051809103902060030154600383604051610f2c9190613ef6565b9081526020016040518091039020600d015f0154610f4a91906142dd565b9050919050565b610f59612344565b50610f64815f6119d3565b610fa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9a90614368565b60405180910390fd5b42600582604051610fb49190613ef6565b9081526020016040518091039020600a0181905550610fd4816007612471565b50565b610fdf612344565b50610feb8160046119d3565b61102a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611021906143d0565b60405180910390fd5b4260058260405161103b9190613ef6565b90815260200160405180910390206009018190555061105b816006612471565b50565b5f600160169054906101000a900460ff16159050808015611090575060018060159054906101000a900460ff1660ff16105b806110be575061109f306126eb565b1580156110bd575060018060159054906101000a900460ff1660ff16145b5b6110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f49061445e565b60405180910390fd5b60018060156101000a81548160ff021916908360ff16021790555080156111395760018060166101000a81548160ff0219169083151502179055505b8015611192575f600160166101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161118991906144c1565b60405180910390a15b50565b5f61119f82610ef9565b6003836040516111af9190613ef6565b9081526020016040518091039020600d01600201546111ce91906142dd565b9050919050565b6111dd612344565b506111e98160046119d3565b611228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121f906143d0565b60405180910390fd5b426005826040516112399190613ef6565b908152602001604051809103902060080181905550611259816005612471565b50565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61128b6125ac565b5f600160146101000a81548160ff021916908315150217905550565b6112af612ee0565b6112b7612344565b506112c2855f6119d3565b611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f890614368565b60405180910390fd5b61130a8461270d565b61131383612922565b61131c8561066e565b1561135d575f61132b86611b87565b905061133b8160200151866129b8565b611349816040015185612c35565b611357816060015184612c7f565b5061168a565b60405180608001604052808681526020018581526020018481526020018381525060038660405161138e9190613ef6565b90815260200160405180910390205f820151815f0190816113af9190614111565b506020820151816001015f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190805190602001906114a5929190612f1a565b5050506040820151816005015f820151815f015f820151815f01556020820151816001015550506020820151816002015f820151815f01556020820151816001015550506040820151816004015f820151815f01556020820151816001015550506060820151816006015f820151815f01556020820151816001015550505050606082015181600d015f820151815f0155602082015181600101556040820151816002015560608201518160030155505090505060045f856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2085908060018154018082558091505060019003905f5260205f20015f9091909190915090816115c99190614111565b5060045f856020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2085908060018154018082558091505060019003905f5260205f20015f90919091909150908161163a9190614111565b507f542b0c7ab03fea46499267e26e574794a6ebce8e10cca32c61c289eacca5576985855f015186602001518760400151886060015160405161168195949392919061457e565b60405180910390a15b60038560405161169a9190613ef6565b90815260200160405180910390206040518060800160405290815f820180546116c290613e14565b80601f01602080910402602001604051908101604052809291908181526020018280546116ee90613e14565b80156117395780601f1061171057610100808354040283529160200191611739565b820191905f5260205f20905b81548152906001019060200180831161171c57829003601f168201915b50505050508152602001600182016040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156118d257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611889575b5050505050815250508152602001600582016040518060800160405290815f82016040518060400160405290815f82015481526020016001820154815250508152602001600282016040518060400160405290815f82015481526020016001820154815250508152602001600482016040518060400160405290815f82015481526020016001820154815250508152602001600682016040518060400160405290815f8201548152602001600182015481525050815250508152602001600d82016040518060800160405290815f82015481526020016001820154815260200160028201548152602001600382015481525050815250509050949350505050565b5f6119dd8361066e565b611a0f575f600a8111156119f4576119f36135c8565b5b82600a811115611a0757611a066135c8565b5b149050611a65565b81600a811115611a2257611a216135c8565b5b600584604051611a329190613ef6565b90815260200160405180910390205f015f9054906101000a900460ff16600a811115611a6157611a606135c8565b5b1490505b92915050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611a9b612e6d565b600582604051611aab9190613ef6565b9081526020016040518091039020604051806101c00160405290815f82015f9054906101000a900460ff16600a811115611ae857611ae76135c8565b5b600a811115611afa57611af96135c8565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b611b8f612ee0565b600382604051611b9f9190613ef6565b90815260200160405180910390206040518060800160405290815f82018054611bc790613e14565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf390613e14565b8015611c3e5780601f10611c1557610100808354040283529160200191611c3e565b820191905f5260205f20905b815481529060010190602001808311611c2157829003601f168201915b50505050508152602001600182016040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611dd757602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d8e575b5050505050815250508152602001600582016040518060800160405290815f82016040518060400160405290815f82015481526020016001820154815250508152602001600282016040518060400160405290815f82015481526020016001820154815250508152602001600482016040518060400160405290815f82015481526020016001820154815250508152602001600682016040518060400160405290815f8201548152602001600182015481525050815250508152602001600d82016040518060800160405290815f82015481526020016001820154815260200160028201548152602001600382015481525050815250509050919050565b611edd612344565b50611ee98160046119d3565b611f28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1f906143d0565b60405180910390fd5b42600582604051611f399190613ef6565b9081526020016040518091039020600d0181905550611f5981600a612471565b50565b611f64612344565b50611f708160026119d3565b611faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa690613e9e565b60405180910390fd5b42600582604051611fc09190613ef6565b9081526020016040518091039020600c0181905550611fe0816009612471565b50565b611feb612e6d565b611ff3612344565b50611ffd8261066e565b61203c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120339061422a565b60405180910390fd5b5f60058360405161204d9190613ef6565b9081526020016040518091039020600101541461209f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209690614627565b60405180910390fd5b426005836040516120b09190613ef6565b9081526020016040518091039020600101819055506120ce826124f5565b6005826040516120de9190613ef6565b9081526020016040518091039020604051806101c00160405290815f82015f9054906101000a900460ff16600a81111561211b5761211a6135c8565b5b600a81111561212d5761212c6135c8565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b6121c26125ac565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612230576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612227906146b5565b60405180910390fd5b6122398161262a565b50565b6122446125ac565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036122b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a990614743565b60405180910390fd5b600160149054906101000a900460ff16612301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f8906147d1565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8073ffffffffffffffffffffffffffffffffffffffff1660015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036123d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123cb90614743565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612414612da9565b73ffffffffffffffffffffffffffffffffffffffff161461246a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124619061485f565b60405180910390fd5b6001905090565b806005836040516124829190613ef6565b90815260200160405180910390205f015f6101000a81548160ff0219169083600a8111156124b3576124b26135c8565b5b02179055507f10ca3d89184491f5d8de422bd36534abe6eb4b4aa1429a261bdb5ff1dd9ac38682826040516124e992919061488c565b60405180910390a15050565b5f6005826040516125069190613ef6565b9081526020016040518091039020600101541415801561254757505f6005826040516125329190613ef6565b90815260200160405180910390206002015414155b15612582574260058260405161255d9190613ef6565b90815260200160405180910390206004018190555061257d816001612471565b6125a9565b426005826040516125939190613ef6565b9081526020016040518091039020600301819055505b50565b6125b4612da9565b73ffffffffffffffffffffffffffffffffffffffff166125d261125c565b73ffffffffffffffffffffffffffffffffffffffff1614612628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261f90614904565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f73ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff160361277f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127769061496c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036127f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e8906149d4565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff1603612862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285990614a3c565b60405180910390fd5b5f816060015151116128a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a090614aa4565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff160361291f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291690614b0c565b60405180910390fd5b50565b5f815f0151602001511461296b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296290614b74565b60405180910390fd5b5f816060015160200151146129b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ac90614bdc565b60405180910390fd5b50565b806040015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614612a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2590614c44565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614612aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9b90614cac565b60405180910390fd5b805f015173ffffffffffffffffffffffffffffffffffffffff16825f015173ffffffffffffffffffffffffffffffffffffffff1614612b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0f90614d14565b60405180910390fd5b80606001515182606001515114612b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5b90614d7c565b60405180910390fd5b5f5b826060015151811015612c305781606001518181518110612b8a57612b89614d9a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683606001518281518110612bbf57612bbe614d9a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612c1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1490614e11565b60405180910390fd5b8080612c2890614e2f565b915050612b66565b505050565b612c45825f0151825f0151612db0565b612c5782602001518260200151612db0565b612c6982604001518260400151612db0565b612c7b82606001518260600151612db0565b5050565b805f0151825f015114612cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cbe90614ec0565b60405180910390fd5b8060200151826020015114612d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0890614f28565b60405180910390fd5b8060400151826040015114612d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5290614f90565b60405180910390fd5b8060600151826060015114612da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9c90614ff8565b60405180910390fd5b5050565b5f33905090565b805f0151825f015114612df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612def90615060565b60405180910390fd5b8060200151826020015114612e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e39906150c8565b60405180910390fd5b5050565b60405180608001604052806060815260200160608152602001606081526020015f81525090565b604051806101c001604052805f600a811115612e8c57612e8b6135c8565b5b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b604051806080016040528060608152602001612efa612fa1565b8152602001612f07613008565b8152602001612f14613048565b81525090565b828054828255905f5260205f20908101928215612f90579160200282015b82811115612f8f578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612f38565b5b509050612f9d919061306c565b5090565b60405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806080016040528061301b613087565b8152602001613028613087565b8152602001613035613087565b8152602001613042613087565b81525090565b60405180608001604052805f81526020015f81526020015f81526020015f81525090565b5b80821115613083575f815f90555060010161306d565b5090565b60405180604001604052805f81526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130d9826130b0565b9050919050565b6130e9816130cf565b81146130f3575f80fd5b50565b5f81359050613104816130e0565b92915050565b5f6020828403121561311f5761311e6130a8565b5b5f61312c848285016130f6565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561319557808201518184015260208101905061317a565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6131ba8261315e565b6131c48185613168565b93506131d4818560208601613178565b6131dd816131a0565b840191505092915050565b5f6131f383836131b0565b905092915050565b5f602082019050919050565b5f61321182613135565b61321b818561313f565b93508360208202850161322d8561314f565b805f5b85811015613268578484038952815161324985826131e8565b9450613254836131fb565b925060208a01995050600181019050613230565b50829750879550505050505092915050565b5f6020820190508181035f8301526132928184613207565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6132d8826131a0565b810181811067ffffffffffffffff821117156132f7576132f66132a2565b5b80604052505050565b5f61330961309f565b905061331582826132cf565b919050565b5f67ffffffffffffffff821115613334576133336132a2565b5b61333d826131a0565b9050602081019050919050565b828183375f83830152505050565b5f61336a6133658461331a565b613300565b9050828152602081018484840111156133865761338561329e565b5b61339184828561334a565b509392505050565b5f82601f8301126133ad576133ac61329a565b5b81356133bd848260208601613358565b91505092915050565b5f602082840312156133db576133da6130a8565b5b5f82013567ffffffffffffffff8111156133f8576133f76130ac565b5b61340484828501613399565b91505092915050565b5f8115159050919050565b6134218161340d565b82525050565b5f60208201905061343a5f830184613418565b92915050565b5f819050919050565b61345281613440565b811461345c575f80fd5b50565b5f8135905061346d81613449565b92915050565b5f805f806080858703121561348b5761348a6130a8565b5b5f85013567ffffffffffffffff8111156134a8576134a76130ac565b5b6134b487828801613399565b945050602085013567ffffffffffffffff8111156134d5576134d46130ac565b5b6134e187828801613399565b935050604085013567ffffffffffffffff811115613502576135016130ac565b5b61350e87828801613399565b925050606061351f8782880161345f565b91505092959194509250565b61353481613440565b82525050565b5f608083015f8301518482035f86015261355482826131b0565b9150506020830151848203602086015261356e82826131b0565b9150506040830151848203604086015261358882826131b0565b915050606083015161359d606086018261352b565b508091505092915050565b5f6020820190508181035f8301526135c0818461353a565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600b8110613606576136056135c8565b5b50565b5f819050613616826135f5565b919050565b5f61362582613609565b9050919050565b6136358161361b565b82525050565b6101c082015f8201516136505f85018261362c565b506020820151613663602085018261352b565b506040820151613676604085018261352b565b506060820151613689606085018261352b565b50608082015161369c608085018261352b565b5060a08201516136af60a085018261352b565b5060c08201516136c260c085018261352b565b5060e08201516136d560e085018261352b565b506101008201516136ea61010085018261352b565b506101208201516136ff61012085018261352b565b5061014082015161371461014085018261352b565b5061016082015161372961016085018261352b565b5061018082015161373e61018085018261352b565b506101a08201516137536101a085018261352b565b50505050565b5f6101c08201905061376d5f83018461363b565b92915050565b61377c81613440565b82525050565b5f6020820190506137955f830184613773565b92915050565b6137a4816130cf565b82525050565b5f6020820190506137bd5f83018461379b565b92915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156137e5576137e46132a2565b5b602082029050602081019050919050565b5f80fd5b5f61380c613807846137cb565b613300565b9050808382526020820190506020840283018581111561382f5761382e6137f6565b5b835b81811015613858578061384488826130f6565b845260208401935050602081019050613831565b5050509392505050565b5f82601f8301126138765761387561329a565b5b81356138868482602086016137fa565b91505092915050565b5f608082840312156138a4576138a36137c3565b5b6138ae6080613300565b90505f6138bd848285016130f6565b5f8301525060206138d0848285016130f6565b60208301525060406138e4848285016130f6565b604083015250606082013567ffffffffffffffff811115613908576139076137c7565b5b61391484828501613862565b60608301525092915050565b5f60408284031215613935576139346137c3565b5b61393f6040613300565b90505f61394e8482850161345f565b5f8301525060206139618482850161345f565b60208301525092915050565b5f6101008284031215613983576139826137c3565b5b61398d6080613300565b90505f61399c84828501613920565b5f8301525060406139af84828501613920565b60208301525060806139c384828501613920565b60408301525060c06139d784828501613920565b60608301525092915050565b5f608082840312156139f8576139f76137c3565b5b613a026080613300565b90505f613a118482850161345f565b5f830152506020613a248482850161345f565b6020830152506040613a388482850161345f565b6040830152506060613a4c8482850161345f565b60608301525092915050565b5f805f806101c08587031215613a7157613a706130a8565b5b5f85013567ffffffffffffffff811115613a8e57613a8d6130ac565b5b613a9a87828801613399565b945050602085013567ffffffffffffffff811115613abb57613aba6130ac565b5b613ac78782880161388f565b9350506040613ad88782880161396d565b925050610140613aea878288016139e3565b91505092959194509250565b613aff816130cf565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f613b398383613af6565b60208301905092915050565b5f602082019050919050565b5f613b5b82613b05565b613b658185613b0f565b9350613b7083613b1f565b805f5b83811015613ba0578151613b878882613b2e565b9750613b9283613b45565b925050600181019050613b73565b5085935050505092915050565b5f608083015f830151613bc25f860182613af6565b506020830151613bd56020860182613af6565b506040830151613be86040860182613af6565b5060608301518482036060860152613c008282613b51565b9150508091505092915050565b604082015f820151613c215f85018261352b565b506020820151613c34602085018261352b565b50505050565b61010082015f820151613c4f5f850182613c0d565b506020820151613c626040850182613c0d565b506040820151613c756080850182613c0d565b506060820151613c8860c0850182613c0d565b50505050565b608082015f820151613ca25f85018261352b565b506020820151613cb5602085018261352b565b506040820151613cc8604085018261352b565b506060820151613cdb606085018261352b565b50505050565b5f6101c083015f8301518482035f860152613cfc82826131b0565b91505060208301518482036020860152613d168282613bad565b9150506040830151613d2b6040860182613c3a565b506060830151613d3f610140860182613c8e565b508091505092915050565b5f6020820190508181035f830152613d628184613ce1565b905092915050565b600b8110613d76575f80fd5b50565b5f81359050613d8781613d6a565b92915050565b5f8060408385031215613da357613da26130a8565b5b5f83013567ffffffffffffffff811115613dc057613dbf6130ac565b5b613dcc85828601613399565b9250506020613ddd85828601613d79565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613e2b57607f821691505b602082108103613e3e57613e3d613de7565b5b50919050565b5f82825260208201905092915050565b7f526573756c74735375626d6974746564000000000000000000000000000000005f82015250565b5f613e88601083613e44565b9150613e9382613e54565b602082019050919050565b5f6020820190508181035f830152613eb581613e7c565b9050919050565b5f81905092915050565b5f613ed08261315e565b613eda8185613ebc565b9350613eea818560208601613178565b80840191505092915050565b5f613f018284613ec6565b915081905092915050565b7f4465616c416772656564000000000000000000000000000000000000000000005f82015250565b5f613f40600a83613e44565b9150613f4b82613f0c565b602082019050919050565b5f6020820190508181035f830152613f6d81613f34565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613fd07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f95565b613fda8683613f95565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61401561401061400b84613440565b613ff2565b613440565b9050919050565b5f819050919050565b61402e83613ffb565b61404261403a8261401c565b848454613fa1565b825550505050565b5f90565b61405661404a565b614061818484614025565b505050565b5b81811015614084576140795f8261404e565b600181019050614067565b5050565b601f8211156140c95761409a81613f74565b6140a384613f86565b810160208510156140b2578190505b6140c66140be85613f86565b830182614066565b50505b505050565b5f82821c905092915050565b5f6140e95f19846008026140ce565b1980831691505092915050565b5f61410183836140da565b9150826002028217905092915050565b61411a8261315e565b67ffffffffffffffff811115614133576141326132a2565b5b61413d8254613e14565b614148828285614088565b5f60209050601f831160018114614179575f8415614167578287015190505b61417185826140f6565b8655506141d8565b601f19841661418786613f74565b5f5b828110156141ae57848901518255600182019150602085019450602081019050614189565b868310156141cb57848901516141c7601f8916826140da565b8355505b6001600288020188555050505b505050505050565b7f4465616c20646f6573206e6f74206578697374000000000000000000000000005f82015250565b5f614214601383613e44565b915061421f826141e0565b602082019050919050565b5f6020820190508181035f83015261424181614208565b9050919050565b7f4a432068617320616c72656164792061677265656400000000000000000000005f82015250565b5f61427c601583613e44565b915061428782614248565b602082019050919050565b5f6020820190508181035f8301526142a981614270565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6142e782613440565b91506142f283613440565b925082820261430081613440565b91508282048414831517614317576143166142b0565b5b5092915050565b7f4465616c4e65676f74696174696e6700000000000000000000000000000000005f82015250565b5f614352600f83613e44565b915061435d8261431e565b602082019050919050565b5f6020820190508181035f83015261437f81614346565b9050919050565b7f526573756c7473436865636b65640000000000000000000000000000000000005f82015250565b5f6143ba600e83613e44565b91506143c582614386565b602082019050919050565b5f6020820190508181035f8301526143e7816143ae565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f614448602e83613e44565b9150614453826143ee565b604082019050919050565b5f6020820190508181035f8301526144758161443c565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f6144ab6144a66144a18461447c565b613ff2565b614485565b9050919050565b6144bb81614491565b82525050565b5f6020820190506144d45f8301846144b2565b92915050565b5f6144e48261315e565b6144ee8185613e44565b93506144fe818560208601613178565b614507816131a0565b840191505092915050565b5f82825260208201905092915050565b5f61452c82613b05565b6145368185614512565b935061454183613b1f565b805f5b838110156145715781516145588882613b2e565b975061456383613b45565b925050600181019050614544565b5085935050505092915050565b5f60a0820190508181035f83015261459681886144da565b90506145a5602083018761379b565b6145b2604083018661379b565b6145bf606083018561379b565b81810360808301526145d18184614522565b90509695505050505050565b7f52502068617320616c72656164792061677265656400000000000000000000005f82015250565b5f614611601583613e44565b915061461c826145dd565b602082019050919050565b5f6020820190508181035f83015261463e81614605565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61469f602683613e44565b91506146aa82614645565b604082019050919050565b5f6020820190508181035f8301526146cc81614693565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a20436f6e74726f6c6c65722061645f8201527f6472657373206d75737420626520646566696e65640000000000000000000000602082015250565b5f61472d603583613e44565b9150614738826146d3565b604082019050919050565b5f6020820190508181035f83015261475a81614721565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a2063616e4368616e6765436f6e745f8201527f726f6c6c6572416464726573732069732064697361626c656400000000000000602082015250565b5f6147bb603983613e44565b91506147c682614761565b604082019050919050565b5f6020820190508181035f8301526147e8816147af565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a204f6e6c792074686520636f6e745f8201527f726f6c6c65722063616e2063616c6c2074686973206d6574686f640000000000602082015250565b5f614849603b83613e44565b9150614854826147ef565b604082019050919050565b5f6020820190508181035f8301526148768161483d565b9050919050565b6148868161361b565b82525050565b5f6040820190508181035f8301526148a481856144da565b90506148b3602083018461487d565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6148ee602083613e44565b91506148f9826148ba565b602082019050919050565b5f6020820190508181035f83015261491b816148e2565b9050919050565b7f5250206d697373696e67000000000000000000000000000000000000000000005f82015250565b5f614956600a83613e44565b915061496182614922565b602082019050919050565b5f6020820190508181035f8301526149838161494a565b9050919050565b7f4a43206d697373696e67000000000000000000000000000000000000000000005f82015250565b5f6149be600a83613e44565b91506149c98261498a565b602082019050919050565b5f6020820190508181035f8301526149eb816149b2565b9050919050565b7f536f6c766572206d697373696e670000000000000000000000000000000000005f82015250565b5f614a26600e83613e44565b9150614a31826149f2565b602082019050919050565b5f6020820190508181035f830152614a5381614a1a565b9050919050565b7f4d65646961746f7273203c3d20300000000000000000000000000000000000005f82015250565b5f614a8e600e83613e44565b9150614a9982614a5a565b602082019050919050565b5f6020820190508181035f830152614abb81614a82565b9050919050565b7f5250202f204a432073616d6500000000000000000000000000000000000000005f82015250565b5f614af6600c83613e44565b9150614b0182614ac2565b602082019050919050565b5f6020820190508181035f830152614b2381614aea565b9050919050565b7f4167726565206465706f736974206d75737420626520300000000000000000005f82015250565b5f614b5e601783613e44565b9150614b6982614b2a565b602082019050919050565b5f6020820190508181035f830152614b8b81614b52565b9050919050565b7f4d656469617465206465706f736974206d7573742062652030000000000000005f82015250565b5f614bc6601983613e44565b9150614bd182614b92565b602082019050919050565b5f6020820190508181035f830152614bf381614bba565b9050919050565b7f52500000000000000000000000000000000000000000000000000000000000005f82015250565b5f614c2e600283613e44565b9150614c3982614bfa565b602082019050919050565b5f6020820190508181035f830152614c5b81614c22565b9050919050565b7f4a430000000000000000000000000000000000000000000000000000000000005f82015250565b5f614c96600283613e44565b9150614ca182614c62565b602082019050919050565b5f6020820190508181035f830152614cc381614c8a565b9050919050565b7f536f6c76657200000000000000000000000000000000000000000000000000005f82015250565b5f614cfe600683613e44565b9150614d0982614cca565b602082019050919050565b5f6020820190508181035f830152614d2b81614cf2565b9050919050565b7f4d65646961746f727300000000000000000000000000000000000000000000005f82015250565b5f614d66600983613e44565b9150614d7182614d32565b602082019050919050565b5f6020820190508181035f830152614d9381614d5a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4d65646961746f720000000000000000000000000000000000000000000000005f82015250565b5f614dfb600883613e44565b9150614e0682614dc7565b602082019050919050565b5f6020820190508181035f830152614e2881614def565b9050919050565b5f614e3982613440565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e6b57614e6a6142b0565b5b600182019050919050565b7f50726963650000000000000000000000000000000000000000000000000000005f82015250565b5f614eaa600583613e44565b9150614eb582614e76565b602082019050919050565b5f6020820190508181035f830152614ed781614e9e565b9050919050565b7f5061796d656e74000000000000000000000000000000000000000000000000005f82015250565b5f614f12600783613e44565b9150614f1d82614ede565b602082019050919050565b5f6020820190508181035f830152614f3f81614f06565b9050919050565b7f526573756c7473000000000000000000000000000000000000000000000000005f82015250565b5f614f7a600783613e44565b9150614f8582614f46565b602082019050919050565b5f6020820190508181035f830152614fa781614f6e565b9050919050565b7f4d6564696174696f6e00000000000000000000000000000000000000000000005f82015250565b5f614fe2600983613e44565b9150614fed82614fae565b602082019050919050565b5f6020820190508181035f83015261500f81614fd6565b9050919050565b7f54696d656f7574000000000000000000000000000000000000000000000000005f82015250565b5f61504a600783613e44565b915061505582615016565b602082019050919050565b5f6020820190508181035f8301526150778161503e565b9050919050565b7f436f6c6c61746572616c000000000000000000000000000000000000000000005f82015250565b5f6150b2600a83613e44565b91506150bd8261507e565b602082019050919050565b5f6020820190508181035f8301526150df816150a6565b905091905056fea26469706673582212203ce3d2540bd057e61d983b7218f402bb7b1739a2dd8241f963e5772decd6728164736f6c63430008150033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptResult(string)": {
        "notice": "Judge Results"
      },
      "getAgreement(string)": {
        "notice": "Agreements"
      },
      "getDeal(string)": {
        "notice": "Deals"
      },
      "getJobCost(string)": {
        "notice": "Costings"
      },
      "getResult(string)": {
        "notice": "Post Results"
      },
      "hasDeal(string)": {
        "notice": "Checkers"
      },
      "initialize()": {
        "notice": "Init"
      },
      "mediationAcceptResult(string)": {
        "notice": "Mediati:"
      },
      "timeoutAgree(string)": {
        "notice": "Timeouts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 640,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 643,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "_initialized",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "_initializing",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 733,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 736,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 741,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "deals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Deal)1891_storage)"
      },
      {
        "astId": 746,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "dealsForParty",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 751,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "agreements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Agreement)1930_storage)"
      },
      {
        "astId": 756,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "results",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Result)1900_storage)"
      },
      {
        "astId": 761,
        "contract": "contracts/LilypadStorage.sol:LilypadStorage",
        "label": "mediations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Result)1900_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AgreementState)1831": {
        "encoding": "inplace",
        "label": "enum SharedStructs.AgreementState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Agreement)1930_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)1930_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Deal)1891_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Deal)",
        "numberOfBytes": "32",
        "value": "t_struct(Deal)1891_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Result)1900_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Result)",
        "numberOfBytes": "32",
        "value": "t_struct(Result)1900_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)1930_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Agreement",
        "members": [
          {
            "astId": 1903,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AgreementState)1831"
          },
          {
            "astId": 1905,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resourceProviderAgreedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1907,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "jobCreatorAgreedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1909,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "dealCreatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1911,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "dealAgreedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1913,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resultsSubmittedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1915,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resultsAcceptedAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1917,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resultsCheckedAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1919,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "mediationAcceptedAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1921,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "mediationRejectedAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1923,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "timeoutAgreeAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1925,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "timeoutSubmitResultsAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 1927,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "timeoutJudgeResultsAt",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 1929,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "timeoutMediateResultsAt",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Deal)1891_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Deal",
        "members": [
          {
            "astId": 1881,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "dealId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1884,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(DealMembers)1852_storage"
          },
          {
            "astId": 1887,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "timeouts",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(DealTimeouts)1870_storage"
          },
          {
            "astId": 1890,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "pricing",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(DealPricing)1879_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(DealMembers)1852_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealMembers",
        "members": [
          {
            "astId": 1844,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "solver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1846,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "jobCreator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1848,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resourceProvider",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1851,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "mediators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DealPricing)1879_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealPricing",
        "members": [
          {
            "astId": 1872,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "instructionPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1874,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "paymentCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1876,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resultsCollateralMultiple",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1878,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "mediationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DealTimeout)1857_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealTimeout",
        "members": [
          {
            "astId": 1854,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "timeout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1856,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DealTimeouts)1870_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealTimeouts",
        "members": [
          {
            "astId": 1860,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "agree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(DealTimeout)1857_storage"
          },
          {
            "astId": 1863,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "submitResults",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(DealTimeout)1857_storage"
          },
          {
            "astId": 1866,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "judgeResults",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(DealTimeout)1857_storage"
          },
          {
            "astId": 1869,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "mediateResults",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(DealTimeout)1857_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Result)1900_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Result",
        "members": [
          {
            "astId": 1893,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "dealId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1895,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "resultsId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1897,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "dataId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1899,
            "contract": "contracts/LilypadStorage.sol:LilypadStorage",
            "label": "instructionCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}