version: '3'
services:
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
  geth2:
    image: ethereum/client-go:v1.13.5
    # restart: always
    networks:
      - lilypad
    ports:
      - "8545:8545"
      - "8546:8546"
    # volumes:
      # - ${DATA_DIRECTORY}:/data/geth
    command: >
      --datadir /data/geth
      --dev
      --ws
      --ws.api web3,eth,net
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.origins '*'
      --http
      --http.api web3,eth,net
      --http.addr 0.0.0.0
      --http.corsdomain '*'
      --http.port 8545
      --http.vhosts '*'
      
    #&& geth --exec \"eth.sendTransaction({from: eth.coinbase, to: \\\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\\", value: new web3.BigNumber(eth.getBalance(eth.coinbase)).minus(web3.toWei(1, \\\"ether\\\"))  })\" attach /data/geth/geth.ipc
    # entrypoint: [/bin/sh -c,"ls"]
    # command:  > 
    #   "/usr/local/bin/geth --datadir /data/geth --dev --ws --ws.api web3,eth,net --ws.addr 0.0.0.0 --ws.port 8546 --ws.origins '*' --http --http.api web3,eth,net --http.addr 0.0.0.0 --http.corsdomain '*' --http.port 8545 --http.vhosts '*' &
    #   sleep 10 &&
    #   geth --exec \"eth.sendTransaction({from: eth.coinbase, to: \\\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\\", value: new web3.BigNumber(eth.getBalance(eth.coinbase)).minus(web3.toWei(1, \\\"ether\\\"))  })\" attach /data/geth/geth.ipc &&
    #   tail -f /dev/null
    #   "
  postgres:
    image: postgres
    restart: always
    networks:
      - lilypad
    ports:
      - 5432:5432
    volumes:
      - ./share:/share
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: public

  metrics:
    # build:
    #   context: .
    #   dockerfile: ./docker/dockerfile
    image: lilypad:latest
    # restart: always
    volumes:
      # - $DIR/migrations:$DIR/migrations
      - ./share:/app/share
    depends_on:
      - postgres
    networks:
      - lilypad
    command: ["./stack", "doppler", "docker", "&&", "./stack", "metrics"]

  solver:
    build:
      context: .
      dockerfile: ./docker/dockerfile
    image: lilypad:latest
    volumes:
      - ./share:/app/share
    # restart: always
    # depends_on:
    #   - geth
    networks:
      - lilypad
    command: ["./stack", "doppler", "docker", "&&", "./stack", "docker_solver"]  
  mediator:
    build:
      context: .
      dockerfile: ./docker/dockerfile
    image: lilypad:latest
    volumes:
      - ./share:/app/share
    # restart: always
    depends_on:
      - geth2
      # - solver
    networks:
      - lilypad
    command: ["./stack", "doppler", "docker", "&&", "./stack", "docker_mediator"]  
  provider:
      # build:
      #   context: .
      #   dockerfile: ./docker/dockerfile
      image: lilypad:latest
      volumes:
      - ./share:/app/share  
      # restart: always
      # depends_on:
      #   - geth
      networks:
        - lilypad
      command: ["./stack", "doppler", "docker", "&&", "./stack", "resource-provider --offer-gpu 1"]  
  grafana:
    networks:
    - lilypad  
    image: grafana/grafana:10.4.2
    volumes:
      - ./docker/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      # - "4318"  # otlp http
      - "9411"   # zipkin
      - 4318:4318  
    depends_on:
      - init   
    networks:
    - lilypad 
  prometheus:
    networks:
    - lilypad 
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./docker/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"    
networks:
  lilypad: